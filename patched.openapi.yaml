{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "Metal API",
    "description": "This is the API for Equinix Metal. The API allows you to programmatically interact with all\nof your Equinix Metal resources, including devices, networks, addresses, organizations,\nprojects, and your user account.\n\nThe official API docs are hosted at <https://metal.equinix.com/developers/api>.\n",
    "termsOfService": "https://metal.equinix.com/legal/",
    "contact": {
      "name": "Equinix Metal API Team",
      "email": "support@equinixmetal.com"
    },
    "license": {
      "name": "Equinix Metal",
      "url": "https://metal.equinix.com/legal/"
    }
  },
  "schemes": [
    "https"
  ],
  "host": "api.equinix.com",
  "basePath": "/metal/v1",
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "securityDefinitions": {
    "x_auth_token": {
      "type": "apiKey",
      "name": "X-Auth-Token",
      "in": "header"
    }
  },
  "security": [
    {
      "x_auth_token": [

      ]
    }
  ],
  "tags": [
    {
      "name": "Authentication",
      "description": "Hint: Equinix Metal's API can be reached at https://api.equinix.com/metal/v1\n\nMost of the endpoints in the API require authentication. Authenticating is done with an authentication token in the X-Auth-Token header.\n\n```\ncurl -H 'X-Auth-Token: my_authentication_token'\n```\n\nAuthentication tokens are used to identify the user your application is connecting to the API on behalf of. Think of authentication tokens as permanent sessions—the user creates authentication tokens, and your app can use them to connect to the API on their behalf until they delete the token.\n\n"
    },
    {
      "name": "Common Parameters",
      "description": "The Equinix Metal API uses a few methods to minimize network traffic and bandwidth:\n\n`include`\n\nFor resources that contain collections of other resources, the Equinix Metal API will return links to the other resources by default.\n\n```json\n{\n  ...\n  // Includes \"href\" links if the resource is reachable through the API.\n  \"projects\": [\n    { \"href\": \"/projects/5b590e4f-be96-4400-ae32-c315ee67964d\" },\n    { \"href\": \"/projects/f3f131c8-f302-49ef-8c44-9405022dc6dd\" }\n  ],\n  // Includes \"id\" attributes if not.\n  \"emails\": [\n    { \"id\": \"eb5d8c89-4d15-4c87-859c-5ae190ad5d9a\" },\n    { \"id\": \"c17f77ad-9070-4084-abaa-7538581d9523\" }\n  ]\n  ...\n}\n```\n\nHowever, if you're interested in acting on resources in the projects collection, it doesn't make sense to make a separate API call to retrieve each project. Instead, you can specify which collections you'd like to be included using the include parameter.\n\n```\n/user?include=projects\n```\nwill return\n\n```json\n{\n  ...\n  \"projects\": [\n    {\n      \"href\": \"/projects/c851d3c5-d55d-4b1a-99f1-96fc64768bc3\",\n      \"id\": \"c851d3c5-d55d-4b1a-99f1-96fc64768bc3\",\n      \"name\": \"Project 1\",\n      ...\n    },\n    {\n      \"href\": \"/projects/21f8e88b-bd4e-44ca-b956-4f3f88e6e5f2\",\n      \"id\": \"21f8e88b-bd4e-44ca-b956-4f3f88e6e5f2\",\n      \"name\": \"Project 2\",\n      ...\n    }\n  ],\n  ...\n}\n```\n\nThe `include` parameter is accepted for all `GET` requests on all resources and collections, and should be specified as a comma-separated list.\n\n```\n/user?include=emails,projects,memberships\n```\n\nYou may also include nested associations up to 3 levels deep using dot notation:\n\n```\n/user?include=memberships.projects\n```\n"
    },
    {
      "name": "Errors",
      "description": "Equinix Metal uses conventional HTTP response codes to indicate the success or failure of an API request.\n\nIn general: Codes in the 2xx range indicate success. Codes in the 4xx range indicate an error that failed given the information provided (e.g., a required parameter was omitted, a charge failed, etc.). Codes in the 5xx range indicate an error with Equinix Metal's servers (these are rare).\n\n| Code                               | Summary\n| ---------------------------------- | ------------------------------------------------------\n| 200 OK                             | Everything worked as expected.\n| 201 Create                         | Everything worked as expected, the resource was created.\n| 422 Bad Request                    | The request was unacceptable, often due to missing a required parameter.\n| 401 Unauthorized                   | No valid API key provided.\n| 404 Not Found                      | The requested resource doesn't exist.\n| 500, 502, 503, 504 - Server Errors | Something went wrong on Equinix Metal's end. (These are rare.)\n\nErrors (4xx, 5xx) reported by the API will include a JSON error response.  This response will be structured as one of the following:\n\n```json\n{\"error\": \"the error message\"}\n```\n\nor\n\n```json\n{\"errors\": [\"one error\", \"another error\"}\n```\n\nThe JSON response is not guaranteed so check the HTTP status message. JSON may not be included if the error is reported by an API intermediary, like a loadbalancer service.\n"
    },
    {
      "name": "Batches",
      "description": "Manage device batches. See project endpoints to list batches for a particular project. Check out the product docs to learn more about [Batch Deployment](https://metal.equinix.com/developers/docs/deploy/batch-deployment/)."
    },
    {
      "name": "BGP",
      "description": "Manage BGP configs and sessions. See device endpoints to create and list BGP sessions for a particular device. Check out the product docs to learn more about [Local and Global BGP](https://metal.equinix.com/developers/docs/networking/local-global-bgp/)."
    },
    {
      "name": "Capacity",
      "description": "Capacity Management. Check out the product docs to learn more about [Capacity](https://metal.equinix.com/developers/docs/locations/capacity/)."
    },
    {
      "name": "Connections",
      "description": "Network Interconnections. See Instructions to create Network Interconnections at Check out the product docs to learn more about [Equinix Fabric](https://metal.equinix.com/developers/docs/networking/fabric/)."
    },
    {
      "name": "Devices",
      "description": "Device Management. Check out the product docs to learn more about [Server Devices](https://metal.equinix.com/developers/docs/servers/)."
    },
    {
      "name": "Emails",
      "description": "Email Management"
    },
    {
      "name": "Events",
      "description": "Event Management"
    },
    {
      "name": "Facilities",
      "description": "Facility Management. Check out the product docs to learn more about [Facilities](https://metal.equinix.com/developers/docs/locations/)."
    },
    {
      "name": "GlobalBgpRanges",
      "description": "Global BGP Range Management"
    },
    {
      "name": "HardwareReservations",
      "description": "Hardware Reservation Management. Check out the product docs to learn more about [Reserved Hardware](https://metal.equinix.com/developers/docs/deploy/reserved/)."
    },
    {
      "name": "Incidents",
      "description": "Incident Management"
    },
    {
      "name": "Invitations",
      "description": "Manage invitations. See project endpoints to create a new invitation. Check out the product docs to learn more about [Invitations](https://metal.equinix.com/developers/docs/accounts/)."
    },
    {
      "name": "IPAddresses",
      "description": "Manage IP addresses. See device and project endpoints to list and create IP assignments for a particular project or device. Check out the product docs to learn more about [the basic networking features](https://metal.equinix.com/developers/docs/networking/standard-ips/)."
    },
    {
      "name": "Licenses",
      "description": "Manage licenses. See project endpoints to list and create licenses for a particular project."
    },
    {
      "name": "Memberships",
      "description": "Membership Management (Project). Check out the product docs to learn more about [Membership](https://metal.equinix.com/developers/docs/accounts/)."
    },
    {
      "name": "MetalGateways",
      "description": "Metal Gateway Management.Check out the product docs to learn more about [Metal Gateways](https://metal.equinix.com/developers/docs/networking/metal-gateway/)."
    },
    {
      "name": "Metros",
      "description": "Metro Management. Check out the product docs to learn more about [Metros](https://metal.equinix.com/developers/docs/locations/metros/)."
    },
    {
      "name": "OperatingSystems",
      "description": "Operating System Management. Check out the product docs to learn more about [Operating Systems choices](https://metal.equinix.com/developers/docs/operating-systems/)."
    },
    {
      "name": "OperatingSystemVersions",
      "description": "Operating System Version Management"
    },
    {
      "name": "Organizations",
      "description": "Organizations Management. Check out the product docs to learn more about [Organizations](https://metal.equinix.com/developers/docs/accounts/)."
    },
    {
      "name": "Otps",
      "description": "Otps ManagementCheck out the product docs to learn more about [OTP](https://metal.equinix.com/developers/docs/accounts/two-factor-authentication/)."
    },
    {
      "name": "PasswordResetTokens",
      "description": "Password Reset Token Management"
    },
    {
      "name": "PaymentMethods",
      "description": "Payment Method Management"
    },
    {
      "name": "Plans",
      "description": "Plan Management (Device). Check out the product docs to learn more about [Device Plans](https://metal.equinix.com/developers/docs/servers/)."
    },
    {
      "name": "Ports",
      "description": "Port ManagementCheck out the product docs to learn more about [Port configurations](https://metal.equinix.com/developers/docs/networking/layer2/)."
    },
    {
      "name": "Projects",
      "description": "Project Management. Check out the product docs to learn more about [Projects](https://metal.equinix.com/developers/docs/accounts/)."
    },
    {
      "name": "Market",
      "description": "Spot Market Prices Management. Check out the product docs to learn more about [Spot Market features](https://metal.equinix.com/developers/docs/deploy/spot-market/)."
    },
    {
      "name": "SelfServiceReservations",
      "description": "Self Service Reservations"
    },
    {
      "name": "SpotMarketRequest",
      "description": "Spot Market Requests Management. Check out the product docs to learn more about [Spot Market features](https://metal.equinix.com/developers/docs/deploy/spot-market/)."
    },
    {
      "name": "SSHKeys",
      "description": "Manage SSH keys. See project endpoints to list and create project-level SSH keys."
    },
    {
      "name": "SupportRequest",
      "description": "Support request"
    },
    {
      "name": "TransferRequests",
      "description": "Project Transfer Requests Management"
    },
    {
      "name": "TwoFactorAuth",
      "description": "Two Factor Authentication Management. Check out the product docs to learn more about [2FA](https://metal.equinix.com/developers/docs/accounts/two-factor-authentication/)."
    },
    {
      "name": "Usages",
      "description": "Usage Management"
    },
    {
      "name": "Userdata",
      "description": "Userdata Management"
    },
    {
      "name": "Users",
      "description": "User Management"
    },
    {
      "name": "UserVerificationTokens",
      "description": "User Verification Token Management"
    },
    {
      "name": "VLANs",
      "description": "Manage virtual networks (VLANs). See project endpoints to list and create virtual networks. Check out the product docs to learn more about [VLANs](https://metal.equinix.com/developers/docs/networking/layer2/)."
    },
    {
      "name": "Volumes",
      "description": "Volume Management (Block Storage). Notice: Block storage support will be deprecated soon. Please check here: https://metal.equinix.com/developers/docs/resilience-recovery/elastic-block-storage/ for more details."
    }
  ],
  "paths": {
    "/user/api-keys": {
      "get": {
        "summary": "Retrieve all user API keys",
        "description": "Returns all API keys for the current user.",
        "operationId": "findAPIKeys",
        "tags": [
          "Authentication"
        ],
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/AuthTokenList"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create a API key",
        "description": "Creates a API key for the current user.",
        "operationId": "createAPIKey",
        "tags": [
          "Authentication"
        ],
        "parameters": [
          {
            "name": "auth_token",
            "in": "body",
            "description": "API key to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AuthTokenInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "$ref": "#/definitions/AuthToken"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "unprocessable entity",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/user/api-keys/{id}": {
      "delete": {
        "summary": "Delete the API key",
        "description": "Deletes the current user API key.",
        "operationId": "deleteUserAPIKey",
        "tags": [
          "Authentication"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "API Key UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "no content"
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/projects/{id}/api-keys": {
      "get": {
        "summary": "Retrieve all API keys for the project.",
        "description": "Returns all API keys for a specific project.",
        "operationId": "findProjectAPIKeys",
        "tags": [
          "Authentication"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Project UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/AuthTokenList"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create an API key for a project.",
        "description": "Creates an API key for a project.",
        "operationId": "createProjectAPIKey",
        "tags": [
          "Authentication"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Project UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "auth_token",
            "in": "body",
            "description": "API Key to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AuthTokenInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "$ref": "#/definitions/AuthToken"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "unprocessable entity",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api-keys/{id}": {
      "delete": {
        "summary": "Delete the API key",
        "description": "Deletes the API key.",
        "operationId": "deleteAPIKey",
        "tags": [
          "Authentication"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "API Key UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "no content"
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/projects/{id}/batches": {
      "get": {
        "summary": "Retrieve all batches by project",
        "description": "Returns all batches for the given project",
        "operationId": "findBatchesByProject",
        "tags": [
          "Projects",
          "Batches"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Project UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/BatchesList"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/batches/{id}": {
      "get": {
        "summary": "Retrieve a Batch",
        "description": "Returns a Batch",
        "operationId": "findBatchById",
        "tags": [
          "Batches"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Batch UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/Batch"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete the Batch",
        "description": "Deletes the Batch.",
        "operationId": "deleteBatch",
        "tags": [
          "Batches"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Batch UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "remove_associated_instances",
            "description": "Delete all instances created from this batch",
            "in": "query",
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "204": {
            "description": "no content"
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/projects/{id}/bgp-configs": {
      "post": {
        "tags": [
          "Projects",
          "BGP"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Project UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "bgp_config_request",
            "in": "body",
            "description": "BGP config Request to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BgpConfigRequestInput"
            }
          }
        ],
        "summary": "Requesting bgp config",
        "description": "Requests to enable bgp configuration for a project.",
        "operationId": "requestBgpConfig",
        "responses": {
          "204": {
            "description": "no content"
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "unprocessable entity",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/projects/{id}/bgp-config": {
      "get": {
        "summary": "Retrieve a bgp config",
        "description": "Returns a bgp config",
        "operationId": "findBgpConfigByProject",
        "tags": [
          "Projects",
          "BGP"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Project UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok\n\nWhen BGP configuration is not enabled empty structure is returned.\nWhen BGP configuration is disabled after being enabled BGP configuration data is returned with status disabled.\n",
            "schema": {
              "$ref": "#/definitions/BgpConfig"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found\n\nThe project was not found.\n",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/devices/{id}/bgp/neighbors": {
      "get": {
        "summary": "Retrieve BGP neighbor data for this device",
        "description": "Provides a summary of the BGP neighbor data associated to the BGP sessions for this device.",
        "operationId": "getBgpNeighborData",
        "tags": [
          "Devices",
          "BGP"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Device UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/BgpSessionNeighbors"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/projects/{id}/bgp/sessions": {
      "get": {
        "summary": "Retrieve all BGP sessions for project",
        "description": "Provides a listing of available BGP sessions for the project.",
        "operationId": "findProjectBgpSessions",
        "tags": [
          "Projects",
          "BGP"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Project UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/BgpSessionList"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/devices/{id}/bgp/sessions": {
      "get": {
        "summary": "Retrieve all BGP sessions",
        "description": "Provides a listing of available BGP sessions for the device.",
        "operationId": "findBgpSessions",
        "tags": [
          "Devices",
          "BGP"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Device UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/BgpSessionList"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create a BGP session",
        "description": "Creates a BGP session.",
        "operationId": "createBgpSession",
        "tags": [
          "Devices",
          "BGP"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Device UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "bgp_session",
            "in": "body",
            "description": "BGP session to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BGPSessionInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "$ref": "#/definitions/BgpSession"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "unprocessable entity",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/bgp/sessions/{id}": {
      "get": {
        "summary": "Retrieve a BGP session",
        "description": "Returns a BGP session",
        "operationId": "findBgpSessionById",
        "tags": [
          "BGP"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "BGP session UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/BgpSession"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete the BGP session",
        "description": "Deletes the BGP session.",
        "operationId": "deleteBgpSession",
        "tags": [
          "BGP"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "BGP session UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "no content"
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "summary": "Update the BGP session",
        "description": "Updates the BGP session by either enabling or disabling the default route functionality.",
        "operationId": "updateBgpSession",
        "tags": [
          "BGP"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "BGP session UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "default_route",
            "in": "body",
            "description": "Default route",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "unprocessable entity",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/capacity": {
      "get": {
        "summary": "View capacity",
        "description": "Returns a list of facilities and plans with their current capacity.",
        "operationId": "findCapacityForFacility",
        "tags": [
          "Capacity"
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/CapacityList"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Check capacity",
        "description": "Validates if a deploy can be fulfilled.",
        "operationId": "checkCapacityForFacility",
        "tags": [
          "Capacity"
        ],
        "parameters": [
          {
            "name": "facility",
            "in": "body",
            "description": "Facility to check capacity in",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CapacityInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/CapacityCheckPerFacilityList"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "unprocessable entity",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/capacity/metros": {
      "get": {
        "summary": "View capacity for metros",
        "description": "Returns a list of metros and plans with their current capacity.",
        "operationId": "findCapacityForMetro",
        "tags": [
          "Capacity"
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/MetroCapacityList"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Check capacity for a metro",
        "description": "Validates if a deploy can be fulfilled in a metro.",
        "operationId": "checkCapacityForMetro",
        "tags": [
          "Capacity"
        ],
        "parameters": [
          {
            "name": "servers",
            "in": "body",
            "description": "Metro to check capacity in",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CapacityPerMetroInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/CapacityCheckPerMetroList"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "unprocessable entity",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/organizations/{id}/capacity/metros": {
      "get": {
        "summary": "View available hardware plans per Metro for given organization",
        "description": "Returns a list of metros and plans with their current capacity.",
        "operationId": "findOrganizationCapacityPerMetro",
        "tags": [
          "Capacity",
          "Organizations"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Organization UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/MetroCapacityList"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/organizations/{id}/capacity": {
      "get": {
        "summary": "View available hardware plans per Facility for given organization",
        "description": "Returns a list of facilities and plans with their current capacity.",
        "operationId": "findOrganizationCapacityPerFacility",
        "tags": [
          "Capacity",
          "Organizations"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Organization UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/CapacityList"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/devices/{id}/events": {
      "get": {
        "summary": "Retrieve device's events",
        "description": "Returns a list of events pertaining to a specific device",
        "operationId": "findDeviceEvents",
        "tags": [
          "Events",
          "Devices"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Device UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page to return",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "minimum": 1,
            "maximum": 100000,
            "required": false
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Items returned per page",
            "type": "integer",
            "format": "int32",
            "default": 10,
            "minimum": 1,
            "maximum": 1000,
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/EventList"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/organizations/{id}/events": {
      "get": {
        "summary": "Retrieve organization's events",
        "description": "Returns a list of events for a single organization",
        "operationId": "findOrganizationEvents",
        "tags": [
          "Events",
          "Organizations"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Organization UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page to return",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "minimum": 1,
            "maximum": 100000,
            "required": false
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Items returned per page",
            "type": "integer",
            "format": "int32",
            "default": 10,
            "minimum": 1,
            "maximum": 1000,
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/EventList"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/projects/{id}/events": {
      "get": {
        "summary": "Retrieve project's events",
        "description": "Returns a list of events for a single project",
        "operationId": "findProjectEvents",
        "tags": [
          "Events",
          "Projects"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Project UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page to return",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "minimum": 1,
            "maximum": 100000,
            "required": false
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Items returned per page",
            "type": "integer",
            "format": "int32",
            "default": 10,
            "minimum": 1,
            "maximum": 1000,
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/EventList"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/volumes/{id}/events": {
      "get": {
        "summary": "Retrieve volume's events",
        "description": "Returns a list of the current volume’s events",
        "operationId": "findVolumeEvents",
        "tags": [
          "Events",
          "Volumes"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Volume UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page to return",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "minimum": 1,
            "maximum": 100000,
            "required": false
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Items returned per page",
            "type": "integer",
            "format": "int32",
            "default": 10,
            "minimum": 1,
            "maximum": 1000,
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/EventList"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/events": {
      "get": {
        "summary": "Retrieve current user's events",
        "description": "Returns a list of the current user’s events",
        "operationId": "findEvents",
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page to return",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "minimum": 1,
            "maximum": 100000,
            "required": false
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Items returned per page",
            "type": "integer",
            "format": "int32",
            "default": 10,
            "minimum": 1,
            "maximum": 1000,
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/EventList"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/events/{id}": {
      "get": {
        "summary": "Retrieve an event",
        "description": "Returns a single event if the user has access",
        "operationId": "findEventById",
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Event UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/connections/{connection_id}/events": {
      "get": {
        "summary": "Retrieve connection events",
        "description": "Returns a list of the connection events",
        "operationId": "findConnectionEvents",
        "tags": [
          "Events",
          "Connections"
        ],
        "parameters": [
          {
            "name": "connection_id",
            "in": "path",
            "description": "Connection UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page to return",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "minimum": 1,
            "maximum": 100000,
            "required": false
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Items returned per page",
            "type": "integer",
            "format": "int32",
            "default": 10,
            "minimum": 1,
            "maximum": 1000,
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/connections/{connection_id}/ports/{id}/events": {
      "get": {
        "summary": "Retrieve connection port events",
        "description": "Returns a list of the connection port events",
        "operationId": "findConnectionPortEvents",
        "tags": [
          "Events",
          "Connections"
        ],
        "parameters": [
          {
            "name": "connection_id",
            "in": "path",
            "description": "Connection UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Connection Port UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page to return",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "minimum": 1,
            "maximum": 100000,
            "required": false
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Items returned per page",
            "type": "integer",
            "format": "int32",
            "default": 10,
            "minimum": 1,
            "maximum": 1000,
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/virtual-circuit/{id}/events": {
      "get": {
        "summary": "Retrieve connection events",
        "description": "Returns a list of the virtual circuit events",
        "operationId": "findVirtualCircuitEvents",
        "tags": [
          "Events",
          "Connections"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Virtual Circuit UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page to return",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "minimum": 1,
            "maximum": 100000,
            "required": false
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Items returned per page",
            "type": "integer",
            "format": "int32",
            "default": 10,
            "minimum": 1,
            "maximum": 1000,
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/facilities": {
      "get": {
        "summary": "Retrieve all facilities",
        "description": "Provides a listing of available datacenters where you can provision Packet devices.",
        "operationId": "findFacilities",
        "tags": [
          "Facilities"
        ],
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "address",
                "labels"
              ]
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "address",
                "labels"
              ]
            },
            "collectionFormat": "csv",
            "default": [
              "address"
            ],
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/FacilityList"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/projects/{id}/facilities": {
      "get": {
        "summary": "Retrieve all facilities visible by the project",
        "description": "Returns a listing of available datacenters for the given project",
        "operationId": "findFacilitiesByProject",
        "tags": [
          "Facilities",
          "Projects"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Project UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/FacilityList"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/organizations/{id}/facilities": {
      "get": {
        "summary": "Retrieve all facilities visible by the organization",
        "description": "Returns a listing of available datacenters for the given organization",
        "operationId": "findFacilitiesByOrganization",
        "tags": [
          "Facilities",
          "Organizations"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Organization UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/FacilityList"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/projects/{id}/global-bgp-ranges": {
      "get": {
        "summary": "Retrieve all global bgp ranges",
        "description": "Returns all global bgp ranges for a project",
        "operationId": "findGlobalBgpRanges",
        "tags": [
          "GlobalBgpRanges",
          "Projects"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Project UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/GlobalBgpRangeList"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/projects/{id}/hardware-reservations": {
      "get": {
        "summary": "Retrieve all hardware reservations for a given project",
        "description": "Provides a collection of hardware reservations for a given project.",
        "operationId": "findProjectHardwareReservations",
        "tags": [
          "Projects",
          "HardwareReservations"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Project UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page to return",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "minimum": 1,
            "maximum": 100000,
            "required": false
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Items returned per page",
            "type": "integer",
            "format": "int32",
            "default": 10,
            "minimum": 1,
            "maximum": 1000,
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/HardwareReservationList"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/hardware-reservations/{id}": {
      "get": {
        "summary": "Retrieve a hardware reservation",
        "description": "Returns a single hardware reservation",
        "operationId": "findHardwareReservationById",
        "tags": [
          "HardwareReservations"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "HardwareReservation UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/Device"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/incidents": {
      "get": {
        "summary": "Retrieve the number of incidents",
        "description": "Retrieve the number of incidents.",
        "operationId": "findIncidents",
        "tags": [
          "Incidents"
        ],
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/devices/{id}/actions": {
      "post": {
        "summary": "Perform an action",
        "description": "Performs an action for the given device.  Possible actions include: power_on, power_off, reboot, reinstall, and rescue (reboot the device into rescue OS.)",
        "operationId": "performAction",
        "tags": [
          "Devices"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Device UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "type",
            "in": "query",
            "description": "Action to perform",
            "required": true,
            "type": "string",
            "enum": [
              "power_on",
              "power_off",
              "reboot",
              "rescue",
              "reinstall"
            ]
          }
        ],
        "responses": {
          "202": {
            "description": "accepted"
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "unprocessable entity",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/organizations/{id}/devices": {
      "get": {
        "summary": "Retrieve all devices of an organization",
        "description": "Provides a collection of devices for a given organization.",
        "operationId": "findOrganizationDevices",
        "tags": [
          "Organizations",
          "Devices"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Organization UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page to return",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "minimum": 1,
            "maximum": 100000,
            "required": false
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Items returned per page",
            "type": "integer",
            "format": "int32",
            "default": 10,
            "minimum": 1,
            "maximum": 1000,
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/DeviceList"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/projects/{id}/devices": {
      "get": {
        "summary": "Retrieve all devices of a project",
        "description": "Provides a collection of devices for a given project.",
        "operationId": "findProjectDevices",
        "tags": [
          "Projects",
          "Devices"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Project UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page to return",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "minimum": 1,
            "maximum": 100000,
            "required": false
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Items returned per page",
            "type": "integer",
            "format": "int32",
            "default": 10,
            "minimum": 1,
            "maximum": 1000,
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/DeviceList"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create a device",
        "description": "Creates a new device and provisions it in the specified location.\n\n      Device type-specific options are accepted.  For example, `baremetal` devices accept `operating_system`, `hostname`, and `plan`. These parameters may not be accepted for other device types. The default device type is `baremetal`.",
        "operationId": "createDevice",
        "tags": [
          "Projects",
          "Devices"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Project UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "device",
            "in": "body",
            "description": "Device to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeviceCreateInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "$ref": "#/definitions/Device"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "unprocessable entity",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/devices/{id}": {
      "get": {
        "summary": "Retrieve a device",
        "description": "Type-specific options (such as facility for baremetal devices) will be included as part of the main data structure.\n                         State value can be one of: active inactive queued or provisioning",
        "operationId": "findDeviceById",
        "tags": [
          "Devices"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Device UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/Device"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "summary": "Update the device",
        "description": "Updates the device.",
        "operationId": "updateDevice",
        "tags": [
          "Devices"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Device UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "device",
            "in": "body",
            "description": "Facility to update",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeviceUpdateInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/Device"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "unprocessable entity",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete the device",
        "description": "Deletes a device and deprovisions it in our datacenter.",
        "operationId": "deleteDevice",
        "tags": [
          "Devices"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Device UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "force_delete",
            "in": "query",
            "description": "Force the deletion of the device, by detaching any storage volume still active.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "204": {
            "description": "no content"
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "unprocessable entity",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/projects/{id}/devices/batch": {
      "post": {
        "summary": "Create a devices batch",
        "description": "Creates new devices in batch and provisions them in our datacenter.\n\nType-specific options (such as operating_system for baremetal devices) should be included in the main data structure alongside hostname and plan.\n\nThe features attribute allows you to optionally specify what features your server should have.\n\nFor example, if you require a server with a TPM chip, you may specify `{ \"features\": { \"tpm\": \"required\" } }` (or `{ \"features\": [\"tpm\"] }` in shorthand).\n\nThe request will fail if there are no available servers matching your criteria. Alternatively, if you do not require a certain feature, but would prefer to be assigned a server with that feature if there are any available, you may specify that feature with a preferred value (see the example request below).\n\nThe request will not fail if we have no servers with that feature in our inventory.\n\nThe facilities attribute specifies in what datacenter you wish to create the device.\n\nYou can either specify a single facility `{ \"facility\": \"f1\" }` , or you can instruct to create the device in the best available datacenter `{ \"facility\": \"any\" }`. Additionally it is possible to set a prioritized location selection.\n\nFor example `{ \"facility\": [\"f3\", \"f2\", \"any\"] }` will try to assign to the facility f3, if there are no available f2, and so on. If \"any\" is not specified for \"facility\", the request will fail unless it can assign in the selected locations.\n\nWith `{ \"facility\": \"any\" }` you have the option to diversify to indicate how many facilities you are willing to be spread across. For this purpose use parameter: `facility_diversity_level = N`.\n\nFor example:\n\n`{ \"facilities\": [\"sjc1\", \"ewr1\", \"any\"] ,  \"facility_diversity_level\" = 1, \"quantity\" = 10 }` will assign 10 devices into the same facility, trying first in \"sjc1\", and if there aren’t available, it will try in  \"ewr1\", otherwise any other.\n\nThe `ip_addresses` attribute will allow you to specify the addresses you want created with your device.\n\nTo maintain backwards compatibility, If the attribute is not sent in the request, it will be treated as if `{ \"ip_addresses\": [{ \"address_family\": 4, \"public\": true }, { \"address_family\": 4, \"public\": false }, { \"address_family\": 6, \"public\": true }] }` was sent.\n\nThe private IPv4 address is required and always need to be sent in the array. Not all operating systems support no public IPv4 address, so in those cases you will receive an error message.\n\nFor example, to only configure your server with a private IPv4 address, you can send `{ \"ip_addresses\": [{ \"address_family\": 4, \"public\": false }] }`.\n\nNote: when specifying a subnet size larger than a /30, you will need to supply the UUID(s) of existing ip_reservations in your project to assign IPs from.\n\nFor example, `{ \"ip_addresses\": [..., {\"address_family\": 4, \"public\": true, \"ip_reservations\": [\"uuid1\", \"uuid2\"]}] }`\n\nTo access a server without public IPs, you can use our Out-of-Band console access (SOS) or use another server with public IPs as a proxy.",
        "operationId": "createDeviceBatch",
        "tags": [
          "Devices",
          "Batches"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Project UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "batch",
            "in": "body",
            "description": "Batches to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InstancesBatchCreateInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "$ref": "#/definitions/BatchesList"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "unprocessable entity",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/devices/{id}/bandwidth": {
      "get": {
        "summary": "Retrieve an instance bandwidth",
        "description": "Retrieve an instance bandwidth for a given period of time.",
        "operationId": "findInstanceBandwidth",
        "tags": [
          "Devices"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Device UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "from",
            "in": "query",
            "description": "Timestamp from range",
            "required": true,
            "type": "string"
          },
          {
            "name": "until",
            "in": "query",
            "description": "Timestamp to range",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/connections": {
      "post": {
        "summary": "Request a new connection for the organization",
        "description": "Creates a new connection request. A Project ID must be specified in the request body for connections on shared ports.",
        "operationId": "createOrganizationInterconnection",
        "tags": [
          "Connections"
        ],
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "UUID of the organization",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "connection",
            "in": "body",
            "description": "Connection details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InterconnectionCreateInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "$ref": "#/definitions/Interconnection"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "unprocessable entity",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "get": {
        "summary": "List organization connections",
        "description": "List the connections belonging to the organization",
        "operationId": "organizationListInterconnections",
        "tags": [
          "Connections"
        ],
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "UUID of the organization",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/InterconnectionList"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/projects/{project_id}/connections": {
      "post": {
        "summary": "Request a new connection for the project's organization",
        "description": "Creates a new connection request",
        "operationId": "createProjectInterconnection",
        "tags": [
          "Connections"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "description": "UUID of the project",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "connection",
            "in": "body",
            "description": "Connection details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InterconnectionCreateInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "$ref": "#/definitions/Interconnection"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "unprocessable entity",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "get": {
        "summary": "List project connections",
        "description": "List the connections belonging to the project",
        "operationId": "projectListInterconnections",
        "tags": [
          "Connections"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "description": "UUID of the project",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/InterconnectionList"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/connections/{connection_id}": {
      "get": {
        "summary": "Get connection",
        "description": "Get the details of a connection",
        "operationId": "getInterconnection",
        "tags": [
          "Connections"
        ],
        "parameters": [
          {
            "name": "connection_id",
            "in": "path",
            "description": "Connection UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/Interconnection"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "summary": "Update connection",
        "description": "Update the details of a connection",
        "operationId": "updateInterconnection",
        "tags": [
          "Connections"
        ],
        "parameters": [
          {
            "name": "connection_id",
            "in": "path",
            "description": "Connection UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "connection",
            "in": "body",
            "description": "Updated connection details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InterconnectionUpdateInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/Interconnection"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete connection",
        "description": "Delete a connection, its associated ports and virtual circuits.",
        "operationId": "deleteInterconnection",
        "tags": [
          "Connections"
        ],
        "parameters": [
          {
            "name": "connection_id",
            "in": "path",
            "description": "Connection UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "202": {
            "description": "accepted",
            "schema": {
              "$ref": "#/definitions/Interconnection"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/connections/{connection_id}/ports": {
      "get": {
        "summary": "List a connection's ports",
        "description": "List the ports associated to an connection.",
        "operationId": "listConnectionPorts",
        "tags": [
          "Connections"
        ],
        "parameters": [
          {
            "name": "connection_id",
            "in": "path",
            "description": "UUID of the connection",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/InterconnectionPortList"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/connections/{connection_id}/ports/{id}": {
      "get": {
        "summary": "Get a connection port",
        "description": "Get the details of an connection port.",
        "operationId": "getConnectionPort",
        "tags": [
          "Connections"
        ],
        "parameters": [
          {
            "name": "connection_id",
            "in": "path",
            "description": "UUID of the connection",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Port UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/InterconnectionPort"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/connections/{connection_id}/ports/{port_id}/virtual-circuits": {
      "get": {
        "summary": "List a connection port's virtual circuits",
        "description": "List the virtual circuit record(s) associatiated with a particular connection port.",
        "operationId": "listConnectionPortVirtualCircuits",
        "tags": [
          "Connections"
        ],
        "parameters": [
          {
            "name": "connection_id",
            "in": "path",
            "description": "UUID of the connection",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "port_id",
            "in": "path",
            "description": "UUID of the connection port",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/VirtualCircuitList"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create a new Virtual Circuit",
        "description": "Create a new Virtual Circuit on a dedicated connection using a Virtual Network record and an NNI VLAN value.",
        "operationId": "createConnectionPortVirtualCircuit",
        "tags": [
          "Connections"
        ],
        "parameters": [
          {
            "name": "connection_id",
            "in": "path",
            "description": "UUID of the connection",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "port_id",
            "in": "path",
            "description": "UUID of the connection port",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "virtual_circuit",
            "in": "body",
            "description": "Virtual Circuit details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VirtualCircuitCreateInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/VirtualCircuitList"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/virtual-circuits/{id}": {
      "get": {
        "summary": "Get a virtual circuit",
        "description": "Get the details of a virtual circuit",
        "operationId": "getVirtualCircuit",
        "tags": [
          "Connections"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Virtual Circuit UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/VirtualCircuit"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "summary": "Update a virtual circuit",
        "description": "Update the details of a virtual circuit.",
        "operationId": "updateVirtualCircuit",
        "tags": [
          "Connections"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Virtual Circuit UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "virtual_circuit",
            "in": "body",
            "description": "Updated Virtual Circuit details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VirtualCircuitUpdateInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/VirtualCircuit"
            }
          },
          "202": {
            "description": "accepted",
            "schema": {
              "$ref": "#/definitions/VirtualCircuit"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a virtual circuit",
        "description": "Delete a virtual circuit from a dedicated port.",
        "operationId": "deleteVirtualCircuit",
        "tags": [
          "Connections"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Virtual Circuit UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "202": {
            "description": "accepted",
            "schema": {
              "$ref": "#/definitions/VirtualCircuit"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/invitations/{id}": {
      "get": {
        "summary": "View an invitation",
        "description": "Returns a single invitation. (It include the `invitable` to maintain backward compatibility but will be removed soon)",
        "operationId": "findInvitationById",
        "tags": [
          "Invitations"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Invitation UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/Invitation"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "summary": "Accept an invitation",
        "description": "Accept an invitation.",
        "operationId": "acceptInvitation",
        "tags": [
          "Invitations"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Invitation UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/Membership"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Decline an invitation",
        "description": "Decline an invitation.",
        "operationId": "declineInvitation",
        "tags": [
          "Invitations"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Invitation UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "no content"
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/projects/{project_id}/invitations": {
      "get": {
        "summary": "Retrieve project invitations",
        "description": "Returns all invitations in a project.",
        "operationId": "findProjectInvitations",
        "tags": [
          "Invitations",
          "Projects"
        ],
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page to return",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "minimum": 1,
            "maximum": 100000,
            "required": false
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Items returned per page",
            "type": "integer",
            "format": "int32",
            "default": 10,
            "minimum": 1,
            "maximum": 1000,
            "required": false
          },
          {
            "name": "project_id",
            "in": "path",
            "description": "Project UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/InvitationList"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create an invitation for a project",
        "description": "In order to add a user to a project, they must first be invited.",
        "operationId": "createProjectInvitation",
        "tags": [
          "Invitations",
          "Projects"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "description": "Project UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "invitation",
            "in": "body",
            "description": "Invitation to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InvitationInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "$ref": "#/definitions/Invitation"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "unprocessable entity",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/organizations/{id}/invitations": {
      "get": {
        "summary": "Retrieve organization invitations",
        "description": "Returns all invitations in an organization.",
        "operationId": "findOrganizationInvitations",
        "tags": [
          "Invitations",
          "Organizations"
        ],
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page to return",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "minimum": 1,
            "maximum": 100000,
            "required": false
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Items returned per page",
            "type": "integer",
            "format": "int32",
            "default": 10,
            "minimum": 1,
            "maximum": 1000,
            "required": false
          },
          {
            "name": "id",
            "in": "path",
            "description": "Organization UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/InvitationList"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create an invitation for an organization",
        "description": "In order to add a user to an organization, they must first be invited.\nTo invite to several projects the parameter `projects_ids:[a,b,c]` can be used",
        "operationId": "createOrganizationInvitation",
        "tags": [
          "Invitations",
          "Organizations"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Organization UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "invitation",
            "in": "body",
            "description": "Invitation to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InvitationInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "$ref": "#/definitions/Invitation"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "unprocessable entity",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/invitations": {
      "get": {
        "summary": "Retrieve current user invitations",
        "description": "Returns all invitations in current user.",
        "operationId": "findInvitations",
        "tags": [
          "Invitations",
          "Users"
        ],
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page to return",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "minimum": 1,
            "maximum": 100000,
            "required": false
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Items returned per page",
            "type": "integer",
            "format": "int32",
            "default": 10,
            "minimum": 1,
            "maximum": 1000,
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/InvitationList"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/ips/{id}": {
      "get": {
        "summary": "Retrieve an ip address",
        "description": "Returns a single ip address if the user has access.",
        "operationId": "findIPAddressById",
        "tags": [
          "IPAddresses"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "IP Address UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/IPAssignment"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "Update an ip address",
        "description": "Update details about an ip address",
        "operationId": "updateIPAddress",
        "tags": [
          "IPAddresses"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "IP Address UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "details",
            "in": "query",
            "description": "Notes for this IP Assignment",
            "required": true,
            "type": "string"
          },
          {
            "name": "customdata",
            "in": "query",
            "description": "Provides the custom metadata stored for this IP Assignment in json format",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/IPAssignment"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Unassign an ip address",
        "description": "Note! This call can be used to un-assign an IP assignment or delete an IP reservation. Un-assign an IP address record. Use the assignment UUID you get after attaching the IP. This will remove the relationship between an IP and the device and will make the IP address available to be assigned to another device. Delete and IP reservation. Use the reservation UUID you get after adding the IP to the project. This will permanently delete the IP block reservation from the project.",
        "operationId": "deleteIPAddress",
        "tags": [
          "IPAddresses"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "IP Address UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "no content"
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/devices/{id}/ips": {
      "get": {
        "summary": "Retrieve all ip assignments",
        "description": "Returns all ip assignments for a device.",
        "operationId": "findIPAssignments",
        "tags": [
          "Devices",
          "IPAddresses"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Device UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/IPAssignmentList"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create an ip assignment",
        "description": "Creates an ip assignment for a device.",
        "operationId": "createIPAssignment",
        "tags": [
          "Devices",
          "IPAddresses"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Device UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "ip_assignment",
            "in": "body",
            "description": "IPAssignment to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IPAssignmentInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "$ref": "#/definitions/IPAssignment"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "unprocessable entity",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/ips/{id}/available": {
      "get": {
        "summary": "Retrieve all available subnets of a particular reservation",
        "description": "Provides a list of IP resevations for a single project.",
        "operationId": "findIPAvailabilities",
        "tags": [
          "IPAddresses"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "IP Reservation UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "cidr",
            "in": "query",
            "description": "Size of subnets in bits",
            "required": true,
            "type": "string",
            "enum": [
              "20",
              "21",
              "22",
              "23",
              "24",
              "25",
              "26",
              "27",
              "28",
              "29",
              "30",
              "31",
              "32",
              "33",
              "34",
              "35",
              "36",
              "37",
              "38",
              "39",
              "40",
              "41",
              "42",
              "43",
              "44",
              "45",
              "46",
              "47",
              "48",
              "49",
              "50",
              "51",
              "52",
              "53",
              "54",
              "55",
              "56",
              "57",
              "58",
              "59",
              "60",
              "61",
              "62",
              "63",
              "64",
              "65",
              "66",
              "67",
              "68",
              "69",
              "70",
              "71",
              "72",
              "73",
              "74",
              "75",
              "76",
              "77",
              "78",
              "79",
              "80",
              "81",
              "82",
              "83",
              "84",
              "85",
              "86",
              "87",
              "88",
              "89",
              "90",
              "91",
              "92",
              "93",
              "94",
              "95",
              "96",
              "97",
              "98",
              "99",
              "100",
              "101",
              "102",
              "103",
              "104",
              "105",
              "106",
              "107",
              "108",
              "109",
              "110",
              "111",
              "112",
              "113",
              "114",
              "115",
              "116",
              "117",
              "118",
              "119",
              "120",
              "121",
              "122",
              "123",
              "124",
              "125",
              "126",
              "127",
              "128"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/IPAvailabilitiesList"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/projects/{id}/ips": {
      "get": {
        "summary": "Retrieve all ip reservations",
        "description": "Provides a list of IP resevations for a single project.",
        "operationId": "findIPReservations",
        "tags": [
          "Projects",
          "IPAddresses"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Project UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/IPReservationList"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Projects",
          "IPAddresses"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Project UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "ip_reservation_request",
            "in": "body",
            "description": "IP Reservation Request to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IPReservationRequestInput"
            }
          }
        ],
        "summary": "Requesting IP reservations",
        "description": "Request more IP space for a project in order to have additional IP addresses to assign to devices.  If the request is within the max quota, an IP reservation will be created. If the project will exceed its IP quota, a request will be submitted for review, and will return an IP Reservation with a `state` of `pending`. You can automatically have the request fail with HTTP status 422 instead of triggering the review process by providing the `fail_on_approval_required` parameter set to `true` in the request.",
        "operationId": "requestIPReservation",
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "$ref": "#/definitions/IPReservation"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "unprocessable entity",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/projects/{id}/licenses": {
      "get": {
        "summary": "Retrieve all licenses",
        "description": "Provides a collection of licenses for a given project.",
        "operationId": "findProjectLicenses",
        "tags": [
          "Projects",
          "Licenses"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Project UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page to return",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "minimum": 1,
            "maximum": 100000,
            "required": false
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Items returned per page",
            "type": "integer",
            "format": "int32",
            "default": 10,
            "minimum": 1,
            "maximum": 1000,
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/LicenseList"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create a License",
        "description": "Creates a new license for the given project",
        "operationId": "createLicense",
        "tags": [
          "Projects",
          "Licenses"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Project UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "license",
            "in": "body",
            "description": "License to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LicenseCreateInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "$ref": "#/definitions/License"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "unprocessable entity",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/licenses/{id}": {
      "get": {
        "summary": "Retrieve a license",
        "description": "Returns a license",
        "operationId": "findLicenseById",
        "tags": [
          "Licenses"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "License UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/License"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "summary": "Update the license",
        "description": "Updates the license.",
        "operationId": "updateLicense",
        "tags": [
          "Licenses"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "License UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "license",
            "in": "body",
            "description": "License to update",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LicenseUpdateInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/License"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "unprocessable entity",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete the license",
        "description": "Deletes a license.",
        "operationId": "deleteLicense",
        "tags": [
          "Licenses"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "License UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "no content"
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/projects/{project_id}/memberships": {
      "get": {
        "summary": "Retrieve project memberships",
        "description": "Returns all memberships in a project.",
        "operationId": "findProjectMemberships",
        "tags": [
          "Projects",
          "Memberships"
        ],
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page to return",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "minimum": 1,
            "maximum": 100000,
            "required": false
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Items returned per page",
            "type": "integer",
            "format": "int32",
            "default": 10,
            "minimum": 1,
            "maximum": 1000,
            "required": false
          },
          {
            "name": "project_id",
            "in": "path",
            "description": "Project UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/MembershipList"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/memberships/{id}": {
      "get": {
        "summary": "Retrieve a membership",
        "description": "Returns a single membership.",
        "operationId": "findMembershipById",
        "tags": [
          "Memberships"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Membership UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/Membership"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "summary": "Update the membership",
        "description": "Updates the membership.",
        "operationId": "updateMembership",
        "tags": [
          "Memberships"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Membership UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "membership",
            "in": "body",
            "description": "Membership to update",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MembershipInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/Membership"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "unprocessable entity",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete the membership",
        "description": "Deletes the membership.",
        "operationId": "deleteMembership",
        "tags": [
          "Memberships"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Membership UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "no content"
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/projects/{id}/customdata": {
      "get": {
        "summary": "Retrieve the custom metadata of a project",
        "description": "Provides the custom metadata stored for this project in json format",
        "operationId": "findProjectCustomdata",
        "tags": [
          "Projects"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Project UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/organizations/{id}/customdata": {
      "get": {
        "summary": "Retrieve the custom metadata of an organization",
        "description": "Provides the custom metadata stored for this organization in json format",
        "operationId": "findOrganizationCustomdata",
        "tags": [
          "Organizations"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Organization UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/users/{id}/customdata": {
      "get": {
        "summary": "Retrieve the custom metadata of a user",
        "description": "Provides the custom metadata stored for this user in json format",
        "operationId": "findUserCustomdata",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/devices/{id}/customdata": {
      "get": {
        "summary": "Retrieve the custom metadata of an instance",
        "description": "Provides the custom metadata stored for this instance in json format",
        "operationId": "findDeviceCustomdata",
        "tags": [
          "Devices"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Instance UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/storage/{id}/customdata": {
      "get": {
        "summary": "Retrieve the custom metadata of a storage volume",
        "description": "Provides the custom metadata stored for this storage volume in json format",
        "operationId": "findVolumeCustomdata",
        "tags": [
          "Volumes"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Storage Volume UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/projects/{project_id}/ips/{id}/customdata": {
      "get": {
        "summary": "Retrieve the custom metadata of an IP Reservation",
        "description": "Provides the custom metadata stored for this IP Reservation in json format",
        "operationId": "findIPReservationCustomdata",
        "tags": [
          "Projects"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "description": "Project UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Ip Reservation UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/devices/{instance_id}/ips/{id}/customdata": {
      "get": {
        "summary": "Retrieve the custom metadata of an IP Assignment",
        "description": "Provides the custom metadata stored for this IP Assignment in json format",
        "operationId": "findIPAssignmentCustomdata",
        "tags": [
          "Devices"
        ],
        "parameters": [
          {
            "name": "instance_id",
            "in": "path",
            "description": "Instance UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Ip Assignment UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/ips/{id}/customdata": {
      "get": {
        "summary": "Retrieve the custom metadata of an IP Reservation or IP Assignment",
        "description": "Provides the custom metadata stored for this IP Reservation or IP Assignment in json format",
        "operationId": "findIPAddressCustomdata",
        "tags": [
          "IPAddresses"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Ip Reservation UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/locations/metros": {
      "get": {
        "summary": "Retrieve all metros",
        "description": "Provides a listing of available metros",
        "operationId": "findMetros",
        "tags": [
          "Metros"
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/MetroList"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/locations/metros/{id}": {
      "get": {
        "summary": "Retrieve a specific Metro's details",
        "description": "Show the details for a metro, including name, code, and country.",
        "operationId": "getMetro",
        "tags": [
          "Metros"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Metro UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/Metro"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/hardware-reservations/{id}/move": {
      "post": {
        "summary": "Move a hardware reservation",
        "description": "Move a hardware reservation to another project",
        "operationId": "moveHardwareReservation",
        "tags": [
          "HardwareReservations"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Hardware Reservation UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "project_id",
            "in": "body",
            "description": "Project UUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/HardwareReservation"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/organizations/{id}/operating-systems": {
      "get": {
        "summary": "Retrieve all operating systems visible by the organization",
        "description": "Returns a listing of available operating systems for the given organization",
        "operationId": "findOperatingSystemsByOrganization",
        "tags": [
          "OperatingSystems",
          "Organizations"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Organization UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/OperatingSystemList"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/operating-systems": {
      "get": {
        "summary": "Retrieve all operating systems",
        "description": "Provides a listing of available operating systems to provision your new device with.",
        "operationId": "findOperatingSystems",
        "tags": [
          "OperatingSystems"
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/OperatingSystemList"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/operating-system-versions": {
      "get": {
        "summary": "Retrieve all operating system versions",
        "description": "Provides a listing of available operating system versions.",
        "operationId": "findOperatingSystemVersion",
        "tags": [
          "OperatingSystemVersions"
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/OperatingSystemList"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/organizations": {
      "get": {
        "summary": "Retrieve all organizations",
        "description": "Returns a list of organizations that are accessible to the current user.",
        "operationId": "findOrganizations",
        "tags": [
          "Organizations"
        ],
        "parameters": [
          {
            "name": "personal",
            "in": "query",
            "description": "Include, exclude or show only personal organizations.",
            "required": false,
            "type": "string",
            "enum": [
              "include",
              "exclude",
              "only"
            ]
          },
          {
            "name": "without_projects",
            "in": "query",
            "description": "Include, exclude or show only organizations that have no projects.",
            "required": false,
            "type": "string",
            "enum": [
              "include",
              "exclude",
              "only"
            ]
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page to return",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "minimum": 1,
            "maximum": 100000,
            "required": false
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Items returned per page",
            "type": "integer",
            "format": "int32",
            "default": 10,
            "minimum": 1,
            "maximum": 1000,
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/OrganizationList"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create an organization",
        "description": "Creates an organization.",
        "operationId": "createOrganization",
        "tags": [
          "Organizations"
        ],
        "parameters": [
          {
            "name": "organization",
            "in": "body",
            "description": "Organization to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OrganizationInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "$ref": "#/definitions/Organization"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "unprocessable entity",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/organizations/{id}": {
      "get": {
        "summary": "Retrieve an organization's details",
        "description": "Returns a single organization's details, if the user is authorized to view it.",
        "operationId": "findOrganizationById",
        "tags": [
          "Organizations"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Organization UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/Organization"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "summary": "Update the organization",
        "description": "Updates the organization.",
        "operationId": "updateOrganization",
        "tags": [
          "Organizations"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Organization UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "organization",
            "in": "body",
            "description": "Organization to update",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OrganizationInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/Organization"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "unprocessable entity",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete the organization",
        "description": "Deletes the organization.",
        "operationId": "deleteOrganization",
        "tags": [
          "Organizations"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Organization UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "no content"
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/user/otp/recovery-codes": {
      "get": {
        "summary": "Retrieve my recovery codes",
        "description": "Returns my recovery codes.",
        "operationId": "findRecoveryCodes",
        "tags": [
          "Otps"
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/RecoveryCodeList"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "unprocessable entity",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Generate new recovery codes",
        "description": "Generate a new set of recovery codes.",
        "operationId": "regenerateCodes",
        "tags": [
          "Otps"
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/RecoveryCodeList"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "unprocessable entity",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/user/otp/verify/{otp}": {
      "post": {
        "summary": "Verify user by providing an OTP",
        "description": "It verifies the user once a valid OTP is provided. It gives back a session token, essentially logging in the user.",
        "operationId": "findEnsureOtp",
        "tags": [
          "Otps"
        ],
        "parameters": [
          {
            "name": "otp",
            "in": "path",
            "description": "OTP",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "no content"
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/user/otp/sms/receive": {
      "post": {
        "summary": "Receive an OTP per sms",
        "description": "Sends an OTP to the user's mobile phone.",
        "operationId": "receiveCodes",
        "tags": [
          "Otps"
        ],
        "responses": {
          "204": {
            "description": "no content"
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "unprocessable entity",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/reset-password": {
      "post": {
        "summary": "Create a password reset token",
        "description": "Creates a password reset token",
        "operationId": "createPasswordResetToken",
        "tags": [
          "PasswordResetTokens"
        ],
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "description": "Email of user to create password reset token",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "created"
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "unprocessable entity",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Reset current user password",
        "description": "Resets current user password.",
        "operationId": "resetPassword",
        "tags": [
          "PasswordResetTokens"
        ],
        "responses": {
          "201": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/NewPassword"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "unprocessable entity",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/organizations/{id}/payment-methods": {
      "get": {
        "summary": "Retrieve all payment methods of an organization",
        "description": "Returns all payment methods of an organization.",
        "operationId": "findOrganizationPaymentMethods",
        "tags": [
          "Organizations",
          "PaymentMethods"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Organization UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page to return",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "minimum": 1,
            "maximum": 100000,
            "required": false
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Items returned per page",
            "type": "integer",
            "format": "int32",
            "default": 10,
            "minimum": 1,
            "maximum": 1000,
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/PaymentMethodList"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create a payment method for the given organization",
        "description": "Creates a payment method.",
        "operationId": "createPaymentMethod",
        "tags": [
          "Organizations",
          "PaymentMethods"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Organization UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "payment_method",
            "in": "body",
            "description": "Payment Method to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PaymentMethodCreateInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "$ref": "#/definitions/PaymentMethod"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "unprocessable entity",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/payment-methods/{id}": {
      "get": {
        "summary": "Retrieve a payment method",
        "description": "Returns a payment method",
        "operationId": "findPaymentMethodById",
        "tags": [
          "PaymentMethods"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Payment Method UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/PaymentMethod"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "summary": "Update the payment method",
        "description": "Updates the payment method.",
        "operationId": "updatePaymentMethod",
        "tags": [
          "PaymentMethods"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Payment Method UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "payment_method",
            "in": "body",
            "description": "Payment Method to update",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PaymentMethodUpdateInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/PaymentMethod"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "unprocessable entity",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete the payment method",
        "description": "Deletes the payment method.",
        "operationId": "deletePaymentMethod",
        "tags": [
          "PaymentMethods"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Payment Method UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "no content"
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/plans": {
      "get": {
        "summary": "Retrieve all plans",
        "description": "Provides a listing of available plans to provision your device on.",
        "operationId": "findPlans",
        "tags": [
          "Plans"
        ],
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/PlanList"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/projects/{id}/plans": {
      "get": {
        "summary": "Retrieve all plans visible by the project",
        "description": "Returns a listing of available plans for the given project",
        "operationId": "findPlansByProject",
        "tags": [
          "Plans",
          "Projects"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Project UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/PlanList"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/organizations/{id}/plans": {
      "get": {
        "summary": "Retrieve all plans visible by the organization",
        "description": "Returns a listing of available plans for the given organization",
        "operationId": "findPlansByOrganization",
        "tags": [
          "Plans",
          "Organizations"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Organization UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/PlanList"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/ports/{id}": {
      "get": {
        "summary": "Retrieve a port",
        "description": "Returns a port",
        "operationId": "findPortById",
        "tags": [
          "Ports"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Port UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/Port"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/ports/{id}/assign": {
      "post": {
        "summary": "Assign a port to virtual network",
        "description": "Assign a port for a hardware to virtual network.",
        "operationId": "assignPort",
        "tags": [
          "Ports",
          "VLANs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Port UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "vnid",
            "in": "body",
            "description": "Virtual Network ID. May be the UUID of the Virtual Network record, or the VLAN value itself (ex: '1001').",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PortAssignInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/Port"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "unprocessable entity",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/ports/{id}/unassign": {
      "post": {
        "summary": "Unassign a port",
        "description": "Unassign a port for a hardware.",
        "operationId": "unassignPort",
        "tags": [
          "Ports",
          "VLANs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Port UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "vnid",
            "in": "body",
            "description": "Virtual Network ID. May be the UUID of the Virtual Network record, or the VLAN value itself (ex: '1001').",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PortAssignInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/Port"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "unprocessable entity",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/ports/{id}/disbond": {
      "post": {
        "summary": "Disabling bonding",
        "description": "Disabling bonding for one or all ports",
        "operationId": "disbondPort",
        "tags": [
          "Ports"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Port UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "bulk_disable",
            "in": "query",
            "description": "disable both ports",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/Port"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "unprocessable entity",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/ports/{id}/bond": {
      "post": {
        "summary": "Enabling bonding",
        "description": "Enabling bonding for one or all ports",
        "operationId": "bondPort",
        "tags": [
          "Ports"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Port UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "bulk_enable",
            "in": "query",
            "description": "enable both ports",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/Port"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "unprocessable entity",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/ports/{id}/convert/layer-2": {
      "post": {
        "summary": "Convert to Layer 2",
        "description": "Converts a bond port to Layer 2. IP assignments of the port will be removed.",
        "operationId": "convertLayer2",
        "tags": [
          "Ports"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Port UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "vnid",
            "in": "body",
            "description": "Virtual Network ID",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PortAssignInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/Port"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "unprocessable entity",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/ports/{id}/convert/layer-3": {
      "post": {
        "summary": "Convert to Layer 3",
        "description": "Converts a bond port to Layer 3. VLANs must first be unassigned.",
        "operationId": "convertLayer3",
        "tags": [
          "Ports"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Port UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "request_ips",
            "in": "body",
            "description": "IPs to request",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PortConvertLayer3Input"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/Port"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "unprocessable entity",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/ports/{id}/native-vlan": {
      "post": {
        "summary": "Assign a native VLAN",
        "description": "Sets a virtual network on this port as a \"native VLAN\". The VLAN must have already been assigned using the using the \"Assign a port to a virtual network\" operation.",
        "operationId": "assignNativeVlan",
        "tags": [
          "Ports",
          "VLANs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Port UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "vnid",
            "in": "query",
            "description": "Virtual Network ID. May be the UUID of the Virtual Network record, or the VLAN value itself (ex: '1001').",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/Port"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "unprocessable entity",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Remove native VLAN",
        "description": "Removes the native VLAN from this port",
        "operationId": "deleteNativeVlan",
        "tags": [
          "Ports",
          "VLANs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Port UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/Port"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "unprocessable entity",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/organizations/{id}/projects": {
      "get": {
        "summary": "Retrieve all projects of an organization",
        "description": "Returns a collection of projects that belong to the organization.",
        "operationId": "findOrganizationProjects",
        "tags": [
          "Organizations",
          "Projects"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Organization UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page to return",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "minimum": 1,
            "maximum": 100000,
            "required": false
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Items returned per page",
            "type": "integer",
            "format": "int32",
            "default": 10,
            "minimum": 1,
            "maximum": 1000,
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/ProjectList"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create a project for the organization",
        "description": "Creates a new project for the organization",
        "operationId": "createOrganizationProject",
        "tags": [
          "Organizations",
          "Projects"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Organization UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "project",
            "in": "body",
            "description": "Project to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProjectCreateInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "unprocessable entity",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/projects": {
      "get": {
        "summary": "Retrieve all projects",
        "description": "Returns a collection of projects that the current user is a member of.",
        "operationId": "findProjects",
        "tags": [
          "Projects"
        ],
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page to return",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "minimum": 1,
            "maximum": 100000,
            "required": false
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Items returned per page",
            "type": "integer",
            "format": "int32",
            "default": 10,
            "minimum": 1,
            "maximum": 1000,
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/ProjectList"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create a project",
        "description": "Creates a new project for the user default organization. If the user don't have an organization, a new one will be created.",
        "operationId": "createProject",
        "tags": [
          "Projects"
        ],
        "parameters": [
          {
            "name": "project",
            "in": "body",
            "description": "Project to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProjectCreateFromRootInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "unprocessable entity",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/projects/{id}": {
      "get": {
        "summary": "Retrieve a project",
        "description": "Returns a single project if the user has access",
        "operationId": "findProjectById",
        "tags": [
          "Projects"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Project UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "summary": "Update the project",
        "description": "Updates the project.",
        "operationId": "updateProject",
        "tags": [
          "Projects"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Project UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "project",
            "in": "body",
            "description": "Project to update",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProjectUpdateInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "unprocessable entity",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete the project",
        "description": "Deletes the project.",
        "operationId": "deleteProject",
        "tags": [
          "Projects"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Project UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "no content"
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/projects/{project_id}/self-service/reservations": {
      "get": {
        "summary": "Retrieve all reservations",
        "description": "Returns all reservations.",
        "operationId": "findSelfServiceReservations",
        "tags": [
          "SelfServiceReservations",
          "IPAddresses"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page to return",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "minimum": 1,
            "maximum": 100000,
            "required": false
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Items returned per page",
            "type": "integer",
            "format": "int32",
            "default": 10,
            "minimum": 1,
            "maximum": 1000,
            "required": false
          },
          {
            "name": "project_id",
            "in": "path",
            "description": "Project UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/SelfServiceReservationList"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create a reservation",
        "description": "Creates a reservation.",
        "operationId": "createSelfServiceReservation",
        "tags": [
          "SelfServiceReservations",
          "IPAddresses"
        ],
        "parameters": [
          {
            "name": "reservation",
            "in": "body",
            "description": "reservation to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateSelfServiceReservationRequest"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "description": "Project UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "$ref": "#/definitions/SelfServiceReservationResponse"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "unprocessable entity",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/projects/{project_id}/self-service/reservations/{id}": {
      "get": {
        "summary": "Retrieve a reservation",
        "description": "Returns a reservation",
        "operationId": "findSelfServiceReservation",
        "tags": [
          "SelfServiceReservations",
          "IPAddresses"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Reservation short_id",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "project_id",
            "in": "path",
            "description": "Project UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/SelfServiceReservationResponse"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/market/spot/prices": {
      "get": {
        "summary": "Get current spot market prices",
        "description": "Get Equinix Metal current spot market prices.",
        "operationId": "findSpotMarketPrices",
        "tags": [
          "Market"
        ],
        "parameters": [
          {
            "name": "facility",
            "in": "query",
            "description": "Facility to check spot market prices",
            "required": false,
            "type": "string"
          },
          {
            "name": "plan",
            "in": "query",
            "description": "Plan to check spot market prices",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/SpotMarketPricesList"
            }
          }
        }
      }
    },
    "/market/spot/prices/history": {
      "get": {
        "summary": "Get spot market prices for a given period of time",
        "description": "Get spot market prices for a given plan and facility in a fixed period of time\n\n*Note: In the `200` response, the property `datapoints` contains arrays of `[float, integer]`.*",
        "operationId": "findSpotMarketPricesHistory",
        "tags": [
          "Market"
        ],
        "parameters": [
          {
            "name": "facility",
            "in": "query",
            "description": "Facility to check spot market prices",
            "required": true,
            "type": "string"
          },
          {
            "name": "plan",
            "in": "query",
            "description": "Plan to check spot market prices",
            "required": true,
            "type": "string"
          },
          {
            "name": "metro",
            "in": "query",
            "description": "Metro to check spot market price history",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "Timestamp from range",
            "required": true,
            "type": "string"
          },
          {
            "name": "until",
            "in": "query",
            "description": "Timestamp to range",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/SpotPricesHistoryReport"
            }
          }
        }
      }
    },
    "/market/spot/prices/metros": {
      "get": {
        "summary": "Get current spot market prices for metros",
        "description": "Get Equinix Metal current spot market prices for all metros.",
        "operationId": "findMetroSpotMarketPrices",
        "tags": [
          "Market"
        ],
        "parameters": [
          {
            "name": "metro",
            "in": "query",
            "description": "Metro to filter spot market prices",
            "required": false,
            "type": "string"
          },
          {
            "name": "plan",
            "in": "query",
            "description": "Plan to filter spot market prices",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/SpotMarketPricesPerMetroList"
            }
          }
        }
      }
    },
    "/projects/{id}/spot-market-requests": {
      "post": {
        "summary": "Create a spot market request",
        "description": "Creates a new spot market request.\n\nType-specific options (such as operating_system for baremetal devices) should be included in the main data structure alongside hostname and plan.\n\nThe features attribute allows you to optionally specify what features your server should have. For example, if you require a server with a TPM chip, you may specify `{ \"features\": { \"tpm\": \"required\" } }` (or `{ \"features\": [\"tpm\"] }` in shorthand).\n\nThe request will fail if there are no available servers matching your criteria. Alternatively, if you do not require a certain feature, but would prefer to be assigned a server with that feature if there are any available, you may specify that feature with a preferred value (see the example request below).\n\nThe request will not fail if we have no servers with that feature in our inventory.",
        "operationId": "createSpotMarketRequest",
        "tags": [
          "Projects",
          "SpotMarketRequest"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Project UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "spot_market_request",
            "in": "body",
            "description": "Spot Market Request to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SpotMarketRequestCreateInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "$ref": "#/definitions/SpotMarketRequest"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "unprocessable entity",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "get": {
        "summary": "List spot market requests",
        "description": "View all spot market requests for a given project.",
        "operationId": "listSpotMarketRequests",
        "tags": [
          "Projects",
          "SpotMarketRequest"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Project UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/SpotMarketRequestList"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/spot-market-requests/{id}": {
      "get": {
        "summary": "Retrieve a spot market request",
        "description": "Returns a single spot market request",
        "operationId": "findSpotMarketRequestById",
        "tags": [
          "SpotMarketRequest"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "SpotMarketRequest UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/SpotMarketRequest"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete the spot market request",
        "description": "Deletes the spot market request.",
        "operationId": "deleteSpotMarketRequest",
        "tags": [
          "SpotMarketRequest"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "SpotMarketRequest UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "force_termination",
            "in": "query",
            "description": "Terminate associated spot instances",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "204": {
            "description": "no content"
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/ssh-keys": {
      "get": {
        "summary": "Retrieve all ssh keys",
        "description": "Returns a collection of the user’s ssh keys.",
        "operationId": "findSSHKeys",
        "tags": [
          "SSHKeys"
        ],
        "parameters": [
          {
            "name": "Search string",
            "in": "query",
            "description": "Search by key, label, or fingerprint",
            "required": false,
            "type": "string"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/SSHKeyList"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create a ssh key for the current user",
        "description": "Creates a ssh key.",
        "operationId": "createSSHKey",
        "tags": [
          "SSHKeys"
        ],
        "parameters": [
          {
            "name": "ssh key",
            "in": "body",
            "description": "ssh key to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SSHKeyCreateInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "$ref": "#/definitions/SSHKey"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "unprocessable entity",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/projects/{id}/ssh-keys": {
      "get": {
        "summary": "Retrieve a project's ssh keys",
        "description": "Returns a collection of the project's ssh keys.",
        "operationId": "findProjectSSHKeys",
        "tags": [
          "Projects",
          "SSHKeys"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Project UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "Search string",
            "in": "query",
            "description": "Search by key, label, or fingerprint",
            "required": false,
            "type": "string"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/SSHKeyList"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create a ssh key for the given project",
        "description": "Creates a ssh key.",
        "operationId": "createProjectSSHKey",
        "tags": [
          "Projects",
          "SSHKeys"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Project UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "ssh key",
            "in": "body",
            "description": "ssh key to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SSHKeyCreateInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "$ref": "#/definitions/SSHKey"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "unprocessable entity",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/devices/{id}/ssh-keys": {
      "get": {
        "summary": "Retrieve a device's ssh keys",
        "description": "Returns a collection of the device's ssh keys.",
        "operationId": "findDeviceSSHKeys",
        "tags": [
          "Projects",
          "SSHKeys"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Project UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "Search string",
            "in": "query",
            "description": "Search by key, label, or fingerprint",
            "required": false,
            "type": "string"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/SSHKeyList"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/ssh-keys/{id}": {
      "get": {
        "summary": "Retrieve a ssh key",
        "description": "Returns a single ssh key if the user has access",
        "operationId": "findSSHKeyById",
        "tags": [
          "SSHKeys"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "SSH Key UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/SSHKey"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "summary": "Update the ssh key",
        "description": "Updates the ssh key.",
        "operationId": "updateSSHKey",
        "tags": [
          "SSHKeys"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "SSH Key UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "ssh key",
            "in": "body",
            "description": "ssh key to update",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SSHKeyInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/SSHKey"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "unprocessable entity",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete the ssh key",
        "description": "Deletes the ssh key.",
        "operationId": "deleteSSHKey",
        "tags": [
          "SSHKeys"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ssh key UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "no content"
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/storage/{id}/attachments": {
      "get": {
        "deprecated": true,
        "summary": "Retrieve all volume attachment",
        "description": "Returns a list of the current volume’s attachments.",
        "operationId": "findVolumeAttachments",
        "tags": [
          "Volumes"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Volume UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/VolumeAttachmentList"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "deprecated": true,
        "summary": "Attach your volume",
        "description": "Attach your volume to a device.",
        "operationId": "createVolumeAttachment",
        "tags": [
          "Volumes"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Volume UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "attachment",
            "in": "body",
            "description": "Device to attach",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VolumeAttachmentInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "$ref": "#/definitions/VolumeAttachment"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "unprocessable entity",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/storage/attachments/{id}": {
      "get": {
        "deprecated": true,
        "summary": "Retrieve an attachment",
        "description": "Returns a single attachment if the user has access",
        "operationId": "findVolumeAttachmentById",
        "tags": [
          "Volumes"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Attachment UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/VolumeAttachment"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "deprecated": true,
        "summary": "Detach volume",
        "description": "Detach volume.",
        "operationId": "deleteVolumeAttachment",
        "tags": [
          "Volumes"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Attachment UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "no content"
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/storage/{id}/snapshots": {
      "get": {
        "deprecated": true,
        "summary": "Retrieve all volume snapshot",
        "description": "Returns a list of the current volume’s snapshots. To create Volume Snapshots, please check the Volume Snapshot Policies feature.",
        "operationId": "findVolumeSnapshots",
        "tags": [
          "Volumes"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Volume UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/VolumeSnapshotList"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/storage/{volume_id}/snapshots/{id}": {
      "delete": {
        "deprecated": true,
        "summary": "Delete volume snapshot",
        "description": "Delete volume snapshot.",
        "operationId": "deleteVolumeSnapshot",
        "tags": [
          "Volumes"
        ],
        "parameters": [
          {
            "name": "volume_id",
            "in": "path",
            "description": "Volume UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Snapshot UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "no content"
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/storage/{id}/snapshot-policies": {
      "post": {
        "deprecated": true,
        "summary": "Create a volume snapshot policy",
        "description": "Creates a new snapshot policy of your volume.",
        "operationId": "createVolumeSnapshotPolicy",
        "tags": [
          "Volumes"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Volume UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "snapshot_count",
            "in": "query",
            "description": "Snapshot count",
            "required": false,
            "type": "integer"
          },
          {
            "name": "snapshot_frequency",
            "in": "query",
            "description": "Snapshot frequency",
            "required": true,
            "type": "string",
            "enum": [
              "1min",
              "15min",
              "1hour",
              "1day",
              "1week",
              "1month",
              "1year"
            ]
          }
        ],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "$ref": "#/definitions/SnapshotPolicy"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "unprocessable entity",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/storage/snapshot-policies/{id}": {
      "put": {
        "deprecated": true,
        "summary": "Update the volume snapshot policy",
        "description": "Updates the volume snapshot policy.",
        "operationId": "updateVolumeSnapshotPolicy",
        "tags": [
          "Volumes"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Snapshot Policy UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "snapshot_count",
            "in": "query",
            "description": "Snapshot count",
            "required": false,
            "type": "integer"
          },
          {
            "name": "snapshot_frequency",
            "in": "query",
            "description": "Snapshot frequency",
            "required": true,
            "type": "string",
            "enum": [
              "1min",
              "15min",
              "1hour",
              "1day",
              "1week",
              "1month",
              "1year"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/SnapshotPolicy"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "unprocessable entity",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "deprecated": true,
        "summary": "Delete the volume snapshot policy",
        "description": "Deletes the volume snapshot policy.",
        "operationId": "deleteVolumeSnapshotPolicy",
        "tags": [
          "Volumes"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Snapshot Policy UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "no content"
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/projects/{id}/storage": {
      "get": {
        "deprecated": true,
        "summary": "Retrieve all volumes",
        "description": "Returns a list of the current projects’s volumes.",
        "operationId": "findVolumes",
        "tags": [
          "Volumes"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Project UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page to return",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "minimum": 1,
            "maximum": 100000,
            "required": false
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Items returned per page",
            "type": "integer",
            "format": "int32",
            "default": 10,
            "minimum": 1,
            "maximum": 1000,
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/VolumeList"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "deprecated": true,
        "summary": "Create a volume",
        "description": "Creates a new volume in our datacenter. The valid attribute values for `plan` and `facility` are:\n\n         \"facility\": \"ams1\", \"ewr1\", \"nrt1\", \"sjc1\"\n         \"plan\": \"storage_1\" (Standard), \"storage_2\" (Performance)",
        "operationId": "createVolume",
        "tags": [
          "Volumes"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Project UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "volume",
            "in": "body",
            "description": "Volume to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VolumeCreateInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "$ref": "#/definitions/Volume"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "unprocessable entity",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/storage/{id}": {
      "get": {
        "deprecated": true,
        "summary": "Retrieve a volume",
        "description": "Returns a single volume if the user has access",
        "operationId": "findVolumeById",
        "tags": [
          "Volumes"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Volume UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/Volume"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "deprecated": true,
        "summary": "Update the volume",
        "description": "Updates the volume.",
        "operationId": "updateVolume",
        "tags": [
          "Volumes"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Volume UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "volume",
            "in": "body",
            "description": "Volume to update",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VolumeUpdateInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/Volume"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "unprocessable entity",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "deprecated": true,
        "summary": "Delete the volume",
        "description": "Deletes the volume.",
        "operationId": "deleteVolume",
        "tags": [
          "Volumes"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Volume UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "no content"
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/storage/{id}/restore": {
      "post": {
        "deprecated": true,
        "summary": "Restore volume",
        "description": "Restore the volume to the given snapshot.",
        "operationId": "restoreVolume",
        "tags": [
          "Volumes"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Volume UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "restore_point",
            "in": "query",
            "description": "restore point",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/Volume"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "unprocessable entity",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/storage/{id}/clone": {
      "post": {
        "deprecated": true,
        "summary": "Clone volume/snapshot",
        "description": "Clone your volume or snapshot into a new volume. To clone the volume, send an empty body. To promote a volume snapshot into a new volume, include the snapshot_timestamp attribute in the request body.",
        "operationId": "cloneVolume",
        "tags": [
          "Volumes"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Volume UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "snapshot_timestamp",
            "in": "query",
            "description": "snapshot timestamp",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "$ref": "#/definitions/Volume"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "unprocessable entity",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/support-requests": {
      "post": {
        "tags": [
          "SupportRequest"
        ],
        "summary": "Create a support ticket",
        "description": "Support Ticket.",
        "operationId": "requestSuppert",
        "parameters": [
          {
            "name": "support_request",
            "in": "body",
            "description": "Support Request to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SupportRequestInput"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "no content"
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "unprocessable entity",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/user/otp/app": {
      "post": {
        "summary": "Enable two factor auth using app",
        "description": "Enables two factor authentication using authenticator app.",
        "operationId": "enableTfaApp",
        "tags": [
          "TwoFactorAuth"
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Disable two factor authentication",
        "description": "Disables two factor authentication.",
        "operationId": "disableTfaApp",
        "tags": [
          "TwoFactorAuth"
        ],
        "responses": {
          "204": {
            "description": "no content"
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/user/otp/sms": {
      "post": {
        "summary": "Enable two factor auth using sms",
        "description": "Enables two factor authentication with sms.",
        "operationId": "enableTfaSms",
        "tags": [
          "TwoFactorAuth"
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Disable two factor authentication",
        "description": "Disables two factor authentication.",
        "operationId": "disableTfaSms",
        "tags": [
          "TwoFactorAuth"
        ],
        "responses": {
          "204": {
            "description": "no content"
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/devices/{id}/traffic": {
      "get": {
        "summary": "Retrieve device traffic",
        "description": "Returns traffic for a specific device.",
        "operationId": "findTraffic",
        "tags": [
          "Devices"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Device UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "direction",
            "in": "query",
            "description": "Traffic direction",
            "required": true,
            "type": "string",
            "enum": [
              "inbound",
              "outbound"
            ]
          },
          {
            "name": "timeframe",
            "in": "body",
            "description": "Traffic timeframe",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Timeframe"
            }
          },
          {
            "name": "interval",
            "in": "query",
            "description": "Traffic interval",
            "required": false,
            "type": "string",
            "enum": [
              "minute",
              "hour",
              "day",
              "week",
              "month",
              "year",
              "hour_of_day",
              "day_of_week",
              "day_of_month",
              "month_of_year"
            ]
          },
          {
            "name": "bucket",
            "in": "query",
            "description": "Traffic bucket",
            "required": false,
            "type": "string",
            "enum": [
              "internal",
              "external"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/organizations/{id}/transfers": {
      "get": {
        "summary": "Retrieve all project transfer requests from or to an organization",
        "description": "Provides a collection of project transfer requests from or to the organization.",
        "operationId": "findOrganizationTransfers",
        "tags": [
          "Organizations",
          "TransferRequests"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Organization UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/TransferRequestList"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/projects/{id}/transfers": {
      "post": {
        "summary": "Create a transfer request",
        "description": "Organization owners can transfer their projects to other organizations.",
        "operationId": "createTransferRequest",
        "tags": [
          "Projects",
          "TransferRequests"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "UUID of the project to be transferred",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "transfer_request",
            "in": "body",
            "description": "Transfer Request to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TransferRequestInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "$ref": "#/definitions/TransferRequest"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "unprocessable entity",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/transfers/{id}": {
      "get": {
        "summary": "View a transfer request",
        "description": "Returns a single transfer request.",
        "operationId": "findTransferRequestById",
        "tags": [
          "TransferRequests"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Transfer request UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/TransferRequest"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "summary": "Accept a transfer request",
        "description": "Accept a transfer request.",
        "operationId": "acceptTransferRequest",
        "tags": [
          "TransferRequests"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Transfer request UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "no content"
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Decline a transfer request",
        "description": "Decline a transfer request.",
        "operationId": "declineTransferRequest",
        "tags": [
          "TransferRequests"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Transfer request UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "no content"
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/devices/{id}/usages": {
      "get": {
        "summary": "Retrieve all usages for device",
        "description": "Returns all usages for a device.",
        "operationId": "findDeviceUsages",
        "tags": [
          "Devices",
          "Usages"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Device UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "created[after]",
            "in": "query",
            "description": "Filter usages created after this date",
            "required": false,
            "type": "string",
            "format": "datetime"
          },
          {
            "name": "created[before]",
            "in": "query",
            "description": "Filter usages created before this date",
            "required": false,
            "type": "string",
            "format": "datetime"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/DeviceUsageList"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/projects/{id}/usages": {
      "get": {
        "summary": "Retrieve all usages for project",
        "description": "Returns all usages for a project.",
        "operationId": "findProjectUsage",
        "tags": [
          "Devices",
          "Usages"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Project UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "created[after]",
            "in": "query",
            "description": "Filter usages created after this date",
            "required": false,
            "type": "string",
            "format": "datetime"
          },
          {
            "name": "created[before]",
            "in": "query",
            "description": "Filter usages created before this date",
            "required": false,
            "type": "string",
            "format": "datetime"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/ProjectUsageList"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/userdata/validate": {
      "post": {
        "summary": "Validate user data",
        "description": "Validates user data (Userdata)",
        "operationId": "validateUserdata",
        "tags": [
          "Userdata"
        ],
        "parameters": [
          {
            "name": "userdata",
            "in": "query",
            "description": "Userdata to validate",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "no content"
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "unprocessable entity",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "summary": "Retrieve all users",
        "description": "Returns a list of users that the are accessible to the current user (all users in the current user’s projects, essentially).",
        "operationId": "findUsers",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page to return",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "minimum": 1,
            "maximum": 100000,
            "required": false
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Items returned per page",
            "type": "integer",
            "format": "int32",
            "default": 10,
            "minimum": 1,
            "maximum": 1000,
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/UserList"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Create a user",
        "description": "Creates a user.",
        "operationId": "createUser",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "description": "User to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserCreateInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "unprocessable entity",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "summary": "Retrieve a user",
        "description": "Returns a single user if the user has access",
        "operationId": "findUserById",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/user": {
      "get": {
        "summary": "Retrieve the current user",
        "description": "Returns the user object for the currently logged-in user.",
        "operationId": "findCurrentUser",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "summary": "Update the current user",
        "description": "Updates the currently logged-in user.",
        "operationId": "updateCurrentUser",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "description": "User to update",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserUpdateInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "unprocessable entity",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/verify-email": {
      "post": {
        "summary": "Create an email verification request",
        "description": "Creates an email verification request",
        "operationId": "createValidationRequest",
        "tags": [
          "UserVerificationTokens"
        ],
        "parameters": [
          {
            "name": "login",
            "in": "query",
            "description": "Email for verification request",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "created"
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "unprocessable entity",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "summary": "Verify a user using an email verification token",
        "description": "Consumes an email verification token and verifies the user associated with it.",
        "operationId": "consumeVerificationRequest",
        "tags": [
          "UserVerificationTokens"
        ],
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "User verification token",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/projects/{id}/virtual-networks": {
      "get": {
        "summary": "Retrieve all virtual networks",
        "description": "Provides a list of virtual networks for a single project.",
        "operationId": "findVirtualNetworks",
        "tags": [
          "Projects",
          "VLANs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Project UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "facility",
            "in": "query",
            "description": "Filter by Facility ID (uuid) or Facility Code",
            "required": false,
            "type": "string"
          },
          {
            "name": "metro",
            "in": "query",
            "description": "Filter by Metro ID (uuid) or Metro Code",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/VirtualNetworkList"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Projects",
          "VLANs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Project UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "virtual_network",
            "in": "body",
            "description": "Virtual Network to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VirtualNetworkCreateInput"
            }
          }
        ],
        "summary": "Create a virtual network",
        "description": "Creates an virtual network.",
        "operationId": "createVirtualNetwork",
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "$ref": "#/definitions/VirtualNetwork"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "unprocessable entity",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/virtual-networks/{id}": {
      "get": {
        "summary": "Get a virtual network",
        "description": "Get a virtual network.",
        "operationId": "getVirtualNetwork",
        "tags": [
          "VLANs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Virtual Network UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/VirtualNetwork"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "unprocessable entity",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a virtual network",
        "description": "Deletes a virtual network.",
        "operationId": "deleteVirtualNetwork",
        "tags": [
          "VLANs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Virtual Network UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/VirtualNetwork"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "unprocessable entity",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/ports/{id}/vlan-assignments/batches": {
      "post": {
        "summary": "Create a new Port-VLAN Assignment management batch",
        "description": "Create a new asynchronous batch request which handles adding and/or removing the VLANs to which the port is assigned.",
        "operationId": "createPortVlanAssignmentBatch",
        "tags": [
          "Ports",
          "VLANs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Port UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "vlan_assignments",
            "in": "body",
            "description": "VLAN Assignment batch details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PortVlanAssignmentBatchCreateInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "$ref": "#/definitions/PortVlanAssignmentBatch"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "unprocessable entity",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "get": {
        "summary": "List the VLAN Assignment Batches for a port",
        "description": "Show all the VLAN assignment batches that have been created for managing this port's VLAN assignments",
        "operationId": "findPortVlanAssignmentBatches",
        "tags": [
          "Ports",
          "VLANs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Port UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/PortVlanAssignmentBatchList"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/ports/{id}/vlan-assignments/batches/{batch_id}": {
      "get": {
        "summary": "Retrieve a VLAN Assignment Batch's details",
        "description": "Returns the details of an existing Port-VLAN Assignment batch, including the list of VLANs to assign or unassign, and the current state of the batch.",
        "operationId": "findPortVlanAssignmentBatchByPortIdAndBatchId",
        "tags": [
          "Ports",
          "VLANs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Port UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "batch_id",
            "in": "path",
            "description": "Batch ID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/PortVlanAssignmentBatch"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/ports/{id}/vlan-assignments": {
      "get": {
        "summary": "List Current VLAN assignments for a port",
        "description": "Show the port's current VLAN assignments, including if this VLAN is set as native, and the current state of the assignment (ex. 'assigned' or 'unassigning')",
        "operationId": "findPortVlanAssignments",
        "tags": [
          "Ports",
          "VLANs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Port UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "default": [
              "port",
              "virtual_network"
            ],
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/PortVlanAssignmentList"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/ports/{id}/vlan-assignments/{assignment_id}": {
      "get": {
        "summary": "Show a particular Port VLAN assignment's details",
        "description": "Show the details of a specific Port-VLAN assignment, including the current state and if the VLAN is set as native.",
        "operationId": "findPortVlanAssignmentByPortIdAndAssignmentId",
        "tags": [
          "Ports",
          "VLANs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Port UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "assignment_id",
            "in": "path",
            "description": "Assignment ID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "default": [
              "port",
              "virtual_network"
            ],
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/PortVlanAssignment"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/projects/{project_id}/metal-gateways": {
      "post": {
        "summary": "Create a metal gateway",
        "description": "Create a metal gateway in a project",
        "operationId": "createMetalGateway",
        "tags": [
          "MetalGateways"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "description": "Project UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page to return",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "minimum": 1,
            "maximum": 100000,
            "required": false
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Items returned per page",
            "type": "integer",
            "format": "int32",
            "default": 10,
            "minimum": 1,
            "maximum": 1000,
            "required": false
          },
          {
            "name": "metal_gateway",
            "in": "body",
            "description": "Metal Gateway to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MetalGatewayInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "$ref": "#/definitions/MetalGateway"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "unprocessable entity",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "get": {
        "summary": "Returns all metal gateways for a project",
        "description": "Return all metal gateways for a project",
        "operationId": "findMetalGatewaysByProject",
        "tags": [
          "MetalGateways"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "description": "Project UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page to return",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "minimum": 1,
            "maximum": 100000,
            "required": false
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Items returned per page",
            "type": "integer",
            "format": "int32",
            "default": 10,
            "minimum": 1,
            "maximum": 1000,
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/MetalGatewayList"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/metal-gateways/{id}": {
      "get": {
        "summary": "Returns the metal gateway",
        "description": "Returns a specific metal gateway",
        "operationId": "findMetalGatewayById",
        "tags": [
          "MetalGateways"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Metal Gateway UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/MetalGateway"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Deletes the metal gateway",
        "description": "Deletes a specific metal gateway",
        "operationId": "deleteMetalGateway",
        "tags": [
          "MetalGateways"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Metal Gateway UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "no content"
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/emails": {
      "post": {
        "summary": "Create an email",
        "description": "Add a new email address to the current user.",
        "operationId": "createEmail",
        "tags": [
          "Emails"
        ],
        "parameters": [
          {
            "name": "email",
            "in": "body",
            "description": "Email to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateEmailInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "$ref": "#/definitions/Email"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "unprocessable entity",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/emails/{id}": {
      "get": {
        "summary": "Retrieve an email",
        "description": "Provides one of the user’s emails.",
        "operationId": "findEmailById",
        "tags": [
          "Emails"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Email UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/Email"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "summary": "Update the email",
        "description": "Updates the email.",
        "operationId": "updateEmail",
        "tags": [
          "Emails"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Email UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "email",
            "in": "body",
            "description": "email to update",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateEmailInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/Email"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "unprocessable entity",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete the email",
        "description": "Deletes the email.",
        "operationId": "deleteEmail",
        "tags": [
          "Emails"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Email UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "no content"
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Address": {
      "required": [
        "address",
        "zip_code",
        "country"
      ],
      "properties": {
        "address": {
          "type": "string"
        },
        "address2": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "zip_code": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "coordinates": {
          "$ref": "#/definitions/Coordinates"
        }
      }
    },
    "Coordinates": {
      "properties": {
        "latitude": {
          "type": "string"
        },
        "longitude": {
          "type": "string"
        }
      }
    },
    "AuthToken": {
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "token": {
          "type": "string"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "description": {
          "type": "string",
          "description": "Available only for API keys"
        },
        "read_only": {
          "type": "boolean"
        },
        "user": {
          "allOf": [
            {
              "$ref": "#/definitions/User"
            },
            {
              "description": "Available only for user tokens"
            }
          ]
        },
        "project": {
          "allOf": [
            {
              "$ref": "#/definitions/Project"
            },
            {
              "description": "Available only for project tokens"
            }
          ]
        }
      }
    },
    "AuthTokenInput": {
      "properties": {
        "description": {
          "type": "string"
        },
        "read_only": {
          "type": "boolean"
        }
      }
    },
    "AuthTokenList": {
      "properties": {
        "api_keys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AuthToken"
          }
        }
      }
    },
    "Batch": {
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "error_messages": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "quantity": {
          "type": "integer"
        },
        "state": {
          "type": "string"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "devices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Href"
          }
        },
        "project": {
          "$ref": "#/definitions/Href"
        }
      }
    },
    "BatchesList": {
      "properties": {
        "batches": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Batch"
          }
        }
      }
    },
    "InstancesBatchCreateInput": {
      "properties": {
        "batches": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "plan": {
                "type": "string"
              },
              "hostname": {
                "type": "string"
              },
              "hostnames": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "facility": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Array of facility codes the batch can use for provisioning. This param also takes a string if you want the batch to be fulfilled in only one facility. Cannot be set if the metro is already set."
              },
              "metro": {
                "type": "string",
                "description": "The metro ID or code the batch can use for provisioning. Cannot be set if the facility is already set."
              },
              "description": {
                "type": "string"
              },
              "billing_cycle": {
                "type": "string"
              },
              "operating_system": {
                "type": "string"
              },
              "always_pxe": {
                "type": "boolean"
              },
              "userdata": {
                "type": "string"
              },
              "locked": {
                "type": "boolean"
              },
              "termination_time": {
                "type": "string",
                "format": "date-time"
              },
              "tags": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "project_ssh_keys": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              },
              "user_ssh_keys": {
                "type": "array",
                "description": "The UUIDs of users whose SSH keys should be included on the provisioned device.",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              },
              "no_ssh_keys": {
                "type": "boolean"
              },
              "features": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "customdata": {
                "type": "object"
              },
              "ip_addresses": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "address_family": {
                      "type": "number",
                      "format": "integer",
                      "description": "Address Family for IP Address",
                      "enum": [
                        4,
                        6
                      ],
                      "example": 4
                    },
                    "public": {
                      "type": "boolean",
                      "description": "Address Type for IP Address",
                      "example": false,
                      "default": true
                    },
                    "cidr": {
                      "type": "number",
                      "format": "integer",
                      "description": "Cidr Size for the IP Block created. Valid values depends on the operating system been provisioned (28..32 for IPv4 addresses, 124..127 for IPv6 addresses).",
                      "example": 28
                    },
                    "ip_reservations": {
                      "type": "array",
                      "description": "UUIDs of any IP reservations to use when assigning IPs",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "EmailInput": {
      "required": [
        "address"
      ],
      "properties": {
        "address": {
          "type": "string"
        },
        "default": {
          "type": "boolean"
        }
      }
    },
    "Entitlement": {
      "required": [
        "id",
        "slug",
        "weight"
      ],
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "description": {
          "type": "string"
        },
        "slug": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "weight": {
          "type": "integer"
        },
        "instance_quota": {
          "type": "object"
        },
        "project_quota": {
          "type": "integer",
          "default": 0
        },
        "volume_quota": {
          "type": "object"
        },
        "ip_quota": {
          "type": "object"
        },
        "feature_access": {
          "type": "object"
        },
        "href": {
          "type": "string"
        },
        "volume_limits": {
          "type": "object"
        }
      }
    },
    "Event": {
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "state": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "body": {
          "type": "string"
        },
        "relationships": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Href"
          }
        },
        "interpolated": {
          "type": "string"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "href": {
          "type": "string"
        }
      }
    },
    "EventList": {
      "properties": {
        "events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Event"
          }
        },
        "meta": {
          "$ref": "#/definitions/Meta"
        }
      }
    },
    "Facility": {
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "features": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "baremetal",
              "backend_transfer",
              "layer_2",
              "global_ipv4",
              "ibx"
            ]
          },
          "example": [
            "baremetal",
            "backend_transfer",
            "global_ipv4"
          ]
        },
        "ip_ranges": {
          "type": "array",
          "description": "IP ranges registered in facility. Can be used for GeoIP location",
          "items": {
            "type": "string"
          },
          "example": [
            "2604:1380::/36",
            "147.75.192.0/21"
          ]
        },
        "address": {
          "$ref": "#/definitions/Address"
        },
        "metro": {
          "allOf": [
            {
              "$ref": "#/definitions/Metro"
            },
            {
              "description": "The metro the facility is in"
            }
          ]
        }
      }
    },
    "FacilityList": {
      "properties": {
        "facilities": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Facility"
          }
        }
      }
    },
    "HardwareReservation": {
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "short_id": {
          "type": "string",
          "format": "string",
          "description": "Short version of the ID."
        },
        "facility": {
          "$ref": "#/definitions/Facility"
        },
        "plan": {
          "$ref": "#/definitions/Plan"
        },
        "href": {
          "type": "string"
        },
        "project": {
          "$ref": "#/definitions/Project"
        },
        "device": {
          "$ref": "#/definitions/Device"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "spare": {
          "type": "boolean",
          "description": "Whether the Hardware Reservation is a spare. Spare Hardware Reservations are used when a Hardware Reservations requires service from Metal Equinix"
        },
        "need_of_service": {
          "type": "boolean",
          "description": "Whether this Device requires assistance from Metal Equinix."
        },
        "provisionable": {
          "type": "boolean",
          "description": "Whether the reserved server is provisionable or not. Spare devices can't be provisioned unless they are activated first."
        },
        "custom_rate": {
          "type": "number",
          "format": "float",
          "description": "Amount that will be charged for every billing_cycle.",
          "example": 1050.5
        },
        "switch_uuid": {
          "type": "string",
          "description": "Switch short id. This can be used to determine if two devices are connected to the same switch, for example."
        }
      }
    },
    "HardwareReservationList": {
      "properties": {
        "hardware_reservations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/HardwareReservation"
          }
        },
        "meta": {
          "$ref": "#/definitions/Meta"
        }
      }
    },
    "Device": {
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "short_id": {
          "type": "string"
        },
        "hostname": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "image_url": {
          "type": "string"
        },
        "billing_cycle": {
          "type": "string"
        },
        "user": {
          "type": "string"
        },
        "iqn": {
          "type": "string"
        },
        "locked": {
          "type": "boolean"
        },
        "bonding_mode": {
          "type": "integer"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "spot_instance": {
          "type": "boolean",
          "description": "Whether or not the device is a spot instance."
        },
        "spot_price_max": {
          "type": "number",
          "format": "float",
          "description": "The maximum price per hour you are willing to pay to keep this spot instance.  If you are outbid, the termination will be set allowing two minutes before shutdown."
        },
        "termination_time": {
          "type": "string",
          "format": "date-time",
          "description": "When the device will be terminated. This is commonly set in advance for ephemeral spot market instances but this field may also be set with on-demand and reservation instances to automatically delete the resource at a given time. The termination time can also be used to release a hardware reservation instance at a given time, keeping the reservation open for other uses.  On a spot market device, the termination time will be set automatically when outbid."
        },
        "customdata": {
          "type": "object"
        },
        "provisioning_percentage": {
          "type": "number",
          "format": "float",
          "description": "Only visible while device provisioning"
        },
        "operating_system": {
          "$ref": "#/definitions/OperatingSystem"
        },
        "always_pxe": {
          "type": "boolean"
        },
        "ipxe_script_url": {
          "type": "string"
        },
        "facility": {
          "$ref": "#/definitions/Facility"
        },
        "metro": {
          "allOf": [
            {
              "$ref": "#/definitions/Metro"
            },
            {
              "description": "The metro the facility is in"
            }
          ]
        },
        "plan": {
          "$ref": "#/definitions/Plan"
        },
        "userdata": {
          "type": "string"
        },
        "root_password": {
          "type": "string",
          "description": "Root password is automatically generated when server is provisioned and it is removed after 24 hours"
        },
        "switch_uuid": {
          "type": "string",
          "description": "Switch short id. This can be used to determine if two devices are connected to the same switch, for example."
        },
        "network_ports": {
          "allOf": [
            {
              "$ref": "#/definitions/Port"
            },
            {
              "description": "By default, servers at Equinix Metal are configured in a “bonded” mode using LACP (Link Aggregation Control Protocol). Each 2-NIC server is configured with a single bond (namely bond0) with both interfaces eth0 and eth1 as members of the bond in a default Layer 3 mode. Some device plans may have a different number of ports and bonds available."
            }
          ]
        },
        "href": {
          "type": "string"
        },
        "project": {
          "allOf": [
            {
              "$ref": "#/definitions/Href"
            },
            {
              "description": "Full version of project object when included"
            }
          ]
        },
        "project_lite": {
          "allOf": [
            {
              "$ref": "#/definitions/Href"
            },
            {
              "description": "Lite version of project object when included"
            }
          ]
        },
        "volumes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Href"
          }
        },
        "hardware_reservation": {
          "$ref": "#/definitions/Href"
        },
        "ssh_keys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Href"
          }
        },
        "ip_addresses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IPAssignment"
          }
        },
        "provisioning_events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Event"
          }
        }
      }
    },
    "DeviceCreateInput": {
      "required": [
        "facility",
        "plan",
        "operating_system"
      ],
      "properties": {
        "facility": {
          "description": "The datacenter where the device should be created.\n\nThe API will accept either a single facility `{ \"facility\": \"f1\" }`, or it can be instructed to create the device in the best available datacenter `{ \"facility\": \"any\" }`.\n\nAdditionally it is possible to set a prioritized location selection. For example `{ \"facility\": [\"f3\", \"f2\", \"any\"] }` can be used to prioritize `f3` and then `f2` before accepting `any` facility. If none of the facilities provided have availability for the requested device the request will fail.",
          "type": "string"
        },
        "plan": {
          "description": "The slug of the device plan to provision.",
          "type": "string"
        },
        "hostname": {
          "description": "The hostname to use within the operating system. The same hostname may be used on multiple devices within a project.",
          "type": "string"
        },
        "description": {
          "description": "Any description of the device or how it will be used. This may be used to inform other API consumers with project access.",
          "type": "string"
        },
        "billing_cycle": {
          "description": "The billing cycle of the device.",
          "type": "string",
          "enum": [
            "hourly",
            "daily",
            "monthly",
            "yearly"
          ]
        },
        "operating_system": {
          "description": "The slug of the operating system to provision. Check the Equinix Metal operating system documentation for rules that may be imposed per operating system, including restrictions on IP address options and device plans.",
          "type": "string"
        },
        "always_pxe": {
          "description": "When true, devices with a `custom_ipxe` OS will always boot to iPXE. The default setting of false ensures that iPXE will be used on only the first boot.",
          "type": "boolean",
          "default": false
        },
        "ipxe_script_url": {
          "description": "When set, the device will chainload an iPXE Script at boot fetched from the supplied URL.\n\n      See [Custom iPXE](https://metal.equinix.com/developers/docs/operating-systems/custom-ipxe/) for more details.",
          "type": "string"
        },
        "userdata": {
          "description": "The userdata presented in the metadata service for this device.  Userdata is fetched and interpretted by the operating system installed on the device. Acceptable formats are determined by the operating system, with the exception of a special iPXE enabling syntax which is handled before the operating system starts.\n\n      See [Server User Data](https://metal.equinix.com/developers/docs/servers/user-data/) and [Provisioning with Custom iPXE](https://metal.equinix.com/developers/docs/operating-systems/custom-ipxe/#provisioning-with-custom-ipxe) for more details.",
          "type": "string"
        },
        "locked": {
          "description": "Whether the device should be locked, preventing accidental deletion.",
          "type": "boolean",
          "default": false
        },
        "customdata": {
          "description": "Customdata is an arbitrary JSON value that can be accessed via the metadata service.",
          "type": "object"
        },
        "metro": {
          "type": "string",
          "description": "Metro code or ID of where the instance should be provisioned in."
        },
        "hardware_reservation_id": {
          "description": "The Hardware Reservation UUID to provision. Alternatively, `next-available` can be specified to select from any of the available hardware reservations. An error will be returned if the requested reservation option is not available.\n\n      See [Reserved Hardware](https://metal.equinix.com/developers/docs/deploy/reserved/) for more details.",
          "type": "string",
          "example": "next-available",
          "default": ""
        },
        "spot_instance": {
          "type": "boolean"
        },
        "spot_price_max": {
          "type": "number",
          "format": "float"
        },
        "termination_time": {
          "type": "string",
          "format": "date-time"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "project_ssh_keys": {
          "type": "array",
          "description": "A list of UUIDs identifying the device parent project\nthat should be authorized to access this device (typically\nvia /root/.ssh/authorized_keys). These keys will also appear in the device metadata.\n\nIf no SSH keys are specified (`user_ssh_keys`, `project_ssh_keys`, and `ssh_keys` are all empty lists or omitted),\nall parent project keys, parent project members keys and organization members keys will be included. This behaviour can\nbe changed with 'no_ssh_keys' option to omit any SSH key being added.\n\n",
          "x-nullable": true,
          "default": null,
          "items": {
            "type": "string",
            "format": "uuid"
          }
        },
        "user_ssh_keys": {
          "type": "array",
          "description": "A list of UUIDs identifying the users\nthat should be authorized to access this device (typically\nvia /root/.ssh/authorized_keys).  These keys will also\nappear in the device metadata.\n\nThe users must be members of the project or organization.\n\nIf no SSH keys are specified (`user_ssh_keys`, `project_ssh_keys`, and `ssh_keys` are all empty lists or omitted),\nall parent project keys, parent project members keys and organization members keys will be included. This behaviour can\nbe changed with 'no_ssh_keys' option to omit any SSH key being added.\n",
          "x-nullable": true,
          "default": null,
          "items": {
            "type": "string",
            "format": "uuid"
          }
        },
        "ssh_keys": {
          "type": "array",
          "description": "A list of new or existing project ssh_keys\nthat should be authorized to access this device (typically\nvia /root/.ssh/authorized_keys). These keys will also\nappear in the device metadata.\n\nThese keys are added in addition to any keys defined by\n  `project_ssh_keys` and `user_ssh_keys`.\n",
          "x-nullable": true,
          "default": null,
          "items": {
            "$ref": "#/definitions/SSHKeyInput"
          }
        },
        "no_ssh_keys": {
          "type": "boolean",
          "description": "Overrides default behaviour of attaching all of the organization members ssh keys and project ssh keys to device if no specific keys specified",
          "x-nullable": true,
          "default": false
        },
        "features": {
          "description": "The features attribute allows you to optionally specify what features your server should have.\n\nIn the API shorthand syntax, all features listed are `required`:\n\n```\n{ \"features\": [\"tpm\"] }\n```\n\nAlternatively, if you do not require a certain feature, but would prefer to be assigned a server with that feature if there are any available, you may specify that feature with a `preferred` value. The request will not fail if we have no servers with that feature in our inventory. The API offers an alternative syntax for mixing preferred and required features:\n\n```\n{ \"features\": { \"tpm\": \"required\", \"raid\": \"preferred\" } }\n```\n\nThe request will only fail if there are no available servers matching the required `tpm` criteria.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "public_ipv4_subnet_size": {
          "type": "number",
          "format": "integer",
          "description": "Deprecated. Use ip_addresses. Subnet range for addresses allocated to this device. Your project must have addresses available for a non-default request.",
          "default": 31,
          "x-deprecated": true
        },
        "private_ipv4_subnet_size": {
          "type": "number",
          "format": "integer",
          "description": "Deprecated. Use ip_addresses. Subnet range for addresses allocated to this device.",
          "default": 28,
          "x-deprecated": true
        },
        "ip_addresses": {
          "description": "The `ip_addresses attribute will allow you to specify the addresses you want created with your device.\n\nThe default value configures public IPv4, public IPv6, and private IPv4.\n\nPrivate IPv4 address is required. When specifying `ip_addresses`, one of the array items must enable private IPv4.\n\nSome operating systems require public IPv4 address. In those cases you will receive an error message if public IPv4 is not enabled.\n\nFor example, to only configure your server with a private IPv4 address, you can send `{ \"ip_addresses\": [{ \"address_family\": 4, \"public\": false }] }`.\n\nIt is possible to request a subnet size larger than a `/30` by assigning addresses using the UUID(s) of ip_reservations in your project.\n\nFor example, `{ \"ip_addresses\": [..., {\"address_family\": 4, \"public\": true, \"ip_reservations\": [\"uuid1\", \"uuid2\"]}] }`\n\nTo access a server without public IPs, you can use our Out-of-Band console access (SOS) or proxy through another server in the project with public IPs enabled.",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "address_family": {
                "type": "number",
                "format": "integer",
                "description": "Address Family for IP Address",
                "example": 4,
                "enum": [
                  4,
                  6
                ]
              },
              "public": {
                "type": "boolean",
                "description": "Address Type for IP Address",
                "example": false,
                "default": true
              },
              "cidr": {
                "type": "number",
                "format": "integer",
                "description": "Cidr Size for the IP Block created. Valid values depends on the operating system being provisioned. (28..32 for IPv4 addresses, 124..127 for IPv6 addresses)",
                "example": 28
              },
              "ip_reservations": {
                "type": "array",
                "description": "UUIDs of any IP reservations to use when assigning IPs",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "default": [
            {
              "address_family": 4,
              "public": true
            },
            {
              "address_family": 4,
              "public": false
            },
            {
              "address_family": 6,
              "public": true
            }
          ]
        }
      }
    },
    "DeviceUpdateInput": {
      "properties": {
        "hostname": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "billing_cycle": {
          "type": "string"
        },
        "userdata": {
          "type": "string"
        },
        "locked": {
          "type": "boolean"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "always_pxe": {
          "type": "boolean"
        },
        "ipxe_script_url": {
          "type": "string"
        },
        "spot_instance": {
          "type": "boolean"
        },
        "customdata": {
          "type": "object"
        },
        "network_frozen": {
          "type": "boolean",
          "description": "If true, this instance can not be converted to a different network type."
        }
      }
    },
    "DeviceList": {
      "properties": {
        "devices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Device"
          }
        },
        "meta": {
          "$ref": "#/definitions/Meta"
        }
      }
    },
    "Interconnection": {
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "contact_email": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "redundancy": {
          "type": "string"
        },
        "speed": {
          "type": "integer",
          "description": "The connection's speed in bps."
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ports": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InterconnectionPort"
          }
        },
        "facility": {
          "$ref": "#/definitions/Href"
        },
        "organization": {
          "$ref": "#/definitions/Href"
        },
        "metro": {
          "allOf": [
            {
              "$ref": "#/definitions/Metro"
            },
            {
              "description": "Details of the metro the facility is in"
            }
          ]
        },
        "mode": {
          "type": "string",
          "description": "The mode of the connection (only relevant to dedicated connections). Shared connections won't have this field. Can be either 'standard' or 'tunnel'.\n  The default mode of a dedicated connection is 'standard'. The mode can only be changed when there are no associated virtual circuits on the connection.\n  In tunnel mode, an 802.1q tunnel is added to a port to send/receive double tagged packets from server instances.",
          "enum": [
            "standard",
            "tunnel"
          ],
          "example": "standard"
        }
      }
    },
    "InterconnectionList": {
      "properties": {
        "interconnections": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Interconnection"
          }
        }
      }
    },
    "InterconnectionCreateInput": {
      "required": [
        "name",
        "facility",
        "type",
        "redundancy"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "facility": {
          "type": "string",
          "description": "A Facility ID or code."
        },
        "metro": {
          "type": "string",
          "description": "A Metro ID or code. Required for creating a connection, unless creating with facility."
        },
        "type": {
          "type": "string",
          "description": "Either 'shared' or 'dedicated'."
        },
        "redundancy": {
          "type": "string",
          "description": "Either 'primary' or 'redundant'."
        },
        "contact_email": {
          "type": "string"
        },
        "project": {
          "type": "string"
        },
        "speed": {
          "type": "string",
          "description": "A connection speed, in bps, mbps, or gbps. Ex: '100000000' or '100 mbps'."
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "mode": {
          "type": "string",
          "description": "The mode of the connection (only relevant to dedicated connections). Shared connections won't have this field. Can be either 'standard' or 'tunnel'.\n  The default mode of a dedicated connection is 'standard'. The mode can only be changed when there are no associated virtual circuits on the connection.\n  In tunnel mode, an 802.1q tunnel is added to a port to send/receive double tagged packets from server instances.",
          "enum": [
            "standard",
            "tunnel"
          ],
          "example": "standard"
        }
      }
    },
    "InterconnectionUpdateInput": {
      "properties": {
        "name": {
          "type": "string"
        },
        "redundancy": {
          "type": "string",
          "description": "Updating from 'redundant' to 'primary' will remove a secondary port, while updating from 'primary' to 'redundant' will add one."
        },
        "description": {
          "type": "string"
        },
        "contact_email": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "mode": {
          "type": "string",
          "description": "The mode of the connection (only relevant to dedicated connections). Shared connections won't have this field. Can be either 'standard' or 'tunnel'.\n  The default mode of a dedicated connection is 'standard'. The mode can only be changed when there are no associated virtual circuits on the connection.\n  In tunnel mode, an 802.1q tunnel is added to a port to send/receive double tagged packets from server instances.",
          "enum": [
            "standard",
            "tunnel"
          ],
          "example": "standard"
        }
      }
    },
    "InterconnectionPort": {
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "role": {
          "type": "string",
          "description": "Either 'primary' or 'secondary'."
        },
        "status": {
          "type": "string"
        },
        "switch_id": {
          "type": "string",
          "description": "A switch 'short ID'"
        },
        "virtual_circuits": {
          "$ref": "#/definitions/VirtualCircuitList"
        },
        "organization": {
          "$ref": "#/definitions/Href"
        }
      }
    },
    "InterconnectionPortList": {
      "properties": {
        "ports": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InterconnectionPort"
          }
        }
      }
    },
    "VirtualCircuit": {
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "vnid": {
          "type": "integer"
        },
        "nni_vlan": {
          "type": "integer"
        },
        "speed": {
          "type": "integer",
          "description": "integer representing bps speed"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "project": {
          "$ref": "#/definitions/Href"
        },
        "virtual_network": {
          "$ref": "#/definitions/Href"
        }
      }
    },
    "VirtualCircuitList": {
      "properties": {
        "virtual_circuits": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VirtualCircuit"
          }
        }
      }
    },
    "VirtualCircuitCreateInput": {
      "properties": {
        "description": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "speed": {
          "type": "integer",
          "description": "speed can be passed as integer number representing bps speed or string (e.g. '52m' or '100g' or '4 gbps')"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "vnid": {
          "type": "string",
          "format": "uuid",
          "description": "A Virtual Network record UUID or the VNID of a Virtual Network in your project (sent as integer)."
        },
        "nni_vlan": {
          "type": "integer",
          "minimum": 2,
          "maximum": 4094
        },
        "project": {
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "VirtualCircuitUpdateInput": {
      "properties": {
        "description": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "speed": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "vnid": {
          "type": "string",
          "description": "A Virtual Network record UUID or the VNID of a Virtual Network in your project."
        }
      }
    },
    "Invitation": {
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "invitee": {
          "type": "string"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "invited_by": {
          "$ref": "#/definitions/Href"
        },
        "organization": {
          "$ref": "#/definitions/Href"
        },
        "projects_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "invitation": {
          "$ref": "#/definitions/Href"
        },
        "href": {
          "type": "string"
        }
      }
    },
    "InvitationList": {
      "properties": {
        "invitations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Membership"
          }
        }
      }
    },
    "InvitationInput": {
      "required": [
        "invitee"
      ],
      "properties": {
        "invitee": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "projects_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "License": {
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "description": {
          "type": "string"
        },
        "license_key": {
          "type": "string"
        },
        "licensee_product": {
          "$ref": "#/definitions/Href"
        },
        "size": {
          "type": "number"
        },
        "project": {
          "$ref": "#/definitions/Href"
        }
      }
    },
    "LicenseCreateInput": {
      "properties": {
        "description": {
          "type": "string"
        },
        "size": {
          "type": "number"
        },
        "licensee_product_id": {
          "type": "string"
        }
      }
    },
    "LicenseUpdateInput": {
      "properties": {
        "description": {
          "type": "string"
        },
        "size": {
          "type": "number"
        }
      }
    },
    "LicenseList": {
      "properties": {
        "licenses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/License"
          }
        }
      }
    },
    "Membership": {
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "project": {
          "$ref": "#/definitions/Href"
        },
        "user": {
          "$ref": "#/definitions/Href"
        },
        "href": {
          "type": "string"
        }
      }
    },
    "MembershipList": {
      "properties": {
        "memberships": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Membership"
          }
        }
      }
    },
    "MembershipInput": {
      "properties": {
        "role": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Metro": {
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "country": {
          "type": "string"
        }
      }
    },
    "MetroList": {
      "properties": {
        "metros": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Metro"
          }
        }
      }
    },
    "BgpConfigRequestInput": {
      "required": [
        "deployment_type",
        "asn"
      ],
      "properties": {
        "deployment_type": {
          "type": "string"
        },
        "asn": {
          "type": "integer"
        },
        "md5": {
          "type": "string"
        },
        "use_case": {
          "type": "string"
        }
      }
    },
    "BgpConfig": {
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "status": {
          "type": "string",
          "description": "Status of the BGP Config. Status \"requested\" is valid only with the \"global\" deployment_type.",
          "enum": [
            "requested",
            "enabled",
            "disabled"
          ]
        },
        "deployment_type": {
          "type": "string",
          "enum": [
            "global",
            "local"
          ],
          "description": "In a Local BGP deployment, a customer uses an internal ASN to control routes within a single Equinix Metal datacenter. This means that the routes are never advertised to the global Internet. Global BGP, on the other hand, requires a customer to have a registered ASN and IP space.\n",
          "example": "local"
        },
        "asn": {
          "type": "integer",
          "format": "int32",
          "description": "Autonomous System Number. ASN is required with Global BGP. With Local BGP the private ASN, 65000, is assigned.",
          "example": 65000
        },
        "route_object": {
          "type": "string",
          "description": "Specifies AS-MACRO (aka AS-SET) to use when building client route filters"
        },
        "md5": {
          "type": "string",
          "description": "(Optional) Password for BGP session in plaintext (not a checksum)",
          "x-nullable": true
        },
        "max_prefix": {
          "type": "integer",
          "description": "The maximum number of route filters allowed per server",
          "default": 10
        },
        "project": {
          "$ref": "#/definitions/Href"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "requested_at": {
          "type": "string",
          "format": "date-time"
        },
        "sessions": {
          "type": "array",
          "description": "The direct connections between neighboring routers that want to exchange routing information.",
          "items": {
            "$ref": "#/definitions/BgpSession"
          }
        },
        "ranges": {
          "type": "array",
          "description": "The IP block ranges associated to the ASN (Populated in Global BGP only)",
          "items": {
            "$ref": "#/definitions/GlobalBgpRange"
          }
        },
        "href": {
          "type": "string"
        }
      }
    },
    "BgpSessionNeighbors": {
      "properties": {
        "bgp_neighbors": {
          "type": "array",
          "description": "A list of BGP session neighbor data",
          "items": {
            "$ref": "#/definitions/BgpNeighborData"
          }
        }
      }
    },
    "BgpNeighborData": {
      "properties": {
        "address_family": {
          "type": "number",
          "format": "integer",
          "description": "Address Family for IP Address. Accepted values are 4 or 6",
          "example": 4
        },
        "customer_as": {
          "type": "number",
          "format": "integer",
          "description": "The customer's ASN. In a local BGP deployment, this will be an internal ASN used to route within the data center. For a global BGP deployment, this will be the your own ASN, configured when you set up BGP for your project.",
          "example": 65000
        },
        "customer_ip": {
          "type": "string",
          "description": "The device's IP address. For an IPv4 BGP session, this is typically the private bond0 address for the device.",
          "example": "10.32.16.1 (IPv4) or 2604:1380:4111:2700::1 (IPv6)"
        },
        "md5_enabled": {
          "type": "boolean",
          "description": "True if an MD5 password is configured for the project."
        },
        "md5_password": {
          "type": "string",
          "description": "The MD5 password configured for the project, if set."
        },
        "multihop": {
          "type": "boolean",
          "description": "True when the BGP session should be configured as multihop."
        },
        "peer_as": {
          "type": "number",
          "format": "integer",
          "description": "The Peer ASN to use when configuring BGP on your device.",
          "example": 65530
        },
        "peer_ips": {
          "type": "array",
          "description": "A list of one or more IP addresses to use for the Peer IP section of your BGP configuration. For non-multihop sessions, this will typically be a single gateway address for the device. For multihop sessions, it will be a list of IPs.",
          "example": [
            "169.254.255.1",
            "169.254.255.2"
          ],
          "items": {
            "type": "string"
          }
        },
        "routes_in": {
          "type": "array",
          "description": "A list of project subnets",
          "items": {
            "properties": {
              "route": {
                "type": "string",
                "description": "A project network",
                "example": "10.32.16.0/31"
              },
              "exact": {
                "type": "boolean"
              }
            }
          }
        },
        "routes_out": {
          "type": "array",
          "description": "A list of outgoing routes. Only populated if the BGP session has default route enabled.",
          "items": {
            "properties": {
              "route": {
                "type": "string",
                "example": "0.0.0.0/0"
              },
              "exact": {
                "type": "boolean"
              }
            }
          }
        }
      }
    },
    "BgpSession": {
      "required": [
        "address_family"
      ],
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "status": {
          "description": " The status of the BGP Session. Multiple status values may be reported when the device is connected to multiple switches, one value per switch. Each status will start with \"unknown\" and progress to \"up\" or \"down\" depending on the connected device. Subsequent \"unknown\" values indicate a problem acquiring status from the switch. ",
          "type": "string",
          "enum": [
            "unknown",
            "up",
            "down"
          ]
        },
        "learned_routes": {
          "type": "array",
          "items": {
            "description": "IPv4 or IPv6 range",
            "type": "string",
            "example": "10.32.16.0/31"
          }
        },
        "address_family": {
          "type": "string",
          "enum": [
            "ipv4",
            "ipv6"
          ]
        },
        "device": {
          "$ref": "#/definitions/Href"
        },
        "href": {
          "type": "string"
        },
        "default_route": {
          "type": "boolean"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "BGPSessionInput": {
      "properties": {
        "address_family": {
          "description": "Address family for BGP session.",
          "type": "string",
          "enum": [
            "ipv4",
            "ipv6"
          ],
          "example": "ipv4"
        },
        "default_route": {
          "description": "Set the default route policy.",
          "type": "boolean",
          "default": false
        }
      }
    },
    "BgpSessionList": {
      "properties": {
        "bgp_sessions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BgpSession"
          }
        }
      }
    },
    "GlobalBgpRange": {
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "address_family": {
          "type": "integer"
        },
        "range": {
          "type": "string"
        },
        "href": {
          "type": "string"
        },
        "project": {
          "$ref": "#/definitions/Href"
        }
      }
    },
    "GlobalBgpRangeList": {
      "properties": {
        "global_bgp_ranges": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GlobalBgpRange"
          }
        }
      }
    },
    "IPAssignment": {
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "address_family": {
          "type": "integer"
        },
        "netmask": {
          "type": "string"
        },
        "public": {
          "type": "boolean"
        },
        "enabled": {
          "type": "boolean"
        },
        "cidr": {
          "type": "integer"
        },
        "management": {
          "type": "boolean"
        },
        "manageable": {
          "type": "boolean"
        },
        "global_ip": {
          "type": "boolean"
        },
        "assigned_to": {
          "$ref": "#/definitions/Href"
        },
        "network": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "gateway": {
          "type": "string"
        },
        "href": {
          "type": "string"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "metro": {
          "allOf": [
            {
              "$ref": "#/definitions/Metro"
            },
            {
              "description": "The metro the IP address is in"
            }
          ]
        },
        "parent_block": {
          "$ref": "#/definitions/ParentBlock"
        }
      }
    },
    "ParentBlock": {
      "properties": {
        "network": {
          "type": "string"
        },
        "netmask": {
          "type": "string"
        },
        "cidr": {
          "type": "integer"
        },
        "href": {
          "type": "string"
        }
      }
    },
    "IPReservation": {
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "address_family": {
          "type": "integer"
        },
        "netmask": {
          "type": "string"
        },
        "public": {
          "type": "boolean"
        },
        "enabled": {
          "type": "boolean"
        },
        "cidr": {
          "type": "integer"
        },
        "management": {
          "type": "boolean"
        },
        "manageable": {
          "type": "boolean"
        },
        "global_ip": {
          "type": "boolean"
        },
        "addon": {
          "type": "boolean"
        },
        "bill": {
          "type": "boolean"
        },
        "assignments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IPAssignment"
          }
        },
        "network": {
          "type": "string"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "facility": {
          "allOf": [
            {
              "$ref": "#/definitions/Facility"
            },
            {
              "description": "The facility the IP reservation is in. If the facility the IP reservation was requested in is in a metro, a metro value will also be set, and the subsequent IP reservation can be used on a metro level. Can be null if requesting an IP reservation in a metro."
            }
          ]
        },
        "href": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "state": {
          "type": "string"
        },
        "metro": {
          "allOf": [
            {
              "$ref": "#/definitions/Metro"
            },
            {
              "description": "The metro the IP reservation is in. As long as the IP reservation has a metro, it can be used on a metro level. Can be null if requesting an IP reservation in a facility that is not in a metro."
            }
          ]
        }
      }
    },
    "IPAssignmentInput": {
      "required": [
        "address"
      ],
      "properties": {
        "address": {
          "type": "string"
        },
        "manageable": {
          "type": "boolean"
        },
        "customdata": {
          "type": "object"
        }
      }
    },
    "IPAssignmentList": {
      "properties": {
        "ip_addresses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IPAssignment"
          }
        }
      }
    },
    "IPReservationList": {
      "properties": {
        "ip_addresses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IPReservation"
          }
        }
      }
    },
    "IPAvailabilitiesList": {
      "properties": {
        "available": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "IPReservationRequestInput": {
      "required": [
        "type",
        "quantity"
      ],
      "properties": {
        "type": {
          "type": "string"
        },
        "quantity": {
          "type": "integer"
        },
        "comments": {
          "type": "string"
        },
        "facility": {
          "type": "string"
        },
        "metro": {
          "type": "string",
          "description": "The code of the metro you are requesting the IP reservation in.",
          "example": "SV"
        },
        "customdata": {
          "type": "object"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "details": {
          "type": "string"
        },
        "fail_on_approval_required": {
          "type": "boolean"
        }
      }
    },
    "VirtualNetwork": {
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "description": {
          "type": "string",
          "format": "uuid"
        },
        "vxlan": {
          "type": "integer"
        },
        "facility": {
          "$ref": "#/definitions/Href"
        },
        "instances": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Href"
          },
          "description": "A list of instances with ports currently associated to this Virtual Network."
        },
        "metro_code": {
          "type": "string",
          "description": "The Metro code of the metro in which this Virtual Network is defined."
        },
        "metro": {
          "$ref": "#/definitions/Href"
        },
        "assigned_to_virtual_circuit": {
          "type": "boolean",
          "description": "True if the virtual network is attached to a virtual circuit. False if not."
        },
        "assigned_to": {
          "$ref": "#/definitions/Href"
        },
        "href": {
          "type": "string"
        }
      }
    },
    "VirtualNetworkCreateInput": {
      "required": [
        "project_id"
      ],
      "properties": {
        "project_id": {
          "type": "string",
          "format": "uuid"
        },
        "description": {
          "type": "string"
        },
        "facility": {
          "type": "string",
          "description": "The UUID (or facility code) for the Facility in which to create this Virtual network."
        },
        "metro": {
          "type": "string",
          "description": "The UUID (or metro code) for the Metro in which to create this Virtual Network."
        },
        "vxlan": {
          "type": "integer",
          "description": "VLAN ID between 2-3999. Must be unique for the project within the Metro in which this Virtual Network is being created. If no value is specified, the next-available VLAN ID in the range 1000-1999 will be automatically selected.",
          "example": 1099
        }
      }
    },
    "VirtualNetworkList": {
      "properties": {
        "virtual_networks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VirtualNetwork"
          }
        }
      }
    },
    "OperatingSystem": {
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "slug": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "distro": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "preinstallable": {
          "type": "boolean",
          "description": "Servers can be already preinstalled with OS in order to shorten provision time."
        },
        "provisionable_on": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "pricing": {
          "type": "object",
          "description": "This object contains price per time unit and optional multiplier value if licence price depends on hardware plan or components (e.g. number of cores)"
        },
        "licensed": {
          "type": "boolean",
          "description": "Licenced OS is priced according to pricing property"
        }
      }
    },
    "OperatingSystemList": {
      "properties": {
        "operating_systems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OperatingSystem"
          }
        }
      }
    },
    "Organization": {
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "website": {
          "type": "string"
        },
        "twitter": {
          "type": "string"
        },
        "logo": {
          "type": "string",
          "format": "binary"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "projects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Href"
          }
        },
        "members": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Href"
          }
        },
        "memberships": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Href"
          }
        },
        "address": {
          "$ref": "#/definitions/Address"
        },
        "billing_address": {
          "$ref": "#/definitions/Address"
        },
        "entitlement": {
          "$ref": "#/definitions/Entitlement"
        },
        "terms": {
          "type": "integer"
        },
        "credit_amount": {
          "type": "number",
          "format": "float"
        },
        "customdata": {
          "type": "object"
        },
        "enforce_2fa_at": {
          "type": "string",
          "format": "date-time",
          "description": "Force to all members to have enabled the two factor authentication after that date, unless the value is null"
        }
      }
    },
    "OrganizationInput": {
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "website": {
          "type": "string"
        },
        "twitter": {
          "type": "string"
        },
        "logo": {
          "type": "string",
          "format": "binary"
        },
        "address": {
          "$ref": "#/definitions/Address"
        },
        "billing_address": {
          "$ref": "#/definitions/Address"
        },
        "customdata": {
          "type": "object"
        },
        "enforce_2fa_at": {
          "type": "string",
          "format": "date-time",
          "description": "Force to all members to have enabled the two factor authentication after that date, unless the value is null"
        }
      }
    },
    "OrganizationList": {
      "properties": {
        "organizations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Organization"
          }
        },
        "meta": {
          "$ref": "#/definitions/Meta"
        }
      }
    },
    "PaymentMethod": {
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "default": {
          "type": "boolean"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "card_type": {
          "type": "string"
        },
        "expiration_month": {
          "type": "string"
        },
        "expiration_year": {
          "type": "string"
        },
        "cardholder_name": {
          "type": "string"
        },
        "billing_address": {
          "$ref": "#/definitions/PaymentMethodBillingAddress"
        },
        "email": {
          "type": "string"
        },
        "created_by_user": {
          "$ref": "#/definitions/Href"
        },
        "organization": {
          "$ref": "#/definitions/Href"
        },
        "projects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Href"
          }
        }
      }
    },
    "PaymentMethodBillingAddress": {
      "properties": {
        "street_address": {
          "type": "string"
        },
        "postal_code": {
          "type": "string"
        },
        "country_code_alpha2": {
          "type": "string"
        }
      }
    },
    "PaymentMethodCreateInput": {
      "required": [
        "name",
        "nonce"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "default": {
          "type": "boolean"
        }
      }
    },
    "PaymentMethodUpdateInput": {
      "properties": {
        "name": {
          "type": "string"
        },
        "default": {
          "type": "boolean"
        },
        "cardholder_name": {
          "type": "string"
        },
        "expiration_month": {
          "type": "string"
        },
        "expiration_year": {
          "type": "integer"
        },
        "billing_address": {
          "type": "object"
        }
      }
    },
    "PaymentMethodList": {
      "properties": {
        "payment_methods": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PaymentMethod"
          }
        }
      }
    },
    "Plan": {
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "slug": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "line": {
          "type": "string"
        },
        "specs": {
          "type": "object"
        },
        "pricing": {
          "type": "object"
        },
        "legacy": {
          "type": "boolean"
        },
        "class": {
          "type": "string"
        },
        "available_in": {
          "type": "array",
          "description": "Shows which facilities the plan is available in, and the facility-based price if it is different from the default price.",
          "items": {
            "$ref": "#/definitions/Href"
          }
        }
      }
    },
    "PlanList": {
      "properties": {
        "plans": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Plan"
          }
        }
      }
    },
    "Port": {
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "type": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "data": {
          "type": "object"
        },
        "disbond_operation_supported": {
          "type": "boolean",
          "description": "Indicates whether or not the bond can be broken on the port (when applicable)."
        },
        "virtual_networks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Href"
          }
        },
        "href": {
          "type": "string"
        }
      }
    },
    "PortAssignInput": {
      "properties": {
        "vnid": {
          "type": "string",
          "description": "The UUID of the Virtual Network record, or the VLAN value itself (ex: '1001')."
        }
      }
    },
    "PortConvertLayer3Input": {
      "properties": {
        "request_ips": {
          "type": "array",
          "items": {
            "properties": {
              "address_family": {
                "type": "integer"
              },
              "public": {
                "type": "boolean"
              }
            }
          }
        }
      }
    },
    "Project": {
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "type": "string"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "max_devices": {
          "type": "object"
        },
        "members": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Href"
          }
        },
        "memberships": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Href"
          }
        },
        "network_status": {
          "type": "object"
        },
        "invitations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Href"
          }
        },
        "payment_method": {
          "$ref": "#/definitions/Href"
        },
        "devices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Href"
          }
        },
        "ssh_keys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Href"
          }
        },
        "volumes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Href"
          }
        },
        "bgp_config": {
          "$ref": "#/definitions/Href"
        },
        "customdata": {
          "type": "object"
        }
      }
    },
    "ProjectCreateInput": {
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "payment_method_id": {
          "type": "string",
          "format": "uuid"
        },
        "customdata": {
          "type": "object"
        }
      }
    },
    "ProjectCreateFromRootInput": {
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "organization_id": {
          "type": "string",
          "format": "uuid"
        },
        "payment_method_id": {
          "type": "string",
          "format": "uuid"
        },
        "customdata": {
          "type": "object"
        }
      }
    },
    "ProjectUpdateInput": {
      "properties": {
        "name": {
          "type": "string"
        },
        "payment_method_id": {
          "type": "string",
          "format": "uuid"
        },
        "backend_transfer_enabled": {
          "type": "boolean"
        },
        "customdata": {
          "type": "object"
        }
      }
    },
    "ProjectList": {
      "properties": {
        "projects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Project"
          }
        },
        "meta": {
          "$ref": "#/definitions/Meta"
        }
      }
    },
    "CreateSelfServiceReservationRequest": {
      "properties": {
        "start_date": {
          "type": "string",
          "format": "date-time"
        },
        "period": {
          "properties": {
            "unit": {
              "type": "string",
              "enum": [
                "monthly"
              ]
            },
            "count": {
              "type": "number",
              "enum": [
                12,
                36
              ]
            }
          }
        },
        "notes": {
          "type": "string"
        },
        "item": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SelfServiceReservationItemRequest"
          }
        }
      }
    },
    "SelfServiceReservationResponse": {
      "properties": {
        "status": {
          "type": "string"
        },
        "start_date": {
          "type": "string",
          "format": "date-time"
        },
        "period": {
          "properties": {
            "unit": {
              "type": "string",
              "enum": [
                "monthly"
              ]
            },
            "count": {
              "type": "number",
              "enum": [
                12,
                36
              ]
            }
          }
        },
        "total_cost": {
          "type": "integer"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "notes": {
          "type": "string"
        },
        "organization": {
          "type": "string"
        },
        "organization_id": {
          "type": "string",
          "format": "uuid"
        },
        "project": {
          "type": "string"
        },
        "project_id": {
          "type": "string",
          "format": "uuid"
        },
        "item": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SelfServiceReservationItemResponse"
          }
        }
      }
    },
    "SelfServiceReservationList": {
      "properties": {
        "reservations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SelfServiceReservationResponse"
          }
        }
      }
    },
    "SelfServiceReservationItemRequest": {
      "properties": {
        "metro_id": {
          "type": "string",
          "format": "uuid"
        },
        "plan_id": {
          "type": "string",
          "format": "uuid"
        },
        "quantity": {
          "type": "integer"
        },
        "amount": {
          "type": "number",
          "format": "float"
        },
        "term": {
          "type": "string"
        }
      }
    },
    "SelfServiceReservationItemResponse": {
      "properties": {
        "id": {
          "type": "string"
        },
        "metro_id": {
          "type": "string",
          "format": "uuid"
        },
        "metro_code": {
          "type": "string"
        },
        "metro_name": {
          "type": "string"
        },
        "plan_id": {
          "type": "string",
          "format": "uuid"
        },
        "plan_name": {
          "type": "string"
        },
        "plan_slug": {
          "type": "string"
        },
        "quantity": {
          "type": "integer"
        },
        "amount": {
          "type": "number",
          "format": "float"
        },
        "term": {
          "type": "string"
        }
      }
    },
    "SpotMarketRequest": {
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "devices_min": {
          "type": "integer"
        },
        "devices_max": {
          "type": "integer"
        },
        "max_bid_price": {
          "type": "number",
          "format": "float"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "end_at": {
          "type": "string",
          "format": "date-time"
        },
        "href": {
          "type": "string"
        },
        "facilities": {
          "$ref": "#/definitions/Href"
        },
        "metro": {
          "allOf": [
            {
              "$ref": "#/definitions/Metro"
            },
            {
              "description": "The metro the spot market request was created in"
            }
          ]
        },
        "project": {
          "$ref": "#/definitions/Href"
        },
        "instances": {
          "$ref": "#/definitions/Href"
        }
      }
    },
    "SpotMarketRequestList": {
      "properties": {
        "spot_market_requests": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SpotMarketRequest"
          }
        }
      }
    },
    "SpotMarketRequestCreateInput": {
      "properties": {
        "instance_attributes": {
          "type": "object",
          "properties": {
            "plan": {
              "type": "string"
            },
            "hostname": {
              "type": "string"
            },
            "hostnames": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": {
              "type": "string"
            },
            "billing_cycle": {
              "type": "string"
            },
            "operating_system": {
              "type": "string"
            },
            "always_pxe": {
              "type": "boolean"
            },
            "userdata": {
              "type": "string"
            },
            "locked": {
              "type": "boolean"
            },
            "termination_time": {
              "type": "string",
              "format": "date-time"
            },
            "tags": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "project_ssh_keys": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "user_ssh_keys": {
              "type": "array",
              "description": "The UUIDs of users whose SSH keys should be included on the provisioned device.",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "no_ssh_keys": {
              "type": "boolean"
            },
            "features": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "customdata": {
              "type": "object"
            },
            "public_ipv4_subnet_size": {
              "type": "integer"
            },
            "private_ipv4_subnet_size": {
              "type": "integer"
            }
          }
        },
        "devices_min": {
          "type": "integer"
        },
        "devices_max": {
          "type": "integer"
        },
        "max_bid_price": {
          "type": "number",
          "format": "float"
        },
        "end_at": {
          "type": "string",
          "format": "date-time"
        },
        "facilities": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "uuid"
          }
        },
        "metro": {
          "type": "string",
          "description": "The metro ID or code the spot market request will be created in."
        }
      }
    },
    "SSHKey": {
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "label": {
          "type": "string"
        },
        "key": {
          "type": "string"
        },
        "fingerprint": {
          "type": "string"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "entity": {
          "$ref": "#/definitions/Href"
        },
        "href": {
          "type": "string"
        }
      }
    },
    "SSHKeyInput": {
      "properties": {
        "label": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "SSHKeyCreateInput": {
      "properties": {
        "label": {
          "type": "string"
        },
        "key": {
          "type": "string"
        },
        "instances_ids": {
          "type": "array",
          "description": "List of instance UUIDs to associate SSH key with, when empty array is sent all instances belonging\n      to entity will be included",
          "items": {
            "type": "string",
            "format": "uuid"
          }
        }
      }
    },
    "SSHKeyList": {
      "properties": {
        "ssh_keys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SSHKey"
          }
        }
      }
    },
    "VolumeAttachment": {
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "volume": {
          "$ref": "#/definitions/Href"
        },
        "device": {
          "$ref": "#/definitions/Href"
        },
        "href": {
          "type": "string"
        }
      }
    },
    "VolumeAttachmentInput": {
      "required": [
        "device_id"
      ],
      "properties": {
        "device_id": {
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "VolumeAttachmentList": {
      "properties": {
        "attachments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VolumeAttachment"
          }
        }
      }
    },
    "VolumeSnapshot": {
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "status": {
          "type": "string"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        },
        "volume": {
          "$ref": "#/definitions/Href"
        }
      }
    },
    "VolumeSnapshotList": {
      "properties": {
        "snapshots": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VolumeSnapshot"
          }
        }
      }
    },
    "SnapshotPolicy": {
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "snapshot_count": {
          "type": "integer",
          "maximum": 256,
          "exclusiveMaximum": false
        },
        "snapshot_frequency": {
          "type": "string"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "volume": {
          "$ref": "#/definitions/Href"
        },
        "href": {
          "type": "string"
        }
      }
    },
    "SnapshotPolicyInput": {
      "properties": {
        "snapshot_count": {
          "type": "integer"
        },
        "snapshot_frequency": {
          "type": "string"
        }
      }
    },
    "Volume": {
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "size": {
          "type": "integer"
        },
        "locked": {
          "type": "boolean"
        },
        "billing_cycle": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "project": {
          "$ref": "#/definitions/Href"
        },
        "facility": {
          "$ref": "#/definitions/Href"
        },
        "snapshot_policies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Href"
          }
        },
        "attachments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Href"
          }
        },
        "plan": {
          "$ref": "#/definitions/Plan"
        },
        "href": {
          "type": "string"
        },
        "customdata": {
          "type": "object"
        }
      }
    },
    "VolumeCreateInput": {
      "required": [
        "facility",
        "plan",
        "size"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "facility": {
          "type": "string",
          "description": "ams1, ewr1, nrt1, sjc1"
        },
        "plan": {
          "type": "string",
          "description": "storage_1, storage_2"
        },
        "size": {
          "type": "integer"
        },
        "locked": {
          "type": "boolean"
        },
        "billing_cycle": {
          "type": "string",
          "description": "hourly"
        },
        "snapshot_policies": {
          "$ref": "#/definitions/SnapshotPolicyInput"
        },
        "customdata": {
          "type": "object"
        }
      }
    },
    "VolumeUpdateInput": {
      "properties": {
        "description": {
          "type": "string"
        },
        "size": {
          "type": "integer"
        },
        "locked": {
          "type": "boolean"
        },
        "billing_cycle": {
          "type": "string",
          "description": "hourly"
        },
        "customdata": {
          "type": "object"
        }
      }
    },
    "VolumeList": {
      "properties": {
        "volumes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Volume"
          }
        },
        "meta": {
          "$ref": "#/definitions/Meta"
        }
      }
    },
    "SupportRequestInput": {
      "required": [
        "subject",
        "message"
      ],
      "properties": {
        "subject": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "project_id": {
          "type": "string"
        },
        "device_id": {
          "type": "string"
        },
        "priority": {
          "type": "string",
          "enum": [
            "urgent",
            "high",
            "medium",
            "low"
          ]
        }
      }
    },
    "Meta": {
      "properties": {
        "first": {
          "$ref": "#/definitions/Href"
        },
        "previous": {
          "$ref": "#/definitions/Href"
        },
        "self": {
          "$ref": "#/definitions/Href"
        },
        "next": {
          "$ref": "#/definitions/Href"
        },
        "last": {
          "$ref": "#/definitions/Href"
        },
        "total": {
          "type": "integer"
        }
      }
    },
    "Href": {
      "required": [
        "href"
      ],
      "properties": {
        "href": {
          "type": "string"
        }
      }
    },
    "Timeframe": {
      "required": [
        "started_at",
        "ended_at"
      ],
      "properties": {
        "started_at": {
          "type": "string",
          "format": "date-time"
        },
        "ended_at": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "CapacityList": {
      "properties": {
        "capacity": {
          "$ref": "#/definitions/CapacityReport"
        }
      }
    },
    "CapacityReport": {
      "properties": {
        "ams1": {
          "$ref": "#/definitions/CapacityPerFacility"
        },
        "atl1": {
          "$ref": "#/definitions/CapacityPerNewFacility"
        },
        "dfw1": {
          "$ref": "#/definitions/CapacityPerNewFacility"
        },
        "ewr1": {
          "$ref": "#/definitions/CapacityPerFacility"
        },
        "fra1": {
          "$ref": "#/definitions/CapacityPerNewFacility"
        },
        "iad1": {
          "$ref": "#/definitions/CapacityPerNewFacility"
        },
        "lax1": {
          "$ref": "#/definitions/CapacityPerNewFacility"
        },
        "nrt1": {
          "$ref": "#/definitions/CapacityPerFacility"
        },
        "ord1": {
          "$ref": "#/definitions/CapacityPerNewFacility"
        },
        "sea1": {
          "$ref": "#/definitions/CapacityPerNewFacility"
        },
        "sin1": {
          "$ref": "#/definitions/CapacityPerNewFacility"
        },
        "sjc1": {
          "$ref": "#/definitions/CapacityPerFacility"
        },
        "syd1": {
          "$ref": "#/definitions/CapacityPerNewFacility"
        },
        "yyz1": {
          "$ref": "#/definitions/CapacityPerNewFacility"
        }
      }
    },
    "MetroCapacityList": {
      "properties": {
        "capacity": {
          "$ref": "#/definitions/MetroCapacityReport"
        }
      }
    },
    "MetroCapacityReport": {
      "properties": {
        "ny": {
          "$ref": "#/definitions/CapacityPerFacility"
        },
        "sv": {
          "$ref": "#/definitions/CapacityPerFacility"
        },
        "am": {
          "$ref": "#/definitions/CapacityPerFacility"
        },
        "ch": {
          "$ref": "#/definitions/CapacityPerFacility"
        },
        "la": {
          "$ref": "#/definitions/CapacityPerFacility"
        },
        "sg": {
          "$ref": "#/definitions/CapacityPerFacility"
        },
        "da": {
          "$ref": "#/definitions/CapacityPerFacility"
        }
      }
    },
    "CapacityPerFacility": {
      "properties": {
        "baremetal_2a": {
          "$ref": "#/definitions/CapacityLevelPerBaremetal"
        },
        "baremetal_2a2": {
          "$ref": "#/definitions/CapacityLevelPerBaremetal"
        },
        "baremetal_1": {
          "$ref": "#/definitions/CapacityLevelPerBaremetal"
        },
        "baremetal_3": {
          "$ref": "#/definitions/CapacityLevelPerBaremetal"
        },
        "c2.medium.x86": {
          "$ref": "#/definitions/CapacityLevelPerBaremetal"
        },
        "baremetal_2": {
          "$ref": "#/definitions/CapacityLevelPerBaremetal"
        },
        "m2.xlarge.x86": {
          "$ref": "#/definitions/CapacityLevelPerBaremetal"
        },
        "baremetal_s": {
          "$ref": "#/definitions/CapacityLevelPerBaremetal"
        },
        "baremetal_0": {
          "$ref": "#/definitions/CapacityLevelPerBaremetal"
        }
      }
    },
    "CapacityPerNewFacility": {
      "properties": {
        "baremetal_1e": {
          "$ref": "#/definitions/CapacityLevelPerBaremetal"
        }
      }
    },
    "CapacityLevelPerBaremetal": {
      "properties": {
        "level": {
          "type": "string"
        }
      }
    },
    "CapacityInput": {
      "properties": {
        "servers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServerInfo"
          }
        }
      }
    },
    "ServerInfo": {
      "properties": {
        "facility": {
          "type": "string"
        },
        "plan": {
          "type": "string"
        },
        "quantity": {
          "type": "string"
        }
      }
    },
    "CapacityPerMetroInput": {
      "properties": {
        "servers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetroServerInfo"
          }
        }
      }
    },
    "MetroServerInfo": {
      "properties": {
        "metro": {
          "type": "string",
          "description": "The metro ID or code to check the capacity in."
        },
        "plan": {
          "type": "string",
          "description": "The plan ID or slug to check the capacity of."
        },
        "quantity": {
          "type": "string",
          "description": "The number of servers to check the capacity of."
        }
      }
    },
    "CapacityCheckPerFacilityList": {
      "properties": {
        "servers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CapacityCheckPerFacilityInfo"
          }
        }
      }
    },
    "CapacityCheckPerFacilityInfo": {
      "properties": {
        "facility": {
          "type": "string"
        },
        "plan": {
          "type": "string"
        },
        "quantity": {
          "type": "string"
        },
        "available": {
          "type": "boolean"
        }
      }
    },
    "CapacityCheckPerMetroList": {
      "properties": {
        "servers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CapacityCheckPerMetroInfo"
          }
        }
      }
    },
    "CapacityCheckPerMetroInfo": {
      "properties": {
        "metro": {
          "type": "string",
          "description": "The metro ID or code sent to check capacity."
        },
        "plan": {
          "type": "string",
          "description": "The plan ID or slug sent to check capacity."
        },
        "quantity": {
          "type": "string",
          "description": "The number of servers sent to check capacity."
        },
        "available": {
          "type": "boolean",
          "description": "Returns true if there is enough capacity in the metro to fulfill the quantity set. Returns false if there is not enough."
        }
      }
    },
    "SpotMarketPricesList": {
      "properties": {
        "spot_market_prices": {
          "$ref": "#/definitions/SpotPricesReport"
        }
      }
    },
    "SpotPricesReport": {
      "properties": {
        "ams1": {
          "$ref": "#/definitions/SpotPricesPerFacility"
        },
        "atl1": {
          "$ref": "#/definitions/SpotPricesPerNewFacility"
        },
        "dfw1": {
          "$ref": "#/definitions/SpotPricesPerNewFacility"
        },
        "ewr1": {
          "$ref": "#/definitions/SpotPricesPerFacility"
        },
        "fra1": {
          "$ref": "#/definitions/SpotPricesPerNewFacility"
        },
        "iad1": {
          "$ref": "#/definitions/SpotPricesPerNewFacility"
        },
        "lax1": {
          "$ref": "#/definitions/SpotPricesPerNewFacility"
        },
        "nrt1": {
          "$ref": "#/definitions/SpotPricesPerFacility"
        },
        "ord1": {
          "$ref": "#/definitions/SpotPricesPerNewFacility"
        },
        "sea1": {
          "$ref": "#/definitions/SpotPricesPerNewFacility"
        },
        "sin1": {
          "$ref": "#/definitions/SpotPricesPerNewFacility"
        },
        "sjc1": {
          "$ref": "#/definitions/SpotPricesPerFacility"
        },
        "syd1": {
          "$ref": "#/definitions/SpotPricesPerNewFacility"
        },
        "yyz1": {
          "$ref": "#/definitions/SpotPricesPerNewFacility"
        }
      }
    },
    "SpotMarketPricesPerMetroList": {
      "properties": {
        "spot_market_prices": {
          "$ref": "#/definitions/SpotMarketPricesPerMetroReport"
        }
      }
    },
    "SpotMarketPricesPerMetroReport": {
      "properties": {
        "ny": {
          "$ref": "#/definitions/SpotPricesPerFacility"
        },
        "sv": {
          "$ref": "#/definitions/SpotPricesPerFacility"
        },
        "am": {
          "$ref": "#/definitions/SpotPricesPerFacility"
        },
        "ch": {
          "$ref": "#/definitions/SpotPricesPerFacility"
        },
        "la": {
          "$ref": "#/definitions/SpotPricesPerFacility"
        },
        "sg": {
          "$ref": "#/definitions/SpotPricesPerFacility"
        },
        "da": {
          "$ref": "#/definitions/SpotPricesPerFacility"
        }
      }
    },
    "SpotPricesPerFacility": {
      "properties": {
        "baremetal_2a": {
          "$ref": "#/definitions/SpotPricesPerBaremetal"
        },
        "baremetal_2a2": {
          "$ref": "#/definitions/SpotPricesPerBaremetal"
        },
        "baremetal_1": {
          "$ref": "#/definitions/SpotPricesPerBaremetal"
        },
        "baremetal_3": {
          "$ref": "#/definitions/SpotPricesPerBaremetal"
        },
        "c2.medium.x86": {
          "$ref": "#/definitions/SpotPricesPerBaremetal"
        },
        "baremetal_2": {
          "$ref": "#/definitions/SpotPricesPerBaremetal"
        },
        "m2.xlarge.x86": {
          "$ref": "#/definitions/SpotPricesPerBaremetal"
        },
        "baremetal_s": {
          "$ref": "#/definitions/SpotPricesPerBaremetal"
        },
        "baremetal_0": {
          "$ref": "#/definitions/SpotPricesPerBaremetal"
        }
      }
    },
    "SpotPricesPerNewFacility": {
      "properties": {
        "baremetal_1e": {
          "$ref": "#/definitions/SpotPricesPerBaremetal"
        }
      }
    },
    "SpotPricesPerBaremetal": {
      "properties": {
        "price": {
          "type": "number",
          "format": "float"
        }
      }
    },
    "SpotPricesHistoryReport": {
      "properties": {
        "prices_history": {
          "$ref": "#/definitions/SpotPricesDatapoints"
        }
      }
    },
    "SpotPricesDatapoints": {
      "properties": {
        "datapoints": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SpotPricesDatapointsList"
          }
        }
      }
    },
    "SpotPricesDatapointsList": {
      "type": "array",
      "items": {
        "type": "number"
      }
    },
    "NewPassword": {
      "properties": {
        "new_password": {
          "type": "string"
        }
      }
    },
    "RecoveryCodeList": {
      "properties": {
        "recovery_codes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "TransferRequest": {
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "target_organization": {
          "$ref": "#/definitions/Href"
        },
        "project": {
          "$ref": "#/definitions/Href"
        },
        "href": {
          "type": "string"
        }
      }
    },
    "TransferRequestInput": {
      "properties": {
        "target_organization_id": {
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "TransferRequestList": {
      "properties": {
        "transfers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransferRequest"
          }
        }
      }
    },
    "DeviceUsage": {
      "properties": {
        "quantity": {
          "type": "string"
        },
        "unit": {
          "type": "string"
        },
        "total": {
          "type": "string"
        }
      }
    },
    "ProjectUsage": {
      "properties": {
        "facility": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "plan": {
          "type": "string"
        },
        "plan_version": {
          "type": "string"
        },
        "quantity": {
          "type": "string"
        },
        "unit": {
          "type": "string"
        },
        "price": {
          "type": "string"
        },
        "total": {
          "type": "string"
        }
      }
    },
    "DeviceUsageList": {
      "properties": {
        "usages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeviceUsage"
          }
        }
      }
    },
    "ProjectUsageList": {
      "properties": {
        "usages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProjectUsage"
          }
        }
      }
    },
    "User": {
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "short_id": {
          "type": "string"
        },
        "first_name": {
          "type": "string"
        },
        "last_name": {
          "type": "string"
        },
        "full_name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "avatar_url": {
          "type": "string"
        },
        "avatar_thumb_url": {
          "type": "string"
        },
        "two_factor_auth": {
          "type": "string"
        },
        "max_projects": {
          "type": "integer"
        },
        "max_organizations": {
          "type": "integer"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "timezone": {
          "type": "string"
        },
        "fraud_score": {
          "type": "string"
        },
        "last_login_at": {
          "type": "string",
          "format": "date-time"
        },
        "emails": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Href"
          }
        },
        "href": {
          "type": "string"
        },
        "phone_number": {
          "type": "string"
        },
        "customdata": {
          "type": "object"
        }
      }
    },
    "UserUpdateInput": {
      "properties": {
        "first_name": {
          "type": "string"
        },
        "last_name": {
          "type": "string"
        },
        "phone_number": {
          "type": "string"
        },
        "timezone": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "avatar": {
          "type": "string",
          "format": "binary"
        },
        "customdata": {
          "type": "object"
        }
      }
    },
    "UserCreateInput": {
      "required": [
        "first_name",
        "last_name",
        "emails"
      ],
      "properties": {
        "first_name": {
          "type": "string"
        },
        "last_name": {
          "type": "string"
        },
        "phone_number": {
          "type": "string"
        },
        "timezone": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "level": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "company_name": {
          "type": "string"
        },
        "company_url": {
          "type": "string"
        },
        "verified_at": {
          "type": "string",
          "format": "date-time"
        },
        "social_accounts": {
          "type": "object"
        },
        "two_factor_auth": {
          "type": "string"
        },
        "avatar": {
          "type": "string",
          "format": "binary"
        },
        "emails": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EmailInput"
          }
        },
        "locked": {
          "type": "boolean"
        },
        "customdata": {
          "type": "object"
        }
      }
    },
    "UserList": {
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          }
        },
        "meta": {
          "$ref": "#/definitions/Meta"
        }
      }
    },
    "Error": {
      "description": "Error responses are included with 4xx and 5xx HTTP responses from the API service. Either \"error\" or \"errors\" will be set.",
      "properties": {
        "error": {
          "type": "string",
          "description": "A description of the error that caused the request to fail."
        },
        "errors": {
          "type": "array",
          "description": "A list of errors that contributed to the request failing.",
          "items": {
            "type": "string",
            "description": "An error message that contributed to the request failing."
          }
        }
      }
    },
    "Email": {
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "address": {
          "type": "string"
        },
        "default": {
          "type": "boolean"
        },
        "verified": {
          "type": "boolean"
        },
        "href": {
          "type": "string"
        }
      }
    },
    "PortVlanAssignmentBatch": {
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "error_messages": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "quantity": {
          "type": "integer"
        },
        "state": {
          "type": "string",
          "enum": [
            "queued",
            "in_progress",
            "completed",
            "failed"
          ]
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "port": {
          "$ref": "#/definitions/Port"
        },
        "vlan_assignments": {
          "type": "array",
          "items": {
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid"
              },
              "vlan": {
                "type": "integer"
              },
              "state": {
                "type": "string",
                "enum": [
                  "assigned",
                  "unassigned"
                ]
              },
              "native": {
                "type": "boolean"
              }
            }
          }
        }
      }
    },
    "PortVlanAssignmentBatchList": {
      "properties": {
        "batches": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PortVlanAssignmentBatch"
          }
        }
      }
    },
    "PortVlanAssignmentBatchCreateInput": {
      "properties": {
        "vlan_assignments": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "vlan": {
                "type": "string"
              },
              "state": {
                "type": "string",
                "enum": [
                  "assigned",
                  "unassigned"
                ]
              },
              "native": {
                "type": "boolean"
              }
            }
          }
        }
      }
    },
    "PortVlanAssignment": {
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "native": {
          "type": "boolean"
        },
        "state": {
          "type": "string",
          "enum": [
            "assigned",
            "unassigning"
          ]
        },
        "vlan": {
          "type": "integer"
        },
        "port": {
          "$ref": "#/definitions/Href"
        },
        "virtual_network": {
          "$ref": "#/definitions/Href"
        }
      }
    },
    "PortVlanAssignmentList": {
      "properties": {
        "vlan_assignments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PortVlanAssignment"
          }
        }
      }
    },
    "MetalGateway": {
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "state": {
          "type": "string",
          "enum": [
            "ready",
            "active",
            "deleting"
          ],
          "description": "The current state of the Metal Gateway. 'Ready' indicates the gateway record has been configured, but is currently not active on the network. 'Active' indicates the gateway has been configured on the network. 'Deleting' is a temporary state used to indicate that the gateway is in the process of being un-configured from the network, after which the gateway record will be deleted."
        },
        "project": {
          "$ref": "#/definitions/Href"
        },
        "virtual_network": {
          "$ref": "#/definitions/Href"
        },
        "ip_reservation": {
          "$ref": "#/definitions/Href"
        },
        "href": {
          "type": "string"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "created_by": {
          "$ref": "#/definitions/Href"
        }
      }
    },
    "MetalGatewayLite": {
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "state": {
          "type": "string",
          "enum": [
            "ready",
            "active",
            "deleting"
          ],
          "description": "The current state of the Metal Gateway. 'Ready' indicates the gateway record has been configured, but is currently not active on the network. 'Active' indicates the gateway has been configured on the network. 'Deleting' is a temporary state used to indicate that the gateway is in the process of being un-configured from the network, after which the gateway record will be deleted."
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "gateway_address": {
          "type": "string",
          "description": "The gateway address with subnet CIDR value for this Metal Gateway. For example, a Metal Gateway using an IP reservation with block 10.1.2.0/27 would have a gateway address of 10.1.2.1/27."
        },
        "vlan": {
          "type": "number",
          "description": "The VLAN id of the Virtual Network record associated to this Metal Gateway. Example: 1001."
        },
        "href": {
          "type": "string"
        }
      }
    },
    "MetalGatewayInput": {
      "required": [
        "project_id",
        "virtual_network_id"
      ],
      "properties": {
        "virtual_network_id": {
          "type": "string",
          "format": "uuid",
          "description": "The UUID of a metro virtual network that belongs to the same project as where the metal gateway will be created in."
        },
        "ip_reservation_id": {
          "type": "string",
          "format": "uuid",
          "description": "The UUID of an IP reservation that belongs to the same project as where the metal gateway will be created in. This field is required unless the private IPv4 subnet size is specified."
        },
        "private_ipv4_subnet_size": {
          "type": "integer",
          "description": "The subnet size (8, 16, 32, 64, or 128) of the private IPv4 reservation that will be created for the metal gateway. This field is required unless a project IP reservation was specified.\n          Please keep in mind that the number of private metal gateway ranges are limited per project. If you would like to increase the limit per project, please contact support for assistance."
        }
      }
    },
    "MetalGatewayList": {
      "properties": {
        "MetalGateways": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetalGateway"
          }
        }
      }
    },
    "CreateEmailInput": {
      "required": [
        "address"
      ],
      "properties": {
        "address": {
          "type": "string"
        }
      }
    },
    "UpdateEmailInput": {
      "properties": {
        "default": {
          "type": "boolean"
        }
      }
    }
  }
}