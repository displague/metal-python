# coding: utf-8

"""
    Metal API

    This is the API for Equinix Metal Product. Interact with your devices, user account, and projects.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@equinixmetal.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import metal
from metal.types.capacity_per_facility import CapacityPerFacility  # noqa: E501
from metal.rest import ApiException

class TestCapacityPerFacility(unittest.TestCase):
    """CapacityPerFacility unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test CapacityPerFacility
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = metal.models.capacity_per_facility.CapacityPerFacility()  # noqa: E501
        if include_optional :
            return CapacityPerFacility(
                baremetal_2a = metal.models.capacity_level_per_baremetal.CapacityLevelPerBaremetal(
                    level = '', ), 
                baremetal_2a2 = metal.models.capacity_level_per_baremetal.CapacityLevelPerBaremetal(
                    level = '', ), 
                baremetal_1 = metal.models.capacity_level_per_baremetal.CapacityLevelPerBaremetal(
                    level = '', ), 
                baremetal_3 = metal.models.capacity_level_per_baremetal.CapacityLevelPerBaremetal(
                    level = '', ), 
                c2_medium_x86 = metal.models.capacity_level_per_baremetal.CapacityLevelPerBaremetal(
                    level = '', ), 
                baremetal_2 = metal.models.capacity_level_per_baremetal.CapacityLevelPerBaremetal(
                    level = '', ), 
                m2_xlarge_x86 = metal.models.capacity_level_per_baremetal.CapacityLevelPerBaremetal(
                    level = '', ), 
                baremetal_s = metal.models.capacity_level_per_baremetal.CapacityLevelPerBaremetal(
                    level = '', ), 
                baremetal_0 = metal.models.capacity_level_per_baremetal.CapacityLevelPerBaremetal(
                    level = '', )
            )
        else :
            return CapacityPerFacility(
        )

    def testCapacityPerFacility(self):
        """Test CapacityPerFacility"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
