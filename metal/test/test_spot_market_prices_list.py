# coding: utf-8

"""
    Metal API

    This is the API for Equinix Metal Product. Interact with your devices, user account, and projects.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@equinixmetal.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import metal
from metal.types.spot_market_prices_list import SpotMarketPricesList  # noqa: E501
from metal.rest import ApiException

class TestSpotMarketPricesList(unittest.TestCase):
    """SpotMarketPricesList unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test SpotMarketPricesList
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = metal.models.spot_market_prices_list.SpotMarketPricesList()  # noqa: E501
        if include_optional :
            return SpotMarketPricesList(
                spot_market_prices = metal.models.spot_prices_report.SpotPricesReport(
                    ams1 = metal.models.spot_prices_per_facility.SpotPricesPerFacility(
                        baremetal_2a = metal.models.spot_prices_per_baremetal.SpotPricesPerBaremetal(
                            price = 1.337, ), 
                        baremetal_2a2 = metal.models.spot_prices_per_baremetal.SpotPricesPerBaremetal(
                            price = 1.337, ), 
                        baremetal_1 = metal.models.spot_prices_per_baremetal.SpotPricesPerBaremetal(
                            price = 1.337, ), 
                        baremetal_3 = metal.models.spot_prices_per_baremetal.SpotPricesPerBaremetal(
                            price = 1.337, ), 
                        c2/medium/x86 = metal.models.spot_prices_per_baremetal.SpotPricesPerBaremetal(
                            price = 1.337, ), 
                        baremetal_2 = metal.models.spot_prices_per_baremetal.SpotPricesPerBaremetal(
                            price = 1.337, ), 
                        m2/xlarge/x86 = metal.models.spot_prices_per_baremetal.SpotPricesPerBaremetal(
                            price = 1.337, ), 
                        baremetal_s = metal.models.spot_prices_per_baremetal.SpotPricesPerBaremetal(
                            price = 1.337, ), 
                        baremetal_0 = metal.models.spot_prices_per_baremetal.SpotPricesPerBaremetal(
                            price = 1.337, ), ), 
                    atl1 = metal.models.spot_prices_per_new_facility.SpotPricesPerNewFacility(
                        baremetal_1e = metal.models.spot_prices_per_baremetal.SpotPricesPerBaremetal(
                            price = 1.337, ), ), 
                    dfw1 = metal.models.spot_prices_per_new_facility.SpotPricesPerNewFacility(), 
                    ewr1 = metal.models.spot_prices_per_facility.SpotPricesPerFacility(), 
                    fra1 = metal.models.spot_prices_per_new_facility.SpotPricesPerNewFacility(), 
                    iad1 = metal.models.spot_prices_per_new_facility.SpotPricesPerNewFacility(), 
                    lax1 = metal.models.spot_prices_per_new_facility.SpotPricesPerNewFacility(), 
                    nrt1 = metal.models.spot_prices_per_facility.SpotPricesPerFacility(), 
                    ord1 = metal.models.spot_prices_per_new_facility.SpotPricesPerNewFacility(), 
                    sea1 = metal.models.spot_prices_per_new_facility.SpotPricesPerNewFacility(), 
                    sin1 = metal.models.spot_prices_per_new_facility.SpotPricesPerNewFacility(), 
                    sjc1 = metal.models.spot_prices_per_facility.SpotPricesPerFacility(), 
                    syd1 = metal.models.spot_prices_per_new_facility.SpotPricesPerNewFacility(), 
                    yyz1 = metal.models.spot_prices_per_new_facility.SpotPricesPerNewFacility(), )
            )
        else :
            return SpotMarketPricesList(
        )

    def testSpotMarketPricesList(self):
        """Test SpotMarketPricesList"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
