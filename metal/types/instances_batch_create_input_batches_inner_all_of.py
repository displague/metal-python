# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from metal.types.base_model_ import Model
from metal import util


class InstancesBatchCreateInputBatchesInnerAllOf(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, hostnames: List[str]=None, quantity: int=None):
        """InstancesBatchCreateInputBatchesInnerAllOf - a model defined in OpenAPI

        :param hostnames: The hostnames of this InstancesBatchCreateInputBatchesInnerAllOf.
        :param quantity: The quantity of this InstancesBatchCreateInputBatchesInnerAllOf.
        """
        self.openapi_types = {
            'hostnames': List[str],
            'quantity': int
        }

        self.attribute_map = {
            'hostnames': 'hostnames',
            'quantity': 'quantity'
        }

        self._hostnames = hostnames
        self._quantity = quantity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InstancesBatchCreateInputBatchesInnerAllOf':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InstancesBatchCreateInput_batches_inner_allOf of this InstancesBatchCreateInputBatchesInnerAllOf.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def hostnames(self):
        """Gets the hostnames of this InstancesBatchCreateInputBatchesInnerAllOf.


        :return: The hostnames of this InstancesBatchCreateInputBatchesInnerAllOf.
        :rtype: List[str]
        """
        return self._hostnames

    @hostnames.setter
    def hostnames(self, hostnames):
        """Sets the hostnames of this InstancesBatchCreateInputBatchesInnerAllOf.


        :param hostnames: The hostnames of this InstancesBatchCreateInputBatchesInnerAllOf.
        :type hostnames: List[str]
        """

        self._hostnames = hostnames

    @property
    def quantity(self):
        """Gets the quantity of this InstancesBatchCreateInputBatchesInnerAllOf.

        The number of devices to create in this batch. The hostname may contain an `{{index}}` placeholder, which will be replaced with the index of the device in the batch. For example, if the hostname is `device-{{index}}`, the first device in the batch will have the hostname `device-01`, the second device will have the hostname `device-02`, and so on.

        :return: The quantity of this InstancesBatchCreateInputBatchesInnerAllOf.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this InstancesBatchCreateInputBatchesInnerAllOf.

        The number of devices to create in this batch. The hostname may contain an `{{index}}` placeholder, which will be replaced with the index of the device in the batch. For example, if the hostname is `device-{{index}}`, the first device in the batch will have the hostname `device-01`, the second device will have the hostname `device-02`, and so on.

        :param quantity: The quantity of this InstancesBatchCreateInputBatchesInnerAllOf.
        :type quantity: int
        """

        self._quantity = quantity
