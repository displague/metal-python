# coding: utf-8

"""
    Metal API

    This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>.   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@equinixmetal.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from metal.configuration import Configuration


class PaymentMethodBillingAddress(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'street_address': 'str',
        'postal_code': 'str',
        'country_code_alpha2': 'str'
    }

    attribute_map = {
        'street_address': 'street_address',
        'postal_code': 'postal_code',
        'country_code_alpha2': 'country_code_alpha2'
    }

    def __init__(self, street_address=None, postal_code=None, country_code_alpha2=None, local_vars_configuration=None):  # noqa: E501
        """PaymentMethodBillingAddress - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._street_address = None
        self._postal_code = None
        self._country_code_alpha2 = None
        self.discriminator = None

        if street_address is not None:
            self.street_address = street_address
        if postal_code is not None:
            self.postal_code = postal_code
        if country_code_alpha2 is not None:
            self.country_code_alpha2 = country_code_alpha2

    @property
    def street_address(self):
        """Gets the street_address of this PaymentMethodBillingAddress.  # noqa: E501


        :return: The street_address of this PaymentMethodBillingAddress.  # noqa: E501
        :rtype: str
        """
        return self._street_address

    @street_address.setter
    def street_address(self, street_address):
        """Sets the street_address of this PaymentMethodBillingAddress.


        :param street_address: The street_address of this PaymentMethodBillingAddress.  # noqa: E501
        :type street_address: str
        """

        self._street_address = street_address

    @property
    def postal_code(self):
        """Gets the postal_code of this PaymentMethodBillingAddress.  # noqa: E501


        :return: The postal_code of this PaymentMethodBillingAddress.  # noqa: E501
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this PaymentMethodBillingAddress.


        :param postal_code: The postal_code of this PaymentMethodBillingAddress.  # noqa: E501
        :type postal_code: str
        """

        self._postal_code = postal_code

    @property
    def country_code_alpha2(self):
        """Gets the country_code_alpha2 of this PaymentMethodBillingAddress.  # noqa: E501


        :return: The country_code_alpha2 of this PaymentMethodBillingAddress.  # noqa: E501
        :rtype: str
        """
        return self._country_code_alpha2

    @country_code_alpha2.setter
    def country_code_alpha2(self, country_code_alpha2):
        """Sets the country_code_alpha2 of this PaymentMethodBillingAddress.


        :param country_code_alpha2: The country_code_alpha2 of this PaymentMethodBillingAddress.  # noqa: E501
        :type country_code_alpha2: str
        """

        self._country_code_alpha2 = country_code_alpha2

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentMethodBillingAddress):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PaymentMethodBillingAddress):
            return True

        return self.to_dict() != other.to_dict()
