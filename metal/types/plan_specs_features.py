# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from metal.types.base_model_ import Model
from metal import util


class PlanSpecsFeatures(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, raid: bool=None, txt: bool=None, uefi: bool=None):
        """PlanSpecsFeatures - a model defined in OpenAPI

        :param raid: The raid of this PlanSpecsFeatures.
        :param txt: The txt of this PlanSpecsFeatures.
        :param uefi: The uefi of this PlanSpecsFeatures.
        """
        self.openapi_types = {
            'raid': bool,
            'txt': bool,
            'uefi': bool
        }

        self.attribute_map = {
            'raid': 'raid',
            'txt': 'txt',
            'uefi': 'uefi'
        }

        self._raid = raid
        self._txt = txt
        self._uefi = uefi

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PlanSpecsFeatures':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Plan_specs_features of this PlanSpecsFeatures.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def raid(self):
        """Gets the raid of this PlanSpecsFeatures.


        :return: The raid of this PlanSpecsFeatures.
        :rtype: bool
        """
        return self._raid

    @raid.setter
    def raid(self, raid):
        """Sets the raid of this PlanSpecsFeatures.


        :param raid: The raid of this PlanSpecsFeatures.
        :type raid: bool
        """

        self._raid = raid

    @property
    def txt(self):
        """Gets the txt of this PlanSpecsFeatures.


        :return: The txt of this PlanSpecsFeatures.
        :rtype: bool
        """
        return self._txt

    @txt.setter
    def txt(self, txt):
        """Sets the txt of this PlanSpecsFeatures.


        :param txt: The txt of this PlanSpecsFeatures.
        :type txt: bool
        """

        self._txt = txt

    @property
    def uefi(self):
        """Gets the uefi of this PlanSpecsFeatures.


        :return: The uefi of this PlanSpecsFeatures.
        :rtype: bool
        """
        return self._uefi

    @uefi.setter
    def uefi(self, uefi):
        """Sets the uefi of this PlanSpecsFeatures.


        :param uefi: The uefi of this PlanSpecsFeatures.
        :type uefi: bool
        """

        self._uefi = uefi
