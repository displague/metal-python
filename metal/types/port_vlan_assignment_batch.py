# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from metal.types.base_model_ import Model
from metal.types.href import Href
from metal.types.port import Port
from metal.types.port_vlan_assignment_batch_vlan_assignments_inner import PortVlanAssignmentBatchVlanAssignmentsInner
from metal import util


class PortVlanAssignmentBatch(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: datetime=None, error_messages: List[str]=None, id: str=None, port: Port=None, quantity: int=None, state: str=None, updated_at: datetime=None, vlan_assignments: List[PortVlanAssignmentBatchVlanAssignmentsInner]=None, project: Href=None):
        """PortVlanAssignmentBatch - a model defined in OpenAPI

        :param created_at: The created_at of this PortVlanAssignmentBatch.
        :param error_messages: The error_messages of this PortVlanAssignmentBatch.
        :param id: The id of this PortVlanAssignmentBatch.
        :param port: The port of this PortVlanAssignmentBatch.
        :param quantity: The quantity of this PortVlanAssignmentBatch.
        :param state: The state of this PortVlanAssignmentBatch.
        :param updated_at: The updated_at of this PortVlanAssignmentBatch.
        :param vlan_assignments: The vlan_assignments of this PortVlanAssignmentBatch.
        :param project: The project of this PortVlanAssignmentBatch.
        """
        self.openapi_types = {
            'created_at': datetime,
            'error_messages': List[str],
            'id': str,
            'port': Port,
            'quantity': int,
            'state': str,
            'updated_at': datetime,
            'vlan_assignments': List[PortVlanAssignmentBatchVlanAssignmentsInner],
            'project': Href
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'error_messages': 'error_messages',
            'id': 'id',
            'port': 'port',
            'quantity': 'quantity',
            'state': 'state',
            'updated_at': 'updated_at',
            'vlan_assignments': 'vlan_assignments',
            'project': 'project'
        }

        self._created_at = created_at
        self._error_messages = error_messages
        self._id = id
        self._port = port
        self._quantity = quantity
        self._state = state
        self._updated_at = updated_at
        self._vlan_assignments = vlan_assignments
        self._project = project

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PortVlanAssignmentBatch':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PortVlanAssignmentBatch of this PortVlanAssignmentBatch.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this PortVlanAssignmentBatch.


        :return: The created_at of this PortVlanAssignmentBatch.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this PortVlanAssignmentBatch.


        :param created_at: The created_at of this PortVlanAssignmentBatch.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def error_messages(self):
        """Gets the error_messages of this PortVlanAssignmentBatch.


        :return: The error_messages of this PortVlanAssignmentBatch.
        :rtype: List[str]
        """
        return self._error_messages

    @error_messages.setter
    def error_messages(self, error_messages):
        """Sets the error_messages of this PortVlanAssignmentBatch.


        :param error_messages: The error_messages of this PortVlanAssignmentBatch.
        :type error_messages: List[str]
        """

        self._error_messages = error_messages

    @property
    def id(self):
        """Gets the id of this PortVlanAssignmentBatch.


        :return: The id of this PortVlanAssignmentBatch.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PortVlanAssignmentBatch.


        :param id: The id of this PortVlanAssignmentBatch.
        :type id: str
        """

        self._id = id

    @property
    def port(self):
        """Gets the port of this PortVlanAssignmentBatch.


        :return: The port of this PortVlanAssignmentBatch.
        :rtype: Port
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this PortVlanAssignmentBatch.


        :param port: The port of this PortVlanAssignmentBatch.
        :type port: Port
        """

        self._port = port

    @property
    def quantity(self):
        """Gets the quantity of this PortVlanAssignmentBatch.


        :return: The quantity of this PortVlanAssignmentBatch.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this PortVlanAssignmentBatch.


        :param quantity: The quantity of this PortVlanAssignmentBatch.
        :type quantity: int
        """

        self._quantity = quantity

    @property
    def state(self):
        """Gets the state of this PortVlanAssignmentBatch.


        :return: The state of this PortVlanAssignmentBatch.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this PortVlanAssignmentBatch.


        :param state: The state of this PortVlanAssignmentBatch.
        :type state: str
        """
        allowed_values = ["queued", "in_progress", "completed", "failed"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def updated_at(self):
        """Gets the updated_at of this PortVlanAssignmentBatch.


        :return: The updated_at of this PortVlanAssignmentBatch.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this PortVlanAssignmentBatch.


        :param updated_at: The updated_at of this PortVlanAssignmentBatch.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def vlan_assignments(self):
        """Gets the vlan_assignments of this PortVlanAssignmentBatch.


        :return: The vlan_assignments of this PortVlanAssignmentBatch.
        :rtype: List[PortVlanAssignmentBatchVlanAssignmentsInner]
        """
        return self._vlan_assignments

    @vlan_assignments.setter
    def vlan_assignments(self, vlan_assignments):
        """Sets the vlan_assignments of this PortVlanAssignmentBatch.


        :param vlan_assignments: The vlan_assignments of this PortVlanAssignmentBatch.
        :type vlan_assignments: List[PortVlanAssignmentBatchVlanAssignmentsInner]
        """

        self._vlan_assignments = vlan_assignments

    @property
    def project(self):
        """Gets the project of this PortVlanAssignmentBatch.


        :return: The project of this PortVlanAssignmentBatch.
        :rtype: Href
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this PortVlanAssignmentBatch.


        :param project: The project of this PortVlanAssignmentBatch.
        :type project: Href
        """

        self._project = project
