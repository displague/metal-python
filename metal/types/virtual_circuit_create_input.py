# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from metal.types.base_model_ import Model
from metal import util


class VirtualCircuitCreateInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, name: str=None, nni_vlan: int=None, project_id: str=None, speed: int=None, tags: List[str]=None, vnid: str=None):
        """VirtualCircuitCreateInput - a model defined in OpenAPI

        :param description: The description of this VirtualCircuitCreateInput.
        :param name: The name of this VirtualCircuitCreateInput.
        :param nni_vlan: The nni_vlan of this VirtualCircuitCreateInput.
        :param project_id: The project_id of this VirtualCircuitCreateInput.
        :param speed: The speed of this VirtualCircuitCreateInput.
        :param tags: The tags of this VirtualCircuitCreateInput.
        :param vnid: The vnid of this VirtualCircuitCreateInput.
        """
        self.openapi_types = {
            'description': str,
            'name': str,
            'nni_vlan': int,
            'project_id': str,
            'speed': int,
            'tags': List[str],
            'vnid': str
        }

        self.attribute_map = {
            'description': 'description',
            'name': 'name',
            'nni_vlan': 'nni_vlan',
            'project_id': 'project_id',
            'speed': 'speed',
            'tags': 'tags',
            'vnid': 'vnid'
        }

        self._description = description
        self._name = name
        self._nni_vlan = nni_vlan
        self._project_id = project_id
        self._speed = speed
        self._tags = tags
        self._vnid = vnid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VirtualCircuitCreateInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VirtualCircuitCreateInput of this VirtualCircuitCreateInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this VirtualCircuitCreateInput.


        :return: The description of this VirtualCircuitCreateInput.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this VirtualCircuitCreateInput.


        :param description: The description of this VirtualCircuitCreateInput.
        :type description: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this VirtualCircuitCreateInput.


        :return: The name of this VirtualCircuitCreateInput.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VirtualCircuitCreateInput.


        :param name: The name of this VirtualCircuitCreateInput.
        :type name: str
        """

        self._name = name

    @property
    def nni_vlan(self):
        """Gets the nni_vlan of this VirtualCircuitCreateInput.


        :return: The nni_vlan of this VirtualCircuitCreateInput.
        :rtype: int
        """
        return self._nni_vlan

    @nni_vlan.setter
    def nni_vlan(self, nni_vlan):
        """Sets the nni_vlan of this VirtualCircuitCreateInput.


        :param nni_vlan: The nni_vlan of this VirtualCircuitCreateInput.
        :type nni_vlan: int
        """
        if nni_vlan is not None and nni_vlan > 4094:
            raise ValueError("Invalid value for `nni_vlan`, must be a value less than or equal to `4094`")
        if nni_vlan is not None and nni_vlan < 2:
            raise ValueError("Invalid value for `nni_vlan`, must be a value greater than or equal to `2`")

        self._nni_vlan = nni_vlan

    @property
    def project_id(self):
        """Gets the project_id of this VirtualCircuitCreateInput.


        :return: The project_id of this VirtualCircuitCreateInput.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this VirtualCircuitCreateInput.


        :param project_id: The project_id of this VirtualCircuitCreateInput.
        :type project_id: str
        """
        if project_id is None:
            raise ValueError("Invalid value for `project_id`, must not be `None`")

        self._project_id = project_id

    @property
    def speed(self):
        """Gets the speed of this VirtualCircuitCreateInput.

        speed can be passed as integer number representing bps speed or string (e.g. '52m' or '100g' or '4 gbps')

        :return: The speed of this VirtualCircuitCreateInput.
        :rtype: int
        """
        return self._speed

    @speed.setter
    def speed(self, speed):
        """Sets the speed of this VirtualCircuitCreateInput.

        speed can be passed as integer number representing bps speed or string (e.g. '52m' or '100g' or '4 gbps')

        :param speed: The speed of this VirtualCircuitCreateInput.
        :type speed: int
        """

        self._speed = speed

    @property
    def tags(self):
        """Gets the tags of this VirtualCircuitCreateInput.


        :return: The tags of this VirtualCircuitCreateInput.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this VirtualCircuitCreateInput.


        :param tags: The tags of this VirtualCircuitCreateInput.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def vnid(self):
        """Gets the vnid of this VirtualCircuitCreateInput.

        A Virtual Network record UUID or the VNID of a Metro Virtual Network in your project (sent as integer).

        :return: The vnid of this VirtualCircuitCreateInput.
        :rtype: str
        """
        return self._vnid

    @vnid.setter
    def vnid(self, vnid):
        """Sets the vnid of this VirtualCircuitCreateInput.

        A Virtual Network record UUID or the VNID of a Metro Virtual Network in your project (sent as integer).

        :param vnid: The vnid of this VirtualCircuitCreateInput.
        :type vnid: str
        """

        self._vnid = vnid
