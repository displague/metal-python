# coding: utf-8

"""
    Metal API

    This is the API for Equinix Metal Product. Interact with your devices, user account, and projects.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@equinixmetal.com
    Generated by: https://openapi-generator.tech
"""


import inspect
import pprint
import re  # noqa: F401
import six

from metal.configuration import Configuration


class StaffServerRack(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'slot_number': 'int',
        'server_rack': 'StaffServerRack',
        'hardware': 'StaffHardwareLittle'
    }

    attribute_map = {
        'id': 'id',
        'slot_number': 'slot_number',
        'server_rack': 'server_rack',
        'hardware': 'hardware'
    }

    def __init__(self, id=None, slot_number=None, server_rack=None, hardware=None, local_vars_configuration=None):  # noqa: E501
        """StaffServerRack - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._slot_number = None
        self._server_rack = None
        self._hardware = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if slot_number is not None:
            self.slot_number = slot_number
        if server_rack is not None:
            self.server_rack = server_rack
        if hardware is not None:
            self.hardware = hardware

    @property
    def id(self):
        """Gets the id of this StaffServerRack.  # noqa: E501


        :return: The id of this StaffServerRack.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StaffServerRack.


        :param id: The id of this StaffServerRack.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def slot_number(self):
        """Gets the slot_number of this StaffServerRack.  # noqa: E501


        :return: The slot_number of this StaffServerRack.  # noqa: E501
        :rtype: int
        """
        return self._slot_number

    @slot_number.setter
    def slot_number(self, slot_number):
        """Sets the slot_number of this StaffServerRack.


        :param slot_number: The slot_number of this StaffServerRack.  # noqa: E501
        :type slot_number: int
        """

        self._slot_number = slot_number

    @property
    def server_rack(self):
        """Gets the server_rack of this StaffServerRack.  # noqa: E501


        :return: The server_rack of this StaffServerRack.  # noqa: E501
        :rtype: StaffServerRack
        """
        return self._server_rack

    @server_rack.setter
    def server_rack(self, server_rack):
        """Sets the server_rack of this StaffServerRack.


        :param server_rack: The server_rack of this StaffServerRack.  # noqa: E501
        :type server_rack: StaffServerRack
        """

        self._server_rack = server_rack

    @property
    def hardware(self):
        """Gets the hardware of this StaffServerRack.  # noqa: E501


        :return: The hardware of this StaffServerRack.  # noqa: E501
        :rtype: StaffHardwareLittle
        """
        return self._hardware

    @hardware.setter
    def hardware(self, hardware):
        """Sets the hardware of this StaffServerRack.


        :param hardware: The hardware of this StaffServerRack.  # noqa: E501
        :type hardware: StaffHardwareLittle
        """

        self._hardware = hardware

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = inspect.getargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StaffServerRack):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StaffServerRack):
            return True

        return self.to_dict() != other.to_dict()
