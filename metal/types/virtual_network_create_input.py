# coding: utf-8

"""
    Metal API

    This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>.   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@equinixmetal.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from metal.configuration import Configuration


class VirtualNetworkCreateInput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'project_id': 'str',
        'description': 'str',
        'facility': 'str',
        'metro': 'str',
        'vxlan': 'int'
    }

    attribute_map = {
        'project_id': 'project_id',
        'description': 'description',
        'facility': 'facility',
        'metro': 'metro',
        'vxlan': 'vxlan'
    }

    def __init__(self, project_id=None, description=None, facility=None, metro=None, vxlan=None, local_vars_configuration=None):  # noqa: E501
        """VirtualNetworkCreateInput - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._project_id = None
        self._description = None
        self._facility = None
        self._metro = None
        self._vxlan = None
        self.discriminator = None

        self.project_id = project_id
        if description is not None:
            self.description = description
        if facility is not None:
            self.facility = facility
        if metro is not None:
            self.metro = metro
        if vxlan is not None:
            self.vxlan = vxlan

    @property
    def project_id(self):
        """Gets the project_id of this VirtualNetworkCreateInput.  # noqa: E501


        :return: The project_id of this VirtualNetworkCreateInput.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this VirtualNetworkCreateInput.


        :param project_id: The project_id of this VirtualNetworkCreateInput.  # noqa: E501
        :type project_id: str
        """
        if self.local_vars_configuration.client_side_validation and project_id is None:  # noqa: E501
            raise ValueError("Invalid value for `project_id`, must not be `None`")  # noqa: E501

        self._project_id = project_id

    @property
    def description(self):
        """Gets the description of this VirtualNetworkCreateInput.  # noqa: E501


        :return: The description of this VirtualNetworkCreateInput.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this VirtualNetworkCreateInput.


        :param description: The description of this VirtualNetworkCreateInput.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def facility(self):
        """Gets the facility of this VirtualNetworkCreateInput.  # noqa: E501

        The UUID (or facility code) for the Facility in which to create this Virtual network.  # noqa: E501

        :return: The facility of this VirtualNetworkCreateInput.  # noqa: E501
        :rtype: str
        """
        return self._facility

    @facility.setter
    def facility(self, facility):
        """Sets the facility of this VirtualNetworkCreateInput.

        The UUID (or facility code) for the Facility in which to create this Virtual network.  # noqa: E501

        :param facility: The facility of this VirtualNetworkCreateInput.  # noqa: E501
        :type facility: str
        """

        self._facility = facility

    @property
    def metro(self):
        """Gets the metro of this VirtualNetworkCreateInput.  # noqa: E501

        The UUID (or metro code) for the Metro in which to create this Virtual Network.  # noqa: E501

        :return: The metro of this VirtualNetworkCreateInput.  # noqa: E501
        :rtype: str
        """
        return self._metro

    @metro.setter
    def metro(self, metro):
        """Sets the metro of this VirtualNetworkCreateInput.

        The UUID (or metro code) for the Metro in which to create this Virtual Network.  # noqa: E501

        :param metro: The metro of this VirtualNetworkCreateInput.  # noqa: E501
        :type metro: str
        """

        self._metro = metro

    @property
    def vxlan(self):
        """Gets the vxlan of this VirtualNetworkCreateInput.  # noqa: E501

        VLAN ID between 2-3999. Must be unique for the project within the Metro in which this Virtual Network is being created. If no value is specified, the next-available VLAN ID in the range 1000-1999 will be automatically selected.  # noqa: E501

        :return: The vxlan of this VirtualNetworkCreateInput.  # noqa: E501
        :rtype: int
        """
        return self._vxlan

    @vxlan.setter
    def vxlan(self, vxlan):
        """Sets the vxlan of this VirtualNetworkCreateInput.

        VLAN ID between 2-3999. Must be unique for the project within the Metro in which this Virtual Network is being created. If no value is specified, the next-available VLAN ID in the range 1000-1999 will be automatically selected.  # noqa: E501

        :param vxlan: The vxlan of this VirtualNetworkCreateInput.  # noqa: E501
        :type vxlan: int
        """

        self._vxlan = vxlan

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VirtualNetworkCreateInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VirtualNetworkCreateInput):
            return True

        return self.to_dict() != other.to_dict()
