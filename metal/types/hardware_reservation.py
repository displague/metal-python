# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from metal.types.base_model_ import Model
from metal.types.device import Device
from metal.types.facility import Facility
from metal.types.plan import Plan
from metal.types.project import Project
from metal import util


class HardwareReservation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: datetime=None, custom_rate: float=None, device: Device=None, facility: Facility=None, href: str=None, id: str=None, need_of_service: bool=None, plan: Plan=None, project: Project=None, provisionable: bool=None, short_id: str=None, spare: bool=None, switch_uuid: str=None, termination_time: datetime=None):
        """HardwareReservation - a model defined in OpenAPI

        :param created_at: The created_at of this HardwareReservation.
        :param custom_rate: The custom_rate of this HardwareReservation.
        :param device: The device of this HardwareReservation.
        :param facility: The facility of this HardwareReservation.
        :param href: The href of this HardwareReservation.
        :param id: The id of this HardwareReservation.
        :param need_of_service: The need_of_service of this HardwareReservation.
        :param plan: The plan of this HardwareReservation.
        :param project: The project of this HardwareReservation.
        :param provisionable: The provisionable of this HardwareReservation.
        :param short_id: The short_id of this HardwareReservation.
        :param spare: The spare of this HardwareReservation.
        :param switch_uuid: The switch_uuid of this HardwareReservation.
        :param termination_time: The termination_time of this HardwareReservation.
        """
        self.openapi_types = {
            'created_at': datetime,
            'custom_rate': float,
            'device': Device,
            'facility': Facility,
            'href': str,
            'id': str,
            'need_of_service': bool,
            'plan': Plan,
            'project': Project,
            'provisionable': bool,
            'short_id': str,
            'spare': bool,
            'switch_uuid': str,
            'termination_time': datetime
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'custom_rate': 'custom_rate',
            'device': 'device',
            'facility': 'facility',
            'href': 'href',
            'id': 'id',
            'need_of_service': 'need_of_service',
            'plan': 'plan',
            'project': 'project',
            'provisionable': 'provisionable',
            'short_id': 'short_id',
            'spare': 'spare',
            'switch_uuid': 'switch_uuid',
            'termination_time': 'termination_time'
        }

        self._created_at = created_at
        self._custom_rate = custom_rate
        self._device = device
        self._facility = facility
        self._href = href
        self._id = id
        self._need_of_service = need_of_service
        self._plan = plan
        self._project = project
        self._provisionable = provisionable
        self._short_id = short_id
        self._spare = spare
        self._switch_uuid = switch_uuid
        self._termination_time = termination_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HardwareReservation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HardwareReservation of this HardwareReservation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this HardwareReservation.


        :return: The created_at of this HardwareReservation.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this HardwareReservation.


        :param created_at: The created_at of this HardwareReservation.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def custom_rate(self):
        """Gets the custom_rate of this HardwareReservation.

        Amount that will be charged for every billing_cycle.

        :return: The custom_rate of this HardwareReservation.
        :rtype: float
        """
        return self._custom_rate

    @custom_rate.setter
    def custom_rate(self, custom_rate):
        """Sets the custom_rate of this HardwareReservation.

        Amount that will be charged for every billing_cycle.

        :param custom_rate: The custom_rate of this HardwareReservation.
        :type custom_rate: float
        """

        self._custom_rate = custom_rate

    @property
    def device(self):
        """Gets the device of this HardwareReservation.


        :return: The device of this HardwareReservation.
        :rtype: Device
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this HardwareReservation.


        :param device: The device of this HardwareReservation.
        :type device: Device
        """

        self._device = device

    @property
    def facility(self):
        """Gets the facility of this HardwareReservation.


        :return: The facility of this HardwareReservation.
        :rtype: Facility
        """
        return self._facility

    @facility.setter
    def facility(self, facility):
        """Sets the facility of this HardwareReservation.


        :param facility: The facility of this HardwareReservation.
        :type facility: Facility
        """

        self._facility = facility

    @property
    def href(self):
        """Gets the href of this HardwareReservation.


        :return: The href of this HardwareReservation.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this HardwareReservation.


        :param href: The href of this HardwareReservation.
        :type href: str
        """

        self._href = href

    @property
    def id(self):
        """Gets the id of this HardwareReservation.


        :return: The id of this HardwareReservation.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this HardwareReservation.


        :param id: The id of this HardwareReservation.
        :type id: str
        """

        self._id = id

    @property
    def need_of_service(self):
        """Gets the need_of_service of this HardwareReservation.

        Whether this Device requires assistance from Equinix Metal.

        :return: The need_of_service of this HardwareReservation.
        :rtype: bool
        """
        return self._need_of_service

    @need_of_service.setter
    def need_of_service(self, need_of_service):
        """Sets the need_of_service of this HardwareReservation.

        Whether this Device requires assistance from Equinix Metal.

        :param need_of_service: The need_of_service of this HardwareReservation.
        :type need_of_service: bool
        """

        self._need_of_service = need_of_service

    @property
    def plan(self):
        """Gets the plan of this HardwareReservation.


        :return: The plan of this HardwareReservation.
        :rtype: Plan
        """
        return self._plan

    @plan.setter
    def plan(self, plan):
        """Sets the plan of this HardwareReservation.


        :param plan: The plan of this HardwareReservation.
        :type plan: Plan
        """

        self._plan = plan

    @property
    def project(self):
        """Gets the project of this HardwareReservation.


        :return: The project of this HardwareReservation.
        :rtype: Project
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this HardwareReservation.


        :param project: The project of this HardwareReservation.
        :type project: Project
        """

        self._project = project

    @property
    def provisionable(self):
        """Gets the provisionable of this HardwareReservation.

        Whether the reserved server is provisionable or not. Spare devices can't be provisioned unless they are activated first.

        :return: The provisionable of this HardwareReservation.
        :rtype: bool
        """
        return self._provisionable

    @provisionable.setter
    def provisionable(self, provisionable):
        """Sets the provisionable of this HardwareReservation.

        Whether the reserved server is provisionable or not. Spare devices can't be provisioned unless they are activated first.

        :param provisionable: The provisionable of this HardwareReservation.
        :type provisionable: bool
        """

        self._provisionable = provisionable

    @property
    def short_id(self):
        """Gets the short_id of this HardwareReservation.

        Short version of the ID.

        :return: The short_id of this HardwareReservation.
        :rtype: str
        """
        return self._short_id

    @short_id.setter
    def short_id(self, short_id):
        """Sets the short_id of this HardwareReservation.

        Short version of the ID.

        :param short_id: The short_id of this HardwareReservation.
        :type short_id: str
        """

        self._short_id = short_id

    @property
    def spare(self):
        """Gets the spare of this HardwareReservation.

        Whether the Hardware Reservation is a spare. Spare Hardware Reservations are used when a Hardware Reservations requires service from Equinix Metal

        :return: The spare of this HardwareReservation.
        :rtype: bool
        """
        return self._spare

    @spare.setter
    def spare(self, spare):
        """Sets the spare of this HardwareReservation.

        Whether the Hardware Reservation is a spare. Spare Hardware Reservations are used when a Hardware Reservations requires service from Equinix Metal

        :param spare: The spare of this HardwareReservation.
        :type spare: bool
        """

        self._spare = spare

    @property
    def switch_uuid(self):
        """Gets the switch_uuid of this HardwareReservation.

        Switch short id. This can be used to determine if two devices are connected to the same switch, for example.

        :return: The switch_uuid of this HardwareReservation.
        :rtype: str
        """
        return self._switch_uuid

    @switch_uuid.setter
    def switch_uuid(self, switch_uuid):
        """Sets the switch_uuid of this HardwareReservation.

        Switch short id. This can be used to determine if two devices are connected to the same switch, for example.

        :param switch_uuid: The switch_uuid of this HardwareReservation.
        :type switch_uuid: str
        """

        self._switch_uuid = switch_uuid

    @property
    def termination_time(self):
        """Gets the termination_time of this HardwareReservation.

        Expiration date for the reservation.

        :return: The termination_time of this HardwareReservation.
        :rtype: datetime
        """
        return self._termination_time

    @termination_time.setter
    def termination_time(self, termination_time):
        """Sets the termination_time of this HardwareReservation.

        Expiration date for the reservation.

        :param termination_time: The termination_time of this HardwareReservation.
        :type termination_time: datetime
        """

        self._termination_time = termination_time
