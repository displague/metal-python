# coding: utf-8

"""
    Metal API

    This is the API for Equinix Metal Product. Interact with your devices, user account, and projects.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@equinixmetal.com
    Generated by: https://openapi-generator.tech
"""


import inspect
import pprint
import re  # noqa: F401
import six

from metal.configuration import Configuration


class HardwareReservation(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'short_id': 'str',
        'facility': 'Facility',
        'plan': 'Plan',
        'href': 'str',
        'project': 'Project',
        'device': 'Device',
        'created_at': 'datetime',
        'remove_at': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'short_id': 'short_id',
        'facility': 'facility',
        'plan': 'plan',
        'href': 'href',
        'project': 'project',
        'device': 'device',
        'created_at': 'created_at',
        'remove_at': 'remove_at'
    }

    def __init__(self, id=None, short_id=None, facility=None, plan=None, href=None, project=None, device=None, created_at=None, remove_at=None, local_vars_configuration=None):  # noqa: E501
        """HardwareReservation - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._short_id = None
        self._facility = None
        self._plan = None
        self._href = None
        self._project = None
        self._device = None
        self._created_at = None
        self._remove_at = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if short_id is not None:
            self.short_id = short_id
        if facility is not None:
            self.facility = facility
        if plan is not None:
            self.plan = plan
        if href is not None:
            self.href = href
        if project is not None:
            self.project = project
        if device is not None:
            self.device = device
        if created_at is not None:
            self.created_at = created_at
        if remove_at is not None:
            self.remove_at = remove_at

    @property
    def id(self):
        """Gets the id of this HardwareReservation.  # noqa: E501


        :return: The id of this HardwareReservation.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this HardwareReservation.


        :param id: The id of this HardwareReservation.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def short_id(self):
        """Gets the short_id of this HardwareReservation.  # noqa: E501


        :return: The short_id of this HardwareReservation.  # noqa: E501
        :rtype: str
        """
        return self._short_id

    @short_id.setter
    def short_id(self, short_id):
        """Sets the short_id of this HardwareReservation.


        :param short_id: The short_id of this HardwareReservation.  # noqa: E501
        :type short_id: str
        """

        self._short_id = short_id

    @property
    def facility(self):
        """Gets the facility of this HardwareReservation.  # noqa: E501


        :return: The facility of this HardwareReservation.  # noqa: E501
        :rtype: Facility
        """
        return self._facility

    @facility.setter
    def facility(self, facility):
        """Sets the facility of this HardwareReservation.


        :param facility: The facility of this HardwareReservation.  # noqa: E501
        :type facility: Facility
        """

        self._facility = facility

    @property
    def plan(self):
        """Gets the plan of this HardwareReservation.  # noqa: E501


        :return: The plan of this HardwareReservation.  # noqa: E501
        :rtype: Plan
        """
        return self._plan

    @plan.setter
    def plan(self, plan):
        """Sets the plan of this HardwareReservation.


        :param plan: The plan of this HardwareReservation.  # noqa: E501
        :type plan: Plan
        """

        self._plan = plan

    @property
    def href(self):
        """Gets the href of this HardwareReservation.  # noqa: E501


        :return: The href of this HardwareReservation.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this HardwareReservation.


        :param href: The href of this HardwareReservation.  # noqa: E501
        :type href: str
        """

        self._href = href

    @property
    def project(self):
        """Gets the project of this HardwareReservation.  # noqa: E501


        :return: The project of this HardwareReservation.  # noqa: E501
        :rtype: Project
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this HardwareReservation.


        :param project: The project of this HardwareReservation.  # noqa: E501
        :type project: Project
        """

        self._project = project

    @property
    def device(self):
        """Gets the device of this HardwareReservation.  # noqa: E501


        :return: The device of this HardwareReservation.  # noqa: E501
        :rtype: Device
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this HardwareReservation.


        :param device: The device of this HardwareReservation.  # noqa: E501
        :type device: Device
        """

        self._device = device

    @property
    def created_at(self):
        """Gets the created_at of this HardwareReservation.  # noqa: E501


        :return: The created_at of this HardwareReservation.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this HardwareReservation.


        :param created_at: The created_at of this HardwareReservation.  # noqa: E501
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def remove_at(self):
        """Gets the remove_at of this HardwareReservation.  # noqa: E501


        :return: The remove_at of this HardwareReservation.  # noqa: E501
        :rtype: datetime
        """
        return self._remove_at

    @remove_at.setter
    def remove_at(self, remove_at):
        """Sets the remove_at of this HardwareReservation.


        :param remove_at: The remove_at of this HardwareReservation.  # noqa: E501
        :type remove_at: datetime
        """

        self._remove_at = remove_at

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = inspect.getargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HardwareReservation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, HardwareReservation):
            return True

        return self.to_dict() != other.to_dict()
