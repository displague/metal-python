# coding: utf-8

"""
    Metal API

    This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>.   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@equinixmetal.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from metal.configuration import Configuration


class SpotMarketPricesPerMetroReport(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'ny': 'SpotPricesPerFacility',
        'sv': 'SpotPricesPerFacility',
        'am': 'SpotPricesPerFacility',
        'ch': 'SpotPricesPerFacility',
        'la': 'SpotPricesPerFacility',
        'sg': 'SpotPricesPerFacility',
        'da': 'SpotPricesPerFacility'
    }

    attribute_map = {
        'ny': 'ny',
        'sv': 'sv',
        'am': 'am',
        'ch': 'ch',
        'la': 'la',
        'sg': 'sg',
        'da': 'da'
    }

    def __init__(self, ny=None, sv=None, am=None, ch=None, la=None, sg=None, da=None, local_vars_configuration=None):  # noqa: E501
        """SpotMarketPricesPerMetroReport - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._ny = None
        self._sv = None
        self._am = None
        self._ch = None
        self._la = None
        self._sg = None
        self._da = None
        self.discriminator = None

        if ny is not None:
            self.ny = ny
        if sv is not None:
            self.sv = sv
        if am is not None:
            self.am = am
        if ch is not None:
            self.ch = ch
        if la is not None:
            self.la = la
        if sg is not None:
            self.sg = sg
        if da is not None:
            self.da = da

    @property
    def ny(self):
        """Gets the ny of this SpotMarketPricesPerMetroReport.  # noqa: E501


        :return: The ny of this SpotMarketPricesPerMetroReport.  # noqa: E501
        :rtype: SpotPricesPerFacility
        """
        return self._ny

    @ny.setter
    def ny(self, ny):
        """Sets the ny of this SpotMarketPricesPerMetroReport.


        :param ny: The ny of this SpotMarketPricesPerMetroReport.  # noqa: E501
        :type ny: SpotPricesPerFacility
        """

        self._ny = ny

    @property
    def sv(self):
        """Gets the sv of this SpotMarketPricesPerMetroReport.  # noqa: E501


        :return: The sv of this SpotMarketPricesPerMetroReport.  # noqa: E501
        :rtype: SpotPricesPerFacility
        """
        return self._sv

    @sv.setter
    def sv(self, sv):
        """Sets the sv of this SpotMarketPricesPerMetroReport.


        :param sv: The sv of this SpotMarketPricesPerMetroReport.  # noqa: E501
        :type sv: SpotPricesPerFacility
        """

        self._sv = sv

    @property
    def am(self):
        """Gets the am of this SpotMarketPricesPerMetroReport.  # noqa: E501


        :return: The am of this SpotMarketPricesPerMetroReport.  # noqa: E501
        :rtype: SpotPricesPerFacility
        """
        return self._am

    @am.setter
    def am(self, am):
        """Sets the am of this SpotMarketPricesPerMetroReport.


        :param am: The am of this SpotMarketPricesPerMetroReport.  # noqa: E501
        :type am: SpotPricesPerFacility
        """

        self._am = am

    @property
    def ch(self):
        """Gets the ch of this SpotMarketPricesPerMetroReport.  # noqa: E501


        :return: The ch of this SpotMarketPricesPerMetroReport.  # noqa: E501
        :rtype: SpotPricesPerFacility
        """
        return self._ch

    @ch.setter
    def ch(self, ch):
        """Sets the ch of this SpotMarketPricesPerMetroReport.


        :param ch: The ch of this SpotMarketPricesPerMetroReport.  # noqa: E501
        :type ch: SpotPricesPerFacility
        """

        self._ch = ch

    @property
    def la(self):
        """Gets the la of this SpotMarketPricesPerMetroReport.  # noqa: E501


        :return: The la of this SpotMarketPricesPerMetroReport.  # noqa: E501
        :rtype: SpotPricesPerFacility
        """
        return self._la

    @la.setter
    def la(self, la):
        """Sets the la of this SpotMarketPricesPerMetroReport.


        :param la: The la of this SpotMarketPricesPerMetroReport.  # noqa: E501
        :type la: SpotPricesPerFacility
        """

        self._la = la

    @property
    def sg(self):
        """Gets the sg of this SpotMarketPricesPerMetroReport.  # noqa: E501


        :return: The sg of this SpotMarketPricesPerMetroReport.  # noqa: E501
        :rtype: SpotPricesPerFacility
        """
        return self._sg

    @sg.setter
    def sg(self, sg):
        """Sets the sg of this SpotMarketPricesPerMetroReport.


        :param sg: The sg of this SpotMarketPricesPerMetroReport.  # noqa: E501
        :type sg: SpotPricesPerFacility
        """

        self._sg = sg

    @property
    def da(self):
        """Gets the da of this SpotMarketPricesPerMetroReport.  # noqa: E501


        :return: The da of this SpotMarketPricesPerMetroReport.  # noqa: E501
        :rtype: SpotPricesPerFacility
        """
        return self._da

    @da.setter
    def da(self, da):
        """Sets the da of this SpotMarketPricesPerMetroReport.


        :param da: The da of this SpotMarketPricesPerMetroReport.  # noqa: E501
        :type da: SpotPricesPerFacility
        """

        self._da = da

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SpotMarketPricesPerMetroReport):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SpotMarketPricesPerMetroReport):
            return True

        return self.to_dict() != other.to_dict()
