# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from metal.types.base_model_ import Model
from metal.types.href import Href
from metal.types.metal_gateway_lite import MetalGatewayLite
from metal import util


class VirtualNetwork(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assigned_to: Href=None, assigned_to_virtual_circuit: bool=None, description: str=None, facility: Href=None, href: str=None, id: str=None, instances: List[Href]=None, metal_gateways: List[MetalGatewayLite]=None, metro: Href=None, metro_code: str=None, vxlan: int=None):
        """VirtualNetwork - a model defined in OpenAPI

        :param assigned_to: The assigned_to of this VirtualNetwork.
        :param assigned_to_virtual_circuit: The assigned_to_virtual_circuit of this VirtualNetwork.
        :param description: The description of this VirtualNetwork.
        :param facility: The facility of this VirtualNetwork.
        :param href: The href of this VirtualNetwork.
        :param id: The id of this VirtualNetwork.
        :param instances: The instances of this VirtualNetwork.
        :param metal_gateways: The metal_gateways of this VirtualNetwork.
        :param metro: The metro of this VirtualNetwork.
        :param metro_code: The metro_code of this VirtualNetwork.
        :param vxlan: The vxlan of this VirtualNetwork.
        """
        self.openapi_types = {
            'assigned_to': Href,
            'assigned_to_virtual_circuit': bool,
            'description': str,
            'facility': Href,
            'href': str,
            'id': str,
            'instances': List[Href],
            'metal_gateways': List[MetalGatewayLite],
            'metro': Href,
            'metro_code': str,
            'vxlan': int
        }

        self.attribute_map = {
            'assigned_to': 'assigned_to',
            'assigned_to_virtual_circuit': 'assigned_to_virtual_circuit',
            'description': 'description',
            'facility': 'facility',
            'href': 'href',
            'id': 'id',
            'instances': 'instances',
            'metal_gateways': 'metal_gateways',
            'metro': 'metro',
            'metro_code': 'metro_code',
            'vxlan': 'vxlan'
        }

        self._assigned_to = assigned_to
        self._assigned_to_virtual_circuit = assigned_to_virtual_circuit
        self._description = description
        self._facility = facility
        self._href = href
        self._id = id
        self._instances = instances
        self._metal_gateways = metal_gateways
        self._metro = metro
        self._metro_code = metro_code
        self._vxlan = vxlan

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VirtualNetwork':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VirtualNetwork of this VirtualNetwork.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assigned_to(self):
        """Gets the assigned_to of this VirtualNetwork.


        :return: The assigned_to of this VirtualNetwork.
        :rtype: Href
        """
        return self._assigned_to

    @assigned_to.setter
    def assigned_to(self, assigned_to):
        """Sets the assigned_to of this VirtualNetwork.


        :param assigned_to: The assigned_to of this VirtualNetwork.
        :type assigned_to: Href
        """

        self._assigned_to = assigned_to

    @property
    def assigned_to_virtual_circuit(self):
        """Gets the assigned_to_virtual_circuit of this VirtualNetwork.

        True if the virtual network is attached to a virtual circuit. False if not.

        :return: The assigned_to_virtual_circuit of this VirtualNetwork.
        :rtype: bool
        """
        return self._assigned_to_virtual_circuit

    @assigned_to_virtual_circuit.setter
    def assigned_to_virtual_circuit(self, assigned_to_virtual_circuit):
        """Sets the assigned_to_virtual_circuit of this VirtualNetwork.

        True if the virtual network is attached to a virtual circuit. False if not.

        :param assigned_to_virtual_circuit: The assigned_to_virtual_circuit of this VirtualNetwork.
        :type assigned_to_virtual_circuit: bool
        """

        self._assigned_to_virtual_circuit = assigned_to_virtual_circuit

    @property
    def description(self):
        """Gets the description of this VirtualNetwork.


        :return: The description of this VirtualNetwork.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this VirtualNetwork.


        :param description: The description of this VirtualNetwork.
        :type description: str
        """

        self._description = description

    @property
    def facility(self):
        """Gets the facility of this VirtualNetwork.


        :return: The facility of this VirtualNetwork.
        :rtype: Href
        """
        return self._facility

    @facility.setter
    def facility(self, facility):
        """Sets the facility of this VirtualNetwork.


        :param facility: The facility of this VirtualNetwork.
        :type facility: Href
        """

        self._facility = facility

    @property
    def href(self):
        """Gets the href of this VirtualNetwork.


        :return: The href of this VirtualNetwork.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this VirtualNetwork.


        :param href: The href of this VirtualNetwork.
        :type href: str
        """

        self._href = href

    @property
    def id(self):
        """Gets the id of this VirtualNetwork.


        :return: The id of this VirtualNetwork.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VirtualNetwork.


        :param id: The id of this VirtualNetwork.
        :type id: str
        """

        self._id = id

    @property
    def instances(self):
        """Gets the instances of this VirtualNetwork.

        A list of instances with ports currently associated to this Virtual Network.

        :return: The instances of this VirtualNetwork.
        :rtype: List[Href]
        """
        return self._instances

    @instances.setter
    def instances(self, instances):
        """Sets the instances of this VirtualNetwork.

        A list of instances with ports currently associated to this Virtual Network.

        :param instances: The instances of this VirtualNetwork.
        :type instances: List[Href]
        """

        self._instances = instances

    @property
    def metal_gateways(self):
        """Gets the metal_gateways of this VirtualNetwork.

        A list of metal gateways currently associated to this Virtual Network.

        :return: The metal_gateways of this VirtualNetwork.
        :rtype: List[MetalGatewayLite]
        """
        return self._metal_gateways

    @metal_gateways.setter
    def metal_gateways(self, metal_gateways):
        """Sets the metal_gateways of this VirtualNetwork.

        A list of metal gateways currently associated to this Virtual Network.

        :param metal_gateways: The metal_gateways of this VirtualNetwork.
        :type metal_gateways: List[MetalGatewayLite]
        """

        self._metal_gateways = metal_gateways

    @property
    def metro(self):
        """Gets the metro of this VirtualNetwork.


        :return: The metro of this VirtualNetwork.
        :rtype: Href
        """
        return self._metro

    @metro.setter
    def metro(self, metro):
        """Sets the metro of this VirtualNetwork.


        :param metro: The metro of this VirtualNetwork.
        :type metro: Href
        """

        self._metro = metro

    @property
    def metro_code(self):
        """Gets the metro_code of this VirtualNetwork.

        The Metro code of the metro in which this Virtual Network is defined.

        :return: The metro_code of this VirtualNetwork.
        :rtype: str
        """
        return self._metro_code

    @metro_code.setter
    def metro_code(self, metro_code):
        """Sets the metro_code of this VirtualNetwork.

        The Metro code of the metro in which this Virtual Network is defined.

        :param metro_code: The metro_code of this VirtualNetwork.
        :type metro_code: str
        """

        self._metro_code = metro_code

    @property
    def vxlan(self):
        """Gets the vxlan of this VirtualNetwork.


        :return: The vxlan of this VirtualNetwork.
        :rtype: int
        """
        return self._vxlan

    @vxlan.setter
    def vxlan(self, vxlan):
        """Sets the vxlan of this VirtualNetwork.


        :param vxlan: The vxlan of this VirtualNetwork.
        :type vxlan: int
        """

        self._vxlan = vxlan
