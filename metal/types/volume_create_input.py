# coding: utf-8

"""
    Metal API

    This is the API for Equinix Metal Product. Interact with your devices, user account, and projects.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@equinixmetal.com
    Generated by: https://openapi-generator.tech
"""


import inspect
import pprint
import re  # noqa: F401
import six

from metal.configuration import Configuration


class VolumeCreateInput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'description': 'str',
        'facility': 'str',
        'plan': 'str',
        'size': 'int',
        'locked': 'bool',
        'billing_cycle': 'str',
        'snapshot_policies': 'SnapshotPolicyInput',
        'customdata': 'object'
    }

    attribute_map = {
        'description': 'description',
        'facility': 'facility',
        'plan': 'plan',
        'size': 'size',
        'locked': 'locked',
        'billing_cycle': 'billing_cycle',
        'snapshot_policies': 'snapshot_policies',
        'customdata': 'customdata'
    }

    def __init__(self, description=None, facility=None, plan=None, size=None, locked=None, billing_cycle=None, snapshot_policies=None, customdata=None, local_vars_configuration=None):  # noqa: E501
        """VolumeCreateInput - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._description = None
        self._facility = None
        self._plan = None
        self._size = None
        self._locked = None
        self._billing_cycle = None
        self._snapshot_policies = None
        self._customdata = None
        self.discriminator = None

        if description is not None:
            self.description = description
        self.facility = facility
        self.plan = plan
        self.size = size
        if locked is not None:
            self.locked = locked
        if billing_cycle is not None:
            self.billing_cycle = billing_cycle
        if snapshot_policies is not None:
            self.snapshot_policies = snapshot_policies
        if customdata is not None:
            self.customdata = customdata

    @property
    def description(self):
        """Gets the description of this VolumeCreateInput.  # noqa: E501


        :return: The description of this VolumeCreateInput.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this VolumeCreateInput.


        :param description: The description of this VolumeCreateInput.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def facility(self):
        """Gets the facility of this VolumeCreateInput.  # noqa: E501

        ams1, ewr1, nrt1, sjc1  # noqa: E501

        :return: The facility of this VolumeCreateInput.  # noqa: E501
        :rtype: str
        """
        return self._facility

    @facility.setter
    def facility(self, facility):
        """Sets the facility of this VolumeCreateInput.

        ams1, ewr1, nrt1, sjc1  # noqa: E501

        :param facility: The facility of this VolumeCreateInput.  # noqa: E501
        :type facility: str
        """
        if self.local_vars_configuration.client_side_validation and facility is None:  # noqa: E501
            raise ValueError("Invalid value for `facility`, must not be `None`")  # noqa: E501

        self._facility = facility

    @property
    def plan(self):
        """Gets the plan of this VolumeCreateInput.  # noqa: E501

        storage_1, storage_2  # noqa: E501

        :return: The plan of this VolumeCreateInput.  # noqa: E501
        :rtype: str
        """
        return self._plan

    @plan.setter
    def plan(self, plan):
        """Sets the plan of this VolumeCreateInput.

        storage_1, storage_2  # noqa: E501

        :param plan: The plan of this VolumeCreateInput.  # noqa: E501
        :type plan: str
        """
        if self.local_vars_configuration.client_side_validation and plan is None:  # noqa: E501
            raise ValueError("Invalid value for `plan`, must not be `None`")  # noqa: E501

        self._plan = plan

    @property
    def size(self):
        """Gets the size of this VolumeCreateInput.  # noqa: E501


        :return: The size of this VolumeCreateInput.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this VolumeCreateInput.


        :param size: The size of this VolumeCreateInput.  # noqa: E501
        :type size: int
        """
        if self.local_vars_configuration.client_side_validation and size is None:  # noqa: E501
            raise ValueError("Invalid value for `size`, must not be `None`")  # noqa: E501

        self._size = size

    @property
    def locked(self):
        """Gets the locked of this VolumeCreateInput.  # noqa: E501


        :return: The locked of this VolumeCreateInput.  # noqa: E501
        :rtype: bool
        """
        return self._locked

    @locked.setter
    def locked(self, locked):
        """Sets the locked of this VolumeCreateInput.


        :param locked: The locked of this VolumeCreateInput.  # noqa: E501
        :type locked: bool
        """

        self._locked = locked

    @property
    def billing_cycle(self):
        """Gets the billing_cycle of this VolumeCreateInput.  # noqa: E501

        hourly  # noqa: E501

        :return: The billing_cycle of this VolumeCreateInput.  # noqa: E501
        :rtype: str
        """
        return self._billing_cycle

    @billing_cycle.setter
    def billing_cycle(self, billing_cycle):
        """Sets the billing_cycle of this VolumeCreateInput.

        hourly  # noqa: E501

        :param billing_cycle: The billing_cycle of this VolumeCreateInput.  # noqa: E501
        :type billing_cycle: str
        """

        self._billing_cycle = billing_cycle

    @property
    def snapshot_policies(self):
        """Gets the snapshot_policies of this VolumeCreateInput.  # noqa: E501


        :return: The snapshot_policies of this VolumeCreateInput.  # noqa: E501
        :rtype: SnapshotPolicyInput
        """
        return self._snapshot_policies

    @snapshot_policies.setter
    def snapshot_policies(self, snapshot_policies):
        """Sets the snapshot_policies of this VolumeCreateInput.


        :param snapshot_policies: The snapshot_policies of this VolumeCreateInput.  # noqa: E501
        :type snapshot_policies: SnapshotPolicyInput
        """

        self._snapshot_policies = snapshot_policies

    @property
    def customdata(self):
        """Gets the customdata of this VolumeCreateInput.  # noqa: E501


        :return: The customdata of this VolumeCreateInput.  # noqa: E501
        :rtype: object
        """
        return self._customdata

    @customdata.setter
    def customdata(self, customdata):
        """Sets the customdata of this VolumeCreateInput.


        :param customdata: The customdata of this VolumeCreateInput.  # noqa: E501
        :type customdata: object
        """

        self._customdata = customdata

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = inspect.getargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VolumeCreateInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VolumeCreateInput):
            return True

        return self.to_dict() != other.to_dict()
