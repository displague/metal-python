# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from metal.types.base_model_ import Model
from metal import util


class DeviceActionInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type: str=None, force_delete: bool=None, deprovision_fast: bool=None, preserve_data: bool=None, operating_system: str=None, ipxe_script_url: str=None):
        """DeviceActionInput - a model defined in OpenAPI

        :param type: The type of this DeviceActionInput.
        :param force_delete: The force_delete of this DeviceActionInput.
        :param deprovision_fast: The deprovision_fast of this DeviceActionInput.
        :param preserve_data: The preserve_data of this DeviceActionInput.
        :param operating_system: The operating_system of this DeviceActionInput.
        :param ipxe_script_url: The ipxe_script_url of this DeviceActionInput.
        """
        self.openapi_types = {
            'type': str,
            'force_delete': bool,
            'deprovision_fast': bool,
            'preserve_data': bool,
            'operating_system': str,
            'ipxe_script_url': str
        }

        self.attribute_map = {
            'type': 'type',
            'force_delete': 'force_delete',
            'deprovision_fast': 'deprovision_fast',
            'preserve_data': 'preserve_data',
            'operating_system': 'operating_system',
            'ipxe_script_url': 'ipxe_script_url'
        }

        self._type = type
        self._force_delete = force_delete
        self._deprovision_fast = deprovision_fast
        self._preserve_data = preserve_data
        self._operating_system = operating_system
        self._ipxe_script_url = ipxe_script_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeviceActionInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeviceActionInput of this DeviceActionInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this DeviceActionInput.

        Action to perform. See Device.actions for possible actions.

        :return: The type of this DeviceActionInput.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DeviceActionInput.

        Action to perform. See Device.actions for possible actions.

        :param type: The type of this DeviceActionInput.
        :type type: str
        """
        allowed_values = ["power_on", "power_off", "reboot", "rescue", "reinstall"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def force_delete(self):
        """Gets the force_delete of this DeviceActionInput.

        May be required to perform actions under certain conditions

        :return: The force_delete of this DeviceActionInput.
        :rtype: bool
        """
        return self._force_delete

    @force_delete.setter
    def force_delete(self, force_delete):
        """Sets the force_delete of this DeviceActionInput.

        May be required to perform actions under certain conditions

        :param force_delete: The force_delete of this DeviceActionInput.
        :type force_delete: bool
        """

        self._force_delete = force_delete

    @property
    def deprovision_fast(self):
        """Gets the deprovision_fast of this DeviceActionInput.

        When type is `reinstall`, enabling fast deprovisioning will bypass full disk wiping.

        :return: The deprovision_fast of this DeviceActionInput.
        :rtype: bool
        """
        return self._deprovision_fast

    @deprovision_fast.setter
    def deprovision_fast(self, deprovision_fast):
        """Sets the deprovision_fast of this DeviceActionInput.

        When type is `reinstall`, enabling fast deprovisioning will bypass full disk wiping.

        :param deprovision_fast: The deprovision_fast of this DeviceActionInput.
        :type deprovision_fast: bool
        """

        self._deprovision_fast = deprovision_fast

    @property
    def preserve_data(self):
        """Gets the preserve_data of this DeviceActionInput.

        When type is `reinstall`, preserve the existing data on all disks except the operating-system disk.

        :return: The preserve_data of this DeviceActionInput.
        :rtype: bool
        """
        return self._preserve_data

    @preserve_data.setter
    def preserve_data(self, preserve_data):
        """Sets the preserve_data of this DeviceActionInput.

        When type is `reinstall`, preserve the existing data on all disks except the operating-system disk.

        :param preserve_data: The preserve_data of this DeviceActionInput.
        :type preserve_data: bool
        """

        self._preserve_data = preserve_data

    @property
    def operating_system(self):
        """Gets the operating_system of this DeviceActionInput.

        When type is `reinstall`, use this `operating_system` (defaults to the current `operating system`)

        :return: The operating_system of this DeviceActionInput.
        :rtype: str
        """
        return self._operating_system

    @operating_system.setter
    def operating_system(self, operating_system):
        """Sets the operating_system of this DeviceActionInput.

        When type is `reinstall`, use this `operating_system` (defaults to the current `operating system`)

        :param operating_system: The operating_system of this DeviceActionInput.
        :type operating_system: str
        """

        self._operating_system = operating_system

    @property
    def ipxe_script_url(self):
        """Gets the ipxe_script_url of this DeviceActionInput.

        When type is `reinstall`, use this `ipxe_script_url` (`operating_system` must be `custom_ipxe`, defaults to the current `ipxe_script_url`)

        :return: The ipxe_script_url of this DeviceActionInput.
        :rtype: str
        """
        return self._ipxe_script_url

    @ipxe_script_url.setter
    def ipxe_script_url(self, ipxe_script_url):
        """Sets the ipxe_script_url of this DeviceActionInput.

        When type is `reinstall`, use this `ipxe_script_url` (`operating_system` must be `custom_ipxe`, defaults to the current `ipxe_script_url`)

        :param ipxe_script_url: The ipxe_script_url of this DeviceActionInput.
        :type ipxe_script_url: str
        """

        self._ipxe_script_url = ipxe_script_url
