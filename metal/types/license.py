# coding: utf-8

"""
    Metal API

    This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>.   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@equinixmetal.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from metal.configuration import Configuration


class License(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'description': 'str',
        'license_key': 'str',
        'licensee_product': 'Href',
        'size': 'float',
        'project': 'Href'
    }

    attribute_map = {
        'id': 'id',
        'description': 'description',
        'license_key': 'license_key',
        'licensee_product': 'licensee_product',
        'size': 'size',
        'project': 'project'
    }

    def __init__(self, id=None, description=None, license_key=None, licensee_product=None, size=None, project=None, local_vars_configuration=None):  # noqa: E501
        """License - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._description = None
        self._license_key = None
        self._licensee_product = None
        self._size = None
        self._project = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if description is not None:
            self.description = description
        if license_key is not None:
            self.license_key = license_key
        if licensee_product is not None:
            self.licensee_product = licensee_product
        if size is not None:
            self.size = size
        if project is not None:
            self.project = project

    @property
    def id(self):
        """Gets the id of this License.  # noqa: E501


        :return: The id of this License.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this License.


        :param id: The id of this License.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def description(self):
        """Gets the description of this License.  # noqa: E501


        :return: The description of this License.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this License.


        :param description: The description of this License.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def license_key(self):
        """Gets the license_key of this License.  # noqa: E501


        :return: The license_key of this License.  # noqa: E501
        :rtype: str
        """
        return self._license_key

    @license_key.setter
    def license_key(self, license_key):
        """Sets the license_key of this License.


        :param license_key: The license_key of this License.  # noqa: E501
        :type license_key: str
        """

        self._license_key = license_key

    @property
    def licensee_product(self):
        """Gets the licensee_product of this License.  # noqa: E501


        :return: The licensee_product of this License.  # noqa: E501
        :rtype: Href
        """
        return self._licensee_product

    @licensee_product.setter
    def licensee_product(self, licensee_product):
        """Sets the licensee_product of this License.


        :param licensee_product: The licensee_product of this License.  # noqa: E501
        :type licensee_product: Href
        """

        self._licensee_product = licensee_product

    @property
    def size(self):
        """Gets the size of this License.  # noqa: E501


        :return: The size of this License.  # noqa: E501
        :rtype: float
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this License.


        :param size: The size of this License.  # noqa: E501
        :type size: float
        """

        self._size = size

    @property
    def project(self):
        """Gets the project of this License.  # noqa: E501


        :return: The project of this License.  # noqa: E501
        :rtype: Href
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this License.


        :param project: The project of this License.  # noqa: E501
        :type project: Href
        """

        self._project = project

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, License):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, License):
            return True

        return self.to_dict() != other.to_dict()
