# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from metal.types.base_model_ import Model
from metal.types.href import Href
from metal import util


class License(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, id: str=None, license_key: str=None, licensee_product: Href=None, project: Href=None, size: float=None):
        """License - a model defined in OpenAPI

        :param description: The description of this License.
        :param id: The id of this License.
        :param license_key: The license_key of this License.
        :param licensee_product: The licensee_product of this License.
        :param project: The project of this License.
        :param size: The size of this License.
        """
        self.openapi_types = {
            'description': str,
            'id': str,
            'license_key': str,
            'licensee_product': Href,
            'project': Href,
            'size': float
        }

        self.attribute_map = {
            'description': 'description',
            'id': 'id',
            'license_key': 'license_key',
            'licensee_product': 'licensee_product',
            'project': 'project',
            'size': 'size'
        }

        self._description = description
        self._id = id
        self._license_key = license_key
        self._licensee_product = licensee_product
        self._project = project
        self._size = size

    @classmethod
    def from_dict(cls, dikt: dict) -> 'License':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The License of this License.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this License.


        :return: The description of this License.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this License.


        :param description: The description of this License.
        :type description: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this License.


        :return: The id of this License.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this License.


        :param id: The id of this License.
        :type id: str
        """

        self._id = id

    @property
    def license_key(self):
        """Gets the license_key of this License.


        :return: The license_key of this License.
        :rtype: str
        """
        return self._license_key

    @license_key.setter
    def license_key(self, license_key):
        """Sets the license_key of this License.


        :param license_key: The license_key of this License.
        :type license_key: str
        """

        self._license_key = license_key

    @property
    def licensee_product(self):
        """Gets the licensee_product of this License.


        :return: The licensee_product of this License.
        :rtype: Href
        """
        return self._licensee_product

    @licensee_product.setter
    def licensee_product(self, licensee_product):
        """Sets the licensee_product of this License.


        :param licensee_product: The licensee_product of this License.
        :type licensee_product: Href
        """

        self._licensee_product = licensee_product

    @property
    def project(self):
        """Gets the project of this License.


        :return: The project of this License.
        :rtype: Href
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this License.


        :param project: The project of this License.
        :type project: Href
        """

        self._project = project

    @property
    def size(self):
        """Gets the size of this License.


        :return: The size of this License.
        :rtype: float
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this License.


        :param size: The size of this License.
        :type size: float
        """

        self._size = size
