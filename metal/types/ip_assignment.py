# coding: utf-8

"""
    Metal API

    This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>.   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@equinixmetal.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from metal.configuration import Configuration


class IPAssignment(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'address_family': 'int',
        'netmask': 'str',
        'public': 'bool',
        'enabled': 'bool',
        'cidr': 'int',
        'management': 'bool',
        'manageable': 'bool',
        'global_ip': 'bool',
        'assigned_to': 'Href',
        'network': 'str',
        'address': 'str',
        'gateway': 'str',
        'href': 'str',
        'created_at': 'datetime',
        'metro': 'IPAssignmentMetro',
        'parent_block': 'ParentBlock'
    }

    attribute_map = {
        'id': 'id',
        'address_family': 'address_family',
        'netmask': 'netmask',
        'public': 'public',
        'enabled': 'enabled',
        'cidr': 'cidr',
        'management': 'management',
        'manageable': 'manageable',
        'global_ip': 'global_ip',
        'assigned_to': 'assigned_to',
        'network': 'network',
        'address': 'address',
        'gateway': 'gateway',
        'href': 'href',
        'created_at': 'created_at',
        'metro': 'metro',
        'parent_block': 'parent_block'
    }

    def __init__(self, id=None, address_family=None, netmask=None, public=None, enabled=None, cidr=None, management=None, manageable=None, global_ip=None, assigned_to=None, network=None, address=None, gateway=None, href=None, created_at=None, metro=None, parent_block=None, local_vars_configuration=None):  # noqa: E501
        """IPAssignment - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._address_family = None
        self._netmask = None
        self._public = None
        self._enabled = None
        self._cidr = None
        self._management = None
        self._manageable = None
        self._global_ip = None
        self._assigned_to = None
        self._network = None
        self._address = None
        self._gateway = None
        self._href = None
        self._created_at = None
        self._metro = None
        self._parent_block = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if address_family is not None:
            self.address_family = address_family
        if netmask is not None:
            self.netmask = netmask
        if public is not None:
            self.public = public
        if enabled is not None:
            self.enabled = enabled
        if cidr is not None:
            self.cidr = cidr
        if management is not None:
            self.management = management
        if manageable is not None:
            self.manageable = manageable
        if global_ip is not None:
            self.global_ip = global_ip
        if assigned_to is not None:
            self.assigned_to = assigned_to
        if network is not None:
            self.network = network
        if address is not None:
            self.address = address
        if gateway is not None:
            self.gateway = gateway
        if href is not None:
            self.href = href
        if created_at is not None:
            self.created_at = created_at
        if metro is not None:
            self.metro = metro
        if parent_block is not None:
            self.parent_block = parent_block

    @property
    def id(self):
        """Gets the id of this IPAssignment.  # noqa: E501


        :return: The id of this IPAssignment.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IPAssignment.


        :param id: The id of this IPAssignment.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def address_family(self):
        """Gets the address_family of this IPAssignment.  # noqa: E501


        :return: The address_family of this IPAssignment.  # noqa: E501
        :rtype: int
        """
        return self._address_family

    @address_family.setter
    def address_family(self, address_family):
        """Sets the address_family of this IPAssignment.


        :param address_family: The address_family of this IPAssignment.  # noqa: E501
        :type address_family: int
        """

        self._address_family = address_family

    @property
    def netmask(self):
        """Gets the netmask of this IPAssignment.  # noqa: E501


        :return: The netmask of this IPAssignment.  # noqa: E501
        :rtype: str
        """
        return self._netmask

    @netmask.setter
    def netmask(self, netmask):
        """Sets the netmask of this IPAssignment.


        :param netmask: The netmask of this IPAssignment.  # noqa: E501
        :type netmask: str
        """

        self._netmask = netmask

    @property
    def public(self):
        """Gets the public of this IPAssignment.  # noqa: E501


        :return: The public of this IPAssignment.  # noqa: E501
        :rtype: bool
        """
        return self._public

    @public.setter
    def public(self, public):
        """Sets the public of this IPAssignment.


        :param public: The public of this IPAssignment.  # noqa: E501
        :type public: bool
        """

        self._public = public

    @property
    def enabled(self):
        """Gets the enabled of this IPAssignment.  # noqa: E501


        :return: The enabled of this IPAssignment.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this IPAssignment.


        :param enabled: The enabled of this IPAssignment.  # noqa: E501
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def cidr(self):
        """Gets the cidr of this IPAssignment.  # noqa: E501


        :return: The cidr of this IPAssignment.  # noqa: E501
        :rtype: int
        """
        return self._cidr

    @cidr.setter
    def cidr(self, cidr):
        """Sets the cidr of this IPAssignment.


        :param cidr: The cidr of this IPAssignment.  # noqa: E501
        :type cidr: int
        """

        self._cidr = cidr

    @property
    def management(self):
        """Gets the management of this IPAssignment.  # noqa: E501


        :return: The management of this IPAssignment.  # noqa: E501
        :rtype: bool
        """
        return self._management

    @management.setter
    def management(self, management):
        """Sets the management of this IPAssignment.


        :param management: The management of this IPAssignment.  # noqa: E501
        :type management: bool
        """

        self._management = management

    @property
    def manageable(self):
        """Gets the manageable of this IPAssignment.  # noqa: E501


        :return: The manageable of this IPAssignment.  # noqa: E501
        :rtype: bool
        """
        return self._manageable

    @manageable.setter
    def manageable(self, manageable):
        """Sets the manageable of this IPAssignment.


        :param manageable: The manageable of this IPAssignment.  # noqa: E501
        :type manageable: bool
        """

        self._manageable = manageable

    @property
    def global_ip(self):
        """Gets the global_ip of this IPAssignment.  # noqa: E501


        :return: The global_ip of this IPAssignment.  # noqa: E501
        :rtype: bool
        """
        return self._global_ip

    @global_ip.setter
    def global_ip(self, global_ip):
        """Sets the global_ip of this IPAssignment.


        :param global_ip: The global_ip of this IPAssignment.  # noqa: E501
        :type global_ip: bool
        """

        self._global_ip = global_ip

    @property
    def assigned_to(self):
        """Gets the assigned_to of this IPAssignment.  # noqa: E501


        :return: The assigned_to of this IPAssignment.  # noqa: E501
        :rtype: Href
        """
        return self._assigned_to

    @assigned_to.setter
    def assigned_to(self, assigned_to):
        """Sets the assigned_to of this IPAssignment.


        :param assigned_to: The assigned_to of this IPAssignment.  # noqa: E501
        :type assigned_to: Href
        """

        self._assigned_to = assigned_to

    @property
    def network(self):
        """Gets the network of this IPAssignment.  # noqa: E501


        :return: The network of this IPAssignment.  # noqa: E501
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this IPAssignment.


        :param network: The network of this IPAssignment.  # noqa: E501
        :type network: str
        """

        self._network = network

    @property
    def address(self):
        """Gets the address of this IPAssignment.  # noqa: E501


        :return: The address of this IPAssignment.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this IPAssignment.


        :param address: The address of this IPAssignment.  # noqa: E501
        :type address: str
        """

        self._address = address

    @property
    def gateway(self):
        """Gets the gateway of this IPAssignment.  # noqa: E501


        :return: The gateway of this IPAssignment.  # noqa: E501
        :rtype: str
        """
        return self._gateway

    @gateway.setter
    def gateway(self, gateway):
        """Sets the gateway of this IPAssignment.


        :param gateway: The gateway of this IPAssignment.  # noqa: E501
        :type gateway: str
        """

        self._gateway = gateway

    @property
    def href(self):
        """Gets the href of this IPAssignment.  # noqa: E501


        :return: The href of this IPAssignment.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this IPAssignment.


        :param href: The href of this IPAssignment.  # noqa: E501
        :type href: str
        """

        self._href = href

    @property
    def created_at(self):
        """Gets the created_at of this IPAssignment.  # noqa: E501


        :return: The created_at of this IPAssignment.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this IPAssignment.


        :param created_at: The created_at of this IPAssignment.  # noqa: E501
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def metro(self):
        """Gets the metro of this IPAssignment.  # noqa: E501


        :return: The metro of this IPAssignment.  # noqa: E501
        :rtype: IPAssignmentMetro
        """
        return self._metro

    @metro.setter
    def metro(self, metro):
        """Sets the metro of this IPAssignment.


        :param metro: The metro of this IPAssignment.  # noqa: E501
        :type metro: IPAssignmentMetro
        """

        self._metro = metro

    @property
    def parent_block(self):
        """Gets the parent_block of this IPAssignment.  # noqa: E501


        :return: The parent_block of this IPAssignment.  # noqa: E501
        :rtype: ParentBlock
        """
        return self._parent_block

    @parent_block.setter
    def parent_block(self, parent_block):
        """Sets the parent_block of this IPAssignment.


        :param parent_block: The parent_block of this IPAssignment.  # noqa: E501
        :type parent_block: ParentBlock
        """

        self._parent_block = parent_block

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IPAssignment):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IPAssignment):
            return True

        return self.to_dict() != other.to_dict()
