# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from metal.types.base_model_ import Model
from metal import util


class OperatingSystem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, distro: str=None, distro_label: str=None, id: str=None, licensed: bool=None, name: str=None, preinstallable: bool=None, pricing: object=None, provisionable_on: List[str]=None, slug: str=None, version: str=None):
        """OperatingSystem - a model defined in OpenAPI

        :param distro: The distro of this OperatingSystem.
        :param distro_label: The distro_label of this OperatingSystem.
        :param id: The id of this OperatingSystem.
        :param licensed: The licensed of this OperatingSystem.
        :param name: The name of this OperatingSystem.
        :param preinstallable: The preinstallable of this OperatingSystem.
        :param pricing: The pricing of this OperatingSystem.
        :param provisionable_on: The provisionable_on of this OperatingSystem.
        :param slug: The slug of this OperatingSystem.
        :param version: The version of this OperatingSystem.
        """
        self.openapi_types = {
            'distro': str,
            'distro_label': str,
            'id': str,
            'licensed': bool,
            'name': str,
            'preinstallable': bool,
            'pricing': object,
            'provisionable_on': List[str],
            'slug': str,
            'version': str
        }

        self.attribute_map = {
            'distro': 'distro',
            'distro_label': 'distro_label',
            'id': 'id',
            'licensed': 'licensed',
            'name': 'name',
            'preinstallable': 'preinstallable',
            'pricing': 'pricing',
            'provisionable_on': 'provisionable_on',
            'slug': 'slug',
            'version': 'version'
        }

        self._distro = distro
        self._distro_label = distro_label
        self._id = id
        self._licensed = licensed
        self._name = name
        self._preinstallable = preinstallable
        self._pricing = pricing
        self._provisionable_on = provisionable_on
        self._slug = slug
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OperatingSystem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OperatingSystem of this OperatingSystem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def distro(self):
        """Gets the distro of this OperatingSystem.


        :return: The distro of this OperatingSystem.
        :rtype: str
        """
        return self._distro

    @distro.setter
    def distro(self, distro):
        """Sets the distro of this OperatingSystem.


        :param distro: The distro of this OperatingSystem.
        :type distro: str
        """

        self._distro = distro

    @property
    def distro_label(self):
        """Gets the distro_label of this OperatingSystem.


        :return: The distro_label of this OperatingSystem.
        :rtype: str
        """
        return self._distro_label

    @distro_label.setter
    def distro_label(self, distro_label):
        """Sets the distro_label of this OperatingSystem.


        :param distro_label: The distro_label of this OperatingSystem.
        :type distro_label: str
        """

        self._distro_label = distro_label

    @property
    def id(self):
        """Gets the id of this OperatingSystem.


        :return: The id of this OperatingSystem.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OperatingSystem.


        :param id: The id of this OperatingSystem.
        :type id: str
        """

        self._id = id

    @property
    def licensed(self):
        """Gets the licensed of this OperatingSystem.

        Licenced OS is priced according to pricing property

        :return: The licensed of this OperatingSystem.
        :rtype: bool
        """
        return self._licensed

    @licensed.setter
    def licensed(self, licensed):
        """Sets the licensed of this OperatingSystem.

        Licenced OS is priced according to pricing property

        :param licensed: The licensed of this OperatingSystem.
        :type licensed: bool
        """

        self._licensed = licensed

    @property
    def name(self):
        """Gets the name of this OperatingSystem.


        :return: The name of this OperatingSystem.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OperatingSystem.


        :param name: The name of this OperatingSystem.
        :type name: str
        """

        self._name = name

    @property
    def preinstallable(self):
        """Gets the preinstallable of this OperatingSystem.

        Servers can be already preinstalled with OS in order to shorten provision time.

        :return: The preinstallable of this OperatingSystem.
        :rtype: bool
        """
        return self._preinstallable

    @preinstallable.setter
    def preinstallable(self, preinstallable):
        """Sets the preinstallable of this OperatingSystem.

        Servers can be already preinstalled with OS in order to shorten provision time.

        :param preinstallable: The preinstallable of this OperatingSystem.
        :type preinstallable: bool
        """

        self._preinstallable = preinstallable

    @property
    def pricing(self):
        """Gets the pricing of this OperatingSystem.

        This object contains price per time unit and optional multiplier value if licence price depends on hardware plan or components (e.g. number of cores)

        :return: The pricing of this OperatingSystem.
        :rtype: object
        """
        return self._pricing

    @pricing.setter
    def pricing(self, pricing):
        """Sets the pricing of this OperatingSystem.

        This object contains price per time unit and optional multiplier value if licence price depends on hardware plan or components (e.g. number of cores)

        :param pricing: The pricing of this OperatingSystem.
        :type pricing: object
        """

        self._pricing = pricing

    @property
    def provisionable_on(self):
        """Gets the provisionable_on of this OperatingSystem.


        :return: The provisionable_on of this OperatingSystem.
        :rtype: List[str]
        """
        return self._provisionable_on

    @provisionable_on.setter
    def provisionable_on(self, provisionable_on):
        """Sets the provisionable_on of this OperatingSystem.


        :param provisionable_on: The provisionable_on of this OperatingSystem.
        :type provisionable_on: List[str]
        """

        self._provisionable_on = provisionable_on

    @property
    def slug(self):
        """Gets the slug of this OperatingSystem.


        :return: The slug of this OperatingSystem.
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this OperatingSystem.


        :param slug: The slug of this OperatingSystem.
        :type slug: str
        """

        self._slug = slug

    @property
    def version(self):
        """Gets the version of this OperatingSystem.


        :return: The version of this OperatingSystem.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this OperatingSystem.


        :param version: The version of this OperatingSystem.
        :type version: str
        """

        self._version = version
