# coding: utf-8

"""
    Metal API

    This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>.   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@equinixmetal.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from metal.configuration import Configuration


class OperatingSystem(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'slug': 'str',
        'name': 'str',
        'distro': 'str',
        'version': 'str',
        'preinstallable': 'bool',
        'provisionable_on': 'list[str]',
        'pricing': 'object',
        'licensed': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'slug': 'slug',
        'name': 'name',
        'distro': 'distro',
        'version': 'version',
        'preinstallable': 'preinstallable',
        'provisionable_on': 'provisionable_on',
        'pricing': 'pricing',
        'licensed': 'licensed'
    }

    def __init__(self, id=None, slug=None, name=None, distro=None, version=None, preinstallable=None, provisionable_on=None, pricing=None, licensed=None, local_vars_configuration=None):  # noqa: E501
        """OperatingSystem - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._slug = None
        self._name = None
        self._distro = None
        self._version = None
        self._preinstallable = None
        self._provisionable_on = None
        self._pricing = None
        self._licensed = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if slug is not None:
            self.slug = slug
        if name is not None:
            self.name = name
        if distro is not None:
            self.distro = distro
        if version is not None:
            self.version = version
        if preinstallable is not None:
            self.preinstallable = preinstallable
        if provisionable_on is not None:
            self.provisionable_on = provisionable_on
        if pricing is not None:
            self.pricing = pricing
        if licensed is not None:
            self.licensed = licensed

    @property
    def id(self):
        """Gets the id of this OperatingSystem.  # noqa: E501


        :return: The id of this OperatingSystem.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OperatingSystem.


        :param id: The id of this OperatingSystem.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def slug(self):
        """Gets the slug of this OperatingSystem.  # noqa: E501


        :return: The slug of this OperatingSystem.  # noqa: E501
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this OperatingSystem.


        :param slug: The slug of this OperatingSystem.  # noqa: E501
        :type slug: str
        """

        self._slug = slug

    @property
    def name(self):
        """Gets the name of this OperatingSystem.  # noqa: E501


        :return: The name of this OperatingSystem.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OperatingSystem.


        :param name: The name of this OperatingSystem.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def distro(self):
        """Gets the distro of this OperatingSystem.  # noqa: E501


        :return: The distro of this OperatingSystem.  # noqa: E501
        :rtype: str
        """
        return self._distro

    @distro.setter
    def distro(self, distro):
        """Sets the distro of this OperatingSystem.


        :param distro: The distro of this OperatingSystem.  # noqa: E501
        :type distro: str
        """

        self._distro = distro

    @property
    def version(self):
        """Gets the version of this OperatingSystem.  # noqa: E501


        :return: The version of this OperatingSystem.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this OperatingSystem.


        :param version: The version of this OperatingSystem.  # noqa: E501
        :type version: str
        """

        self._version = version

    @property
    def preinstallable(self):
        """Gets the preinstallable of this OperatingSystem.  # noqa: E501

        Servers can be already preinstalled with OS in order to shorten provision time.  # noqa: E501

        :return: The preinstallable of this OperatingSystem.  # noqa: E501
        :rtype: bool
        """
        return self._preinstallable

    @preinstallable.setter
    def preinstallable(self, preinstallable):
        """Sets the preinstallable of this OperatingSystem.

        Servers can be already preinstalled with OS in order to shorten provision time.  # noqa: E501

        :param preinstallable: The preinstallable of this OperatingSystem.  # noqa: E501
        :type preinstallable: bool
        """

        self._preinstallable = preinstallable

    @property
    def provisionable_on(self):
        """Gets the provisionable_on of this OperatingSystem.  # noqa: E501


        :return: The provisionable_on of this OperatingSystem.  # noqa: E501
        :rtype: list[str]
        """
        return self._provisionable_on

    @provisionable_on.setter
    def provisionable_on(self, provisionable_on):
        """Sets the provisionable_on of this OperatingSystem.


        :param provisionable_on: The provisionable_on of this OperatingSystem.  # noqa: E501
        :type provisionable_on: list[str]
        """

        self._provisionable_on = provisionable_on

    @property
    def pricing(self):
        """Gets the pricing of this OperatingSystem.  # noqa: E501

        This object contains price per time unit and optional multiplier value if licence price depends on hardware plan or components (e.g. number of cores)  # noqa: E501

        :return: The pricing of this OperatingSystem.  # noqa: E501
        :rtype: object
        """
        return self._pricing

    @pricing.setter
    def pricing(self, pricing):
        """Sets the pricing of this OperatingSystem.

        This object contains price per time unit and optional multiplier value if licence price depends on hardware plan or components (e.g. number of cores)  # noqa: E501

        :param pricing: The pricing of this OperatingSystem.  # noqa: E501
        :type pricing: object
        """

        self._pricing = pricing

    @property
    def licensed(self):
        """Gets the licensed of this OperatingSystem.  # noqa: E501

        Licenced OS is priced according to pricing property  # noqa: E501

        :return: The licensed of this OperatingSystem.  # noqa: E501
        :rtype: bool
        """
        return self._licensed

    @licensed.setter
    def licensed(self, licensed):
        """Sets the licensed of this OperatingSystem.

        Licenced OS is priced according to pricing property  # noqa: E501

        :param licensed: The licensed of this OperatingSystem.  # noqa: E501
        :type licensed: bool
        """

        self._licensed = licensed

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OperatingSystem):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OperatingSystem):
            return True

        return self.to_dict() != other.to_dict()
