# coding: utf-8

"""
    Metal API

    This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>.   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@equinixmetal.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from metal.configuration import Configuration


class Organization(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'name': 'str',
        'description': 'str',
        'website': 'str',
        'twitter': 'str',
        'logo': 'file',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'projects': 'list[Href]',
        'members': 'list[Href]',
        'memberships': 'list[Href]',
        'address': 'Address',
        'billing_address': 'Address',
        'entitlement': 'Entitlement',
        'terms': 'int',
        'credit_amount': 'float',
        'customdata': 'object',
        'enforce_2fa_at': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'website': 'website',
        'twitter': 'twitter',
        'logo': 'logo',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'projects': 'projects',
        'members': 'members',
        'memberships': 'memberships',
        'address': 'address',
        'billing_address': 'billing_address',
        'entitlement': 'entitlement',
        'terms': 'terms',
        'credit_amount': 'credit_amount',
        'customdata': 'customdata',
        'enforce_2fa_at': 'enforce_2fa_at'
    }

    def __init__(self, id=None, name=None, description=None, website=None, twitter=None, logo=None, created_at=None, updated_at=None, projects=None, members=None, memberships=None, address=None, billing_address=None, entitlement=None, terms=None, credit_amount=None, customdata=None, enforce_2fa_at=None, local_vars_configuration=None):  # noqa: E501
        """Organization - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._description = None
        self._website = None
        self._twitter = None
        self._logo = None
        self._created_at = None
        self._updated_at = None
        self._projects = None
        self._members = None
        self._memberships = None
        self._address = None
        self._billing_address = None
        self._entitlement = None
        self._terms = None
        self._credit_amount = None
        self._customdata = None
        self._enforce_2fa_at = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if website is not None:
            self.website = website
        if twitter is not None:
            self.twitter = twitter
        if logo is not None:
            self.logo = logo
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if projects is not None:
            self.projects = projects
        if members is not None:
            self.members = members
        if memberships is not None:
            self.memberships = memberships
        if address is not None:
            self.address = address
        if billing_address is not None:
            self.billing_address = billing_address
        if entitlement is not None:
            self.entitlement = entitlement
        if terms is not None:
            self.terms = terms
        if credit_amount is not None:
            self.credit_amount = credit_amount
        if customdata is not None:
            self.customdata = customdata
        if enforce_2fa_at is not None:
            self.enforce_2fa_at = enforce_2fa_at

    @property
    def id(self):
        """Gets the id of this Organization.  # noqa: E501


        :return: The id of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Organization.


        :param id: The id of this Organization.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Organization.  # noqa: E501


        :return: The name of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Organization.


        :param name: The name of this Organization.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this Organization.  # noqa: E501


        :return: The description of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Organization.


        :param description: The description of this Organization.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def website(self):
        """Gets the website of this Organization.  # noqa: E501


        :return: The website of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this Organization.


        :param website: The website of this Organization.  # noqa: E501
        :type website: str
        """

        self._website = website

    @property
    def twitter(self):
        """Gets the twitter of this Organization.  # noqa: E501


        :return: The twitter of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._twitter

    @twitter.setter
    def twitter(self, twitter):
        """Sets the twitter of this Organization.


        :param twitter: The twitter of this Organization.  # noqa: E501
        :type twitter: str
        """

        self._twitter = twitter

    @property
    def logo(self):
        """Gets the logo of this Organization.  # noqa: E501


        :return: The logo of this Organization.  # noqa: E501
        :rtype: file
        """
        return self._logo

    @logo.setter
    def logo(self, logo):
        """Sets the logo of this Organization.


        :param logo: The logo of this Organization.  # noqa: E501
        :type logo: file
        """

        self._logo = logo

    @property
    def created_at(self):
        """Gets the created_at of this Organization.  # noqa: E501


        :return: The created_at of this Organization.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Organization.


        :param created_at: The created_at of this Organization.  # noqa: E501
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Organization.  # noqa: E501


        :return: The updated_at of this Organization.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Organization.


        :param updated_at: The updated_at of this Organization.  # noqa: E501
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def projects(self):
        """Gets the projects of this Organization.  # noqa: E501


        :return: The projects of this Organization.  # noqa: E501
        :rtype: list[Href]
        """
        return self._projects

    @projects.setter
    def projects(self, projects):
        """Sets the projects of this Organization.


        :param projects: The projects of this Organization.  # noqa: E501
        :type projects: list[Href]
        """

        self._projects = projects

    @property
    def members(self):
        """Gets the members of this Organization.  # noqa: E501


        :return: The members of this Organization.  # noqa: E501
        :rtype: list[Href]
        """
        return self._members

    @members.setter
    def members(self, members):
        """Sets the members of this Organization.


        :param members: The members of this Organization.  # noqa: E501
        :type members: list[Href]
        """

        self._members = members

    @property
    def memberships(self):
        """Gets the memberships of this Organization.  # noqa: E501


        :return: The memberships of this Organization.  # noqa: E501
        :rtype: list[Href]
        """
        return self._memberships

    @memberships.setter
    def memberships(self, memberships):
        """Sets the memberships of this Organization.


        :param memberships: The memberships of this Organization.  # noqa: E501
        :type memberships: list[Href]
        """

        self._memberships = memberships

    @property
    def address(self):
        """Gets the address of this Organization.  # noqa: E501


        :return: The address of this Organization.  # noqa: E501
        :rtype: Address
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Organization.


        :param address: The address of this Organization.  # noqa: E501
        :type address: Address
        """

        self._address = address

    @property
    def billing_address(self):
        """Gets the billing_address of this Organization.  # noqa: E501


        :return: The billing_address of this Organization.  # noqa: E501
        :rtype: Address
        """
        return self._billing_address

    @billing_address.setter
    def billing_address(self, billing_address):
        """Sets the billing_address of this Organization.


        :param billing_address: The billing_address of this Organization.  # noqa: E501
        :type billing_address: Address
        """

        self._billing_address = billing_address

    @property
    def entitlement(self):
        """Gets the entitlement of this Organization.  # noqa: E501


        :return: The entitlement of this Organization.  # noqa: E501
        :rtype: Entitlement
        """
        return self._entitlement

    @entitlement.setter
    def entitlement(self, entitlement):
        """Sets the entitlement of this Organization.


        :param entitlement: The entitlement of this Organization.  # noqa: E501
        :type entitlement: Entitlement
        """

        self._entitlement = entitlement

    @property
    def terms(self):
        """Gets the terms of this Organization.  # noqa: E501


        :return: The terms of this Organization.  # noqa: E501
        :rtype: int
        """
        return self._terms

    @terms.setter
    def terms(self, terms):
        """Sets the terms of this Organization.


        :param terms: The terms of this Organization.  # noqa: E501
        :type terms: int
        """

        self._terms = terms

    @property
    def credit_amount(self):
        """Gets the credit_amount of this Organization.  # noqa: E501


        :return: The credit_amount of this Organization.  # noqa: E501
        :rtype: float
        """
        return self._credit_amount

    @credit_amount.setter
    def credit_amount(self, credit_amount):
        """Sets the credit_amount of this Organization.


        :param credit_amount: The credit_amount of this Organization.  # noqa: E501
        :type credit_amount: float
        """

        self._credit_amount = credit_amount

    @property
    def customdata(self):
        """Gets the customdata of this Organization.  # noqa: E501


        :return: The customdata of this Organization.  # noqa: E501
        :rtype: object
        """
        return self._customdata

    @customdata.setter
    def customdata(self, customdata):
        """Sets the customdata of this Organization.


        :param customdata: The customdata of this Organization.  # noqa: E501
        :type customdata: object
        """

        self._customdata = customdata

    @property
    def enforce_2fa_at(self):
        """Gets the enforce_2fa_at of this Organization.  # noqa: E501

        Force to all members to have enabled the two factor authentication after that date, unless the value is null  # noqa: E501

        :return: The enforce_2fa_at of this Organization.  # noqa: E501
        :rtype: datetime
        """
        return self._enforce_2fa_at

    @enforce_2fa_at.setter
    def enforce_2fa_at(self, enforce_2fa_at):
        """Sets the enforce_2fa_at of this Organization.

        Force to all members to have enabled the two factor authentication after that date, unless the value is null  # noqa: E501

        :param enforce_2fa_at: The enforce_2fa_at of this Organization.  # noqa: E501
        :type enforce_2fa_at: datetime
        """

        self._enforce_2fa_at = enforce_2fa_at

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Organization):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Organization):
            return True

        return self.to_dict() != other.to_dict()
