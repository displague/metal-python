# coding: utf-8

"""
    Metal API

    This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>.   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@equinixmetal.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from metal.configuration import Configuration


class SSHKeyCreateInput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'label': 'str',
        'key': 'str',
        'instances_ids': 'list[str]'
    }

    attribute_map = {
        'label': 'label',
        'key': 'key',
        'instances_ids': 'instances_ids'
    }

    def __init__(self, label=None, key=None, instances_ids=None, local_vars_configuration=None):  # noqa: E501
        """SSHKeyCreateInput - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._label = None
        self._key = None
        self._instances_ids = None
        self.discriminator = None

        if label is not None:
            self.label = label
        if key is not None:
            self.key = key
        if instances_ids is not None:
            self.instances_ids = instances_ids

    @property
    def label(self):
        """Gets the label of this SSHKeyCreateInput.  # noqa: E501


        :return: The label of this SSHKeyCreateInput.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this SSHKeyCreateInput.


        :param label: The label of this SSHKeyCreateInput.  # noqa: E501
        :type label: str
        """

        self._label = label

    @property
    def key(self):
        """Gets the key of this SSHKeyCreateInput.  # noqa: E501


        :return: The key of this SSHKeyCreateInput.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this SSHKeyCreateInput.


        :param key: The key of this SSHKeyCreateInput.  # noqa: E501
        :type key: str
        """

        self._key = key

    @property
    def instances_ids(self):
        """Gets the instances_ids of this SSHKeyCreateInput.  # noqa: E501

        List of instance UUIDs to associate SSH key with, when empty array is sent all instances belonging       to entity will be included  # noqa: E501

        :return: The instances_ids of this SSHKeyCreateInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._instances_ids

    @instances_ids.setter
    def instances_ids(self, instances_ids):
        """Sets the instances_ids of this SSHKeyCreateInput.

        List of instance UUIDs to associate SSH key with, when empty array is sent all instances belonging       to entity will be included  # noqa: E501

        :param instances_ids: The instances_ids of this SSHKeyCreateInput.  # noqa: E501
        :type instances_ids: list[str]
        """

        self._instances_ids = instances_ids

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SSHKeyCreateInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SSHKeyCreateInput):
            return True

        return self.to_dict() != other.to_dict()
