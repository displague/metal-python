# coding: utf-8

"""
    Metal API

    This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>.   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@equinixmetal.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from metal.configuration import Configuration


class CreateSelfServiceReservationRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'start_date': 'datetime',
        'period': 'CreateSelfServiceReservationRequestPeriod',
        'notes': 'str',
        'item': 'list[SelfServiceReservationItemRequest]'
    }

    attribute_map = {
        'start_date': 'start_date',
        'period': 'period',
        'notes': 'notes',
        'item': 'item'
    }

    def __init__(self, start_date=None, period=None, notes=None, item=None, local_vars_configuration=None):  # noqa: E501
        """CreateSelfServiceReservationRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._start_date = None
        self._period = None
        self._notes = None
        self._item = None
        self.discriminator = None

        if start_date is not None:
            self.start_date = start_date
        if period is not None:
            self.period = period
        if notes is not None:
            self.notes = notes
        if item is not None:
            self.item = item

    @property
    def start_date(self):
        """Gets the start_date of this CreateSelfServiceReservationRequest.  # noqa: E501


        :return: The start_date of this CreateSelfServiceReservationRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this CreateSelfServiceReservationRequest.


        :param start_date: The start_date of this CreateSelfServiceReservationRequest.  # noqa: E501
        :type start_date: datetime
        """

        self._start_date = start_date

    @property
    def period(self):
        """Gets the period of this CreateSelfServiceReservationRequest.  # noqa: E501


        :return: The period of this CreateSelfServiceReservationRequest.  # noqa: E501
        :rtype: CreateSelfServiceReservationRequestPeriod
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this CreateSelfServiceReservationRequest.


        :param period: The period of this CreateSelfServiceReservationRequest.  # noqa: E501
        :type period: CreateSelfServiceReservationRequestPeriod
        """

        self._period = period

    @property
    def notes(self):
        """Gets the notes of this CreateSelfServiceReservationRequest.  # noqa: E501


        :return: The notes of this CreateSelfServiceReservationRequest.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this CreateSelfServiceReservationRequest.


        :param notes: The notes of this CreateSelfServiceReservationRequest.  # noqa: E501
        :type notes: str
        """

        self._notes = notes

    @property
    def item(self):
        """Gets the item of this CreateSelfServiceReservationRequest.  # noqa: E501


        :return: The item of this CreateSelfServiceReservationRequest.  # noqa: E501
        :rtype: list[SelfServiceReservationItemRequest]
        """
        return self._item

    @item.setter
    def item(self, item):
        """Sets the item of this CreateSelfServiceReservationRequest.


        :param item: The item of this CreateSelfServiceReservationRequest.  # noqa: E501
        :type item: list[SelfServiceReservationItemRequest]
        """

        self._item = item

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateSelfServiceReservationRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateSelfServiceReservationRequest):
            return True

        return self.to_dict() != other.to_dict()
