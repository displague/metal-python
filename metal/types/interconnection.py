# coding: utf-8

"""
    Metal API

    This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>.   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@equinixmetal.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from metal.configuration import Configuration


class Interconnection(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'name': 'str',
        'description': 'str',
        'contact_email': 'str',
        'status': 'str',
        'type': 'str',
        'redundancy': 'str',
        'speed': 'int',
        'tags': 'list[str]',
        'ports': 'list[InterconnectionPort]',
        'facility': 'Href',
        'organization': 'Href',
        'metro': 'InterconnectionMetro',
        'mode': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'contact_email': 'contact_email',
        'status': 'status',
        'type': 'type',
        'redundancy': 'redundancy',
        'speed': 'speed',
        'tags': 'tags',
        'ports': 'ports',
        'facility': 'facility',
        'organization': 'organization',
        'metro': 'metro',
        'mode': 'mode'
    }

    def __init__(self, id=None, name=None, description=None, contact_email=None, status=None, type=None, redundancy=None, speed=None, tags=None, ports=None, facility=None, organization=None, metro=None, mode=None, local_vars_configuration=None):  # noqa: E501
        """Interconnection - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._description = None
        self._contact_email = None
        self._status = None
        self._type = None
        self._redundancy = None
        self._speed = None
        self._tags = None
        self._ports = None
        self._facility = None
        self._organization = None
        self._metro = None
        self._mode = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if contact_email is not None:
            self.contact_email = contact_email
        if status is not None:
            self.status = status
        if type is not None:
            self.type = type
        if redundancy is not None:
            self.redundancy = redundancy
        if speed is not None:
            self.speed = speed
        if tags is not None:
            self.tags = tags
        if ports is not None:
            self.ports = ports
        if facility is not None:
            self.facility = facility
        if organization is not None:
            self.organization = organization
        if metro is not None:
            self.metro = metro
        if mode is not None:
            self.mode = mode

    @property
    def id(self):
        """Gets the id of this Interconnection.  # noqa: E501


        :return: The id of this Interconnection.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Interconnection.


        :param id: The id of this Interconnection.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Interconnection.  # noqa: E501


        :return: The name of this Interconnection.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Interconnection.


        :param name: The name of this Interconnection.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this Interconnection.  # noqa: E501


        :return: The description of this Interconnection.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Interconnection.


        :param description: The description of this Interconnection.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def contact_email(self):
        """Gets the contact_email of this Interconnection.  # noqa: E501


        :return: The contact_email of this Interconnection.  # noqa: E501
        :rtype: str
        """
        return self._contact_email

    @contact_email.setter
    def contact_email(self, contact_email):
        """Sets the contact_email of this Interconnection.


        :param contact_email: The contact_email of this Interconnection.  # noqa: E501
        :type contact_email: str
        """

        self._contact_email = contact_email

    @property
    def status(self):
        """Gets the status of this Interconnection.  # noqa: E501


        :return: The status of this Interconnection.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Interconnection.


        :param status: The status of this Interconnection.  # noqa: E501
        :type status: str
        """

        self._status = status

    @property
    def type(self):
        """Gets the type of this Interconnection.  # noqa: E501


        :return: The type of this Interconnection.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Interconnection.


        :param type: The type of this Interconnection.  # noqa: E501
        :type type: str
        """

        self._type = type

    @property
    def redundancy(self):
        """Gets the redundancy of this Interconnection.  # noqa: E501


        :return: The redundancy of this Interconnection.  # noqa: E501
        :rtype: str
        """
        return self._redundancy

    @redundancy.setter
    def redundancy(self, redundancy):
        """Sets the redundancy of this Interconnection.


        :param redundancy: The redundancy of this Interconnection.  # noqa: E501
        :type redundancy: str
        """

        self._redundancy = redundancy

    @property
    def speed(self):
        """Gets the speed of this Interconnection.  # noqa: E501

        The connection's speed in bps.  # noqa: E501

        :return: The speed of this Interconnection.  # noqa: E501
        :rtype: int
        """
        return self._speed

    @speed.setter
    def speed(self, speed):
        """Sets the speed of this Interconnection.

        The connection's speed in bps.  # noqa: E501

        :param speed: The speed of this Interconnection.  # noqa: E501
        :type speed: int
        """

        self._speed = speed

    @property
    def tags(self):
        """Gets the tags of this Interconnection.  # noqa: E501


        :return: The tags of this Interconnection.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Interconnection.


        :param tags: The tags of this Interconnection.  # noqa: E501
        :type tags: list[str]
        """

        self._tags = tags

    @property
    def ports(self):
        """Gets the ports of this Interconnection.  # noqa: E501


        :return: The ports of this Interconnection.  # noqa: E501
        :rtype: list[InterconnectionPort]
        """
        return self._ports

    @ports.setter
    def ports(self, ports):
        """Sets the ports of this Interconnection.


        :param ports: The ports of this Interconnection.  # noqa: E501
        :type ports: list[InterconnectionPort]
        """

        self._ports = ports

    @property
    def facility(self):
        """Gets the facility of this Interconnection.  # noqa: E501


        :return: The facility of this Interconnection.  # noqa: E501
        :rtype: Href
        """
        return self._facility

    @facility.setter
    def facility(self, facility):
        """Sets the facility of this Interconnection.


        :param facility: The facility of this Interconnection.  # noqa: E501
        :type facility: Href
        """

        self._facility = facility

    @property
    def organization(self):
        """Gets the organization of this Interconnection.  # noqa: E501


        :return: The organization of this Interconnection.  # noqa: E501
        :rtype: Href
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this Interconnection.


        :param organization: The organization of this Interconnection.  # noqa: E501
        :type organization: Href
        """

        self._organization = organization

    @property
    def metro(self):
        """Gets the metro of this Interconnection.  # noqa: E501


        :return: The metro of this Interconnection.  # noqa: E501
        :rtype: InterconnectionMetro
        """
        return self._metro

    @metro.setter
    def metro(self, metro):
        """Sets the metro of this Interconnection.


        :param metro: The metro of this Interconnection.  # noqa: E501
        :type metro: InterconnectionMetro
        """

        self._metro = metro

    @property
    def mode(self):
        """Gets the mode of this Interconnection.  # noqa: E501

        The mode of the connection (only relevant to dedicated connections). Shared connections won't have this field. Can be either 'standard' or 'tunnel'.   The default mode of a dedicated connection is 'standard'. The mode can only be changed when there are no associated virtual circuits on the connection.   In tunnel mode, an 802.1q tunnel is added to a port to send/receive double tagged packets from server instances.  # noqa: E501

        :return: The mode of this Interconnection.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this Interconnection.

        The mode of the connection (only relevant to dedicated connections). Shared connections won't have this field. Can be either 'standard' or 'tunnel'.   The default mode of a dedicated connection is 'standard'. The mode can only be changed when there are no associated virtual circuits on the connection.   In tunnel mode, an 802.1q tunnel is added to a port to send/receive double tagged packets from server instances.  # noqa: E501

        :param mode: The mode of this Interconnection.  # noqa: E501
        :type mode: str
        """
        allowed_values = ["standard", "tunnel"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and mode not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"  # noqa: E501
                .format(mode, allowed_values)
            )

        self._mode = mode

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Interconnection):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Interconnection):
            return True

        return self.to_dict() != other.to_dict()
