# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from metal.types.base_model_ import Model
from metal.types.fabric_service_token import FabricServiceToken
from metal.types.href import Href
from metal.types.interconnection_metro import InterconnectionMetro
from metal.types.interconnection_port import InterconnectionPort
from metal import util


class Interconnection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contact_email: str=None, description: str=None, facility: Href=None, id: str=None, metro: InterconnectionMetro=None, mode: str=None, name: str=None, organization: Href=None, ports: List[InterconnectionPort]=None, redundancy: str=None, service_tokens: List[FabricServiceToken]=None, speed: int=None, status: str=None, tags: List[str]=None, token: str=None, type: str=None, created_at: datetime=None, updated_at: datetime=None, requested_by: Href=None):
        """Interconnection - a model defined in OpenAPI

        :param contact_email: The contact_email of this Interconnection.
        :param description: The description of this Interconnection.
        :param facility: The facility of this Interconnection.
        :param id: The id of this Interconnection.
        :param metro: The metro of this Interconnection.
        :param mode: The mode of this Interconnection.
        :param name: The name of this Interconnection.
        :param organization: The organization of this Interconnection.
        :param ports: The ports of this Interconnection.
        :param redundancy: The redundancy of this Interconnection.
        :param service_tokens: The service_tokens of this Interconnection.
        :param speed: The speed of this Interconnection.
        :param status: The status of this Interconnection.
        :param tags: The tags of this Interconnection.
        :param token: The token of this Interconnection.
        :param type: The type of this Interconnection.
        :param created_at: The created_at of this Interconnection.
        :param updated_at: The updated_at of this Interconnection.
        :param requested_by: The requested_by of this Interconnection.
        """
        self.openapi_types = {
            'contact_email': str,
            'description': str,
            'facility': Href,
            'id': str,
            'metro': InterconnectionMetro,
            'mode': str,
            'name': str,
            'organization': Href,
            'ports': List[InterconnectionPort],
            'redundancy': str,
            'service_tokens': List[FabricServiceToken],
            'speed': int,
            'status': str,
            'tags': List[str],
            'token': str,
            'type': str,
            'created_at': datetime,
            'updated_at': datetime,
            'requested_by': Href
        }

        self.attribute_map = {
            'contact_email': 'contact_email',
            'description': 'description',
            'facility': 'facility',
            'id': 'id',
            'metro': 'metro',
            'mode': 'mode',
            'name': 'name',
            'organization': 'organization',
            'ports': 'ports',
            'redundancy': 'redundancy',
            'service_tokens': 'service_tokens',
            'speed': 'speed',
            'status': 'status',
            'tags': 'tags',
            'token': 'token',
            'type': 'type',
            'created_at': 'created_at',
            'updated_at': 'updated_at',
            'requested_by': 'requested_by'
        }

        self._contact_email = contact_email
        self._description = description
        self._facility = facility
        self._id = id
        self._metro = metro
        self._mode = mode
        self._name = name
        self._organization = organization
        self._ports = ports
        self._redundancy = redundancy
        self._service_tokens = service_tokens
        self._speed = speed
        self._status = status
        self._tags = tags
        self._token = token
        self._type = type
        self._created_at = created_at
        self._updated_at = updated_at
        self._requested_by = requested_by

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Interconnection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Interconnection of this Interconnection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contact_email(self):
        """Gets the contact_email of this Interconnection.


        :return: The contact_email of this Interconnection.
        :rtype: str
        """
        return self._contact_email

    @contact_email.setter
    def contact_email(self, contact_email):
        """Sets the contact_email of this Interconnection.


        :param contact_email: The contact_email of this Interconnection.
        :type contact_email: str
        """

        self._contact_email = contact_email

    @property
    def description(self):
        """Gets the description of this Interconnection.


        :return: The description of this Interconnection.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Interconnection.


        :param description: The description of this Interconnection.
        :type description: str
        """

        self._description = description

    @property
    def facility(self):
        """Gets the facility of this Interconnection.


        :return: The facility of this Interconnection.
        :rtype: Href
        """
        return self._facility

    @facility.setter
    def facility(self, facility):
        """Sets the facility of this Interconnection.


        :param facility: The facility of this Interconnection.
        :type facility: Href
        """

        self._facility = facility

    @property
    def id(self):
        """Gets the id of this Interconnection.


        :return: The id of this Interconnection.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Interconnection.


        :param id: The id of this Interconnection.
        :type id: str
        """

        self._id = id

    @property
    def metro(self):
        """Gets the metro of this Interconnection.


        :return: The metro of this Interconnection.
        :rtype: InterconnectionMetro
        """
        return self._metro

    @metro.setter
    def metro(self, metro):
        """Sets the metro of this Interconnection.


        :param metro: The metro of this Interconnection.
        :type metro: InterconnectionMetro
        """

        self._metro = metro

    @property
    def mode(self):
        """Gets the mode of this Interconnection.

        The mode of the interconnection (only relevant to Dedicated Ports). Shared connections won't have this field. Can be either 'standard' or 'tunnel'.   The default mode of an interconnection on a Dedicated Port is 'standard'. The mode can only be changed when there are no associated virtual circuits on the interconnection.   In tunnel mode, an 802.1q tunnel is added to a port to send/receive double tagged packets from server instances.

        :return: The mode of this Interconnection.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this Interconnection.

        The mode of the interconnection (only relevant to Dedicated Ports). Shared connections won't have this field. Can be either 'standard' or 'tunnel'.   The default mode of an interconnection on a Dedicated Port is 'standard'. The mode can only be changed when there are no associated virtual circuits on the interconnection.   In tunnel mode, an 802.1q tunnel is added to a port to send/receive double tagged packets from server instances.

        :param mode: The mode of this Interconnection.
        :type mode: str
        """
        allowed_values = ["standard", "tunnel"]  # noqa: E501
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"
                .format(mode, allowed_values)
            )

        self._mode = mode

    @property
    def name(self):
        """Gets the name of this Interconnection.


        :return: The name of this Interconnection.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Interconnection.


        :param name: The name of this Interconnection.
        :type name: str
        """

        self._name = name

    @property
    def organization(self):
        """Gets the organization of this Interconnection.


        :return: The organization of this Interconnection.
        :rtype: Href
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this Interconnection.


        :param organization: The organization of this Interconnection.
        :type organization: Href
        """

        self._organization = organization

    @property
    def ports(self):
        """Gets the ports of this Interconnection.

        For Fabric VCs, these represent Virtual Port(s) created for the interconnection. For dedicated interconnections, these represent the Dedicated Port(s).

        :return: The ports of this Interconnection.
        :rtype: List[InterconnectionPort]
        """
        return self._ports

    @ports.setter
    def ports(self, ports):
        """Sets the ports of this Interconnection.

        For Fabric VCs, these represent Virtual Port(s) created for the interconnection. For dedicated interconnections, these represent the Dedicated Port(s).

        :param ports: The ports of this Interconnection.
        :type ports: List[InterconnectionPort]
        """

        self._ports = ports

    @property
    def redundancy(self):
        """Gets the redundancy of this Interconnection.

        Either 'primary', meaning a single interconnection, or 'redundant', meaning a redundant interconnection.

        :return: The redundancy of this Interconnection.
        :rtype: str
        """
        return self._redundancy

    @redundancy.setter
    def redundancy(self, redundancy):
        """Sets the redundancy of this Interconnection.

        Either 'primary', meaning a single interconnection, or 'redundant', meaning a redundant interconnection.

        :param redundancy: The redundancy of this Interconnection.
        :type redundancy: str
        """
        allowed_values = ["primary", "redundant"]  # noqa: E501
        if redundancy not in allowed_values:
            raise ValueError(
                "Invalid value for `redundancy` ({0}), must be one of {1}"
                .format(redundancy, allowed_values)
            )

        self._redundancy = redundancy

    @property
    def service_tokens(self):
        """Gets the service_tokens of this Interconnection.

        For Fabric VCs (Metal Billed), this will show details of the A-Side service tokens issued for the interconnection. For Fabric VCs (Fabric Billed), this will show the details of the Z-Side service tokens issued for the interconnection. Dedicated interconnections will not have any service tokens issued. There will be one per interconnection, so for redundant interconnections, there should be two service tokens issued.

        :return: The service_tokens of this Interconnection.
        :rtype: List[FabricServiceToken]
        """
        return self._service_tokens

    @service_tokens.setter
    def service_tokens(self, service_tokens):
        """Sets the service_tokens of this Interconnection.

        For Fabric VCs (Metal Billed), this will show details of the A-Side service tokens issued for the interconnection. For Fabric VCs (Fabric Billed), this will show the details of the Z-Side service tokens issued for the interconnection. Dedicated interconnections will not have any service tokens issued. There will be one per interconnection, so for redundant interconnections, there should be two service tokens issued.

        :param service_tokens: The service_tokens of this Interconnection.
        :type service_tokens: List[FabricServiceToken]
        """

        self._service_tokens = service_tokens

    @property
    def speed(self):
        """Gets the speed of this Interconnection.

        For interconnections on Dedicated Ports and shared connections, this represents the interconnection's speed in bps. For Fabric VCs, this field refers to the maximum speed of the interconnection in bps. This value will default to 10Gbps for Fabric VCs (Fabric Billed).

        :return: The speed of this Interconnection.
        :rtype: int
        """
        return self._speed

    @speed.setter
    def speed(self, speed):
        """Sets the speed of this Interconnection.

        For interconnections on Dedicated Ports and shared connections, this represents the interconnection's speed in bps. For Fabric VCs, this field refers to the maximum speed of the interconnection in bps. This value will default to 10Gbps for Fabric VCs (Fabric Billed).

        :param speed: The speed of this Interconnection.
        :type speed: int
        """

        self._speed = speed

    @property
    def status(self):
        """Gets the status of this Interconnection.


        :return: The status of this Interconnection.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Interconnection.


        :param status: The status of this Interconnection.
        :type status: str
        """

        self._status = status

    @property
    def tags(self):
        """Gets the tags of this Interconnection.


        :return: The tags of this Interconnection.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Interconnection.


        :param tags: The tags of this Interconnection.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def token(self):
        """Gets the token of this Interconnection.

        This token is used for shared interconnections to be used as the Fabric Token. This field is entirely deprecated.

        :return: The token of this Interconnection.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this Interconnection.

        This token is used for shared interconnections to be used as the Fabric Token. This field is entirely deprecated.

        :param token: The token of this Interconnection.
        :type token: str
        """

        self._token = token

    @property
    def type(self):
        """Gets the type of this Interconnection.

        The 'shared' type of interconnection refers to shared connections, or later also known as Fabric Virtual Connections (or Fabric VCs). The 'dedicated' type of interconnection refers to interconnections created with Dedicated Ports.

        :return: The type of this Interconnection.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Interconnection.

        The 'shared' type of interconnection refers to shared connections, or later also known as Fabric Virtual Connections (or Fabric VCs). The 'dedicated' type of interconnection refers to interconnections created with Dedicated Ports.

        :param type: The type of this Interconnection.
        :type type: str
        """
        allowed_values = ["shared", "dedicated"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def created_at(self):
        """Gets the created_at of this Interconnection.


        :return: The created_at of this Interconnection.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Interconnection.


        :param created_at: The created_at of this Interconnection.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Interconnection.


        :return: The updated_at of this Interconnection.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Interconnection.


        :param updated_at: The updated_at of this Interconnection.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def requested_by(self):
        """Gets the requested_by of this Interconnection.


        :return: The requested_by of this Interconnection.
        :rtype: Href
        """
        return self._requested_by

    @requested_by.setter
    def requested_by(self, requested_by):
        """Sets the requested_by of this Interconnection.


        :param requested_by: The requested_by of this Interconnection.
        :type requested_by: Href
        """

        self._requested_by = requested_by
