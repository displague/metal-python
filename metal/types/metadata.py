# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from metal.types.base_model_ import Model
from metal.types.metadata_network import MetadataNetwork
from metal import util


class Metadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _class: str=None, customdata: Dict[str, object]=None, facility: str=None, hostname: str=None, id: str=None, iqn: str=None, metro: str=None, network: MetadataNetwork=None, operating_system: object=None, plan: str=None, private_subnets: List[str]=None, reserved: bool=None, specs: object=None, ssh_keys: List[str]=None, switch_short_id: str=None, tags: List[str]=None, volumes: List[str]=None):
        """Metadata - a model defined in OpenAPI

        :param _class: The _class of this Metadata.
        :param customdata: The customdata of this Metadata.
        :param facility: The facility of this Metadata.
        :param hostname: The hostname of this Metadata.
        :param id: The id of this Metadata.
        :param iqn: The iqn of this Metadata.
        :param metro: The metro of this Metadata.
        :param network: The network of this Metadata.
        :param operating_system: The operating_system of this Metadata.
        :param plan: The plan of this Metadata.
        :param private_subnets: The private_subnets of this Metadata.
        :param reserved: The reserved of this Metadata.
        :param specs: The specs of this Metadata.
        :param ssh_keys: The ssh_keys of this Metadata.
        :param switch_short_id: The switch_short_id of this Metadata.
        :param tags: The tags of this Metadata.
        :param volumes: The volumes of this Metadata.
        """
        self.openapi_types = {
            '_class': str,
            'customdata': Dict[str, object],
            'facility': str,
            'hostname': str,
            'id': str,
            'iqn': str,
            'metro': str,
            'network': MetadataNetwork,
            'operating_system': object,
            'plan': str,
            'private_subnets': List[str],
            'reserved': bool,
            'specs': object,
            'ssh_keys': List[str],
            'switch_short_id': str,
            'tags': List[str],
            'volumes': List[str]
        }

        self.attribute_map = {
            '_class': 'class',
            'customdata': 'customdata',
            'facility': 'facility',
            'hostname': 'hostname',
            'id': 'id',
            'iqn': 'iqn',
            'metro': 'metro',
            'network': 'network',
            'operating_system': 'operating_system',
            'plan': 'plan',
            'private_subnets': 'private_subnets',
            'reserved': 'reserved',
            'specs': 'specs',
            'ssh_keys': 'ssh_keys',
            'switch_short_id': 'switch_short_id',
            'tags': 'tags',
            'volumes': 'volumes'
        }

        self.__class = _class
        self._customdata = customdata
        self._facility = facility
        self._hostname = hostname
        self._id = id
        self._iqn = iqn
        self._metro = metro
        self._network = network
        self._operating_system = operating_system
        self._plan = plan
        self._private_subnets = private_subnets
        self._reserved = reserved
        self._specs = specs
        self._ssh_keys = ssh_keys
        self._switch_short_id = switch_short_id
        self._tags = tags
        self._volumes = volumes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Metadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Metadata of this Metadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _class(self):
        """Gets the _class of this Metadata.


        :return: The _class of this Metadata.
        :rtype: str
        """
        return self.__class

    @_class.setter
    def _class(self, _class):
        """Sets the _class of this Metadata.


        :param _class: The _class of this Metadata.
        :type _class: str
        """

        self.__class = _class

    @property
    def customdata(self):
        """Gets the customdata of this Metadata.


        :return: The customdata of this Metadata.
        :rtype: Dict[str, object]
        """
        return self._customdata

    @customdata.setter
    def customdata(self, customdata):
        """Sets the customdata of this Metadata.


        :param customdata: The customdata of this Metadata.
        :type customdata: Dict[str, object]
        """

        self._customdata = customdata

    @property
    def facility(self):
        """Gets the facility of this Metadata.

        The facility code of the instance

        :return: The facility of this Metadata.
        :rtype: str
        """
        return self._facility

    @facility.setter
    def facility(self, facility):
        """Sets the facility of this Metadata.

        The facility code of the instance

        :param facility: The facility of this Metadata.
        :type facility: str
        """

        self._facility = facility

    @property
    def hostname(self):
        """Gets the hostname of this Metadata.


        :return: The hostname of this Metadata.
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this Metadata.


        :param hostname: The hostname of this Metadata.
        :type hostname: str
        """

        self._hostname = hostname

    @property
    def id(self):
        """Gets the id of this Metadata.


        :return: The id of this Metadata.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Metadata.


        :param id: The id of this Metadata.
        :type id: str
        """

        self._id = id

    @property
    def iqn(self):
        """Gets the iqn of this Metadata.


        :return: The iqn of this Metadata.
        :rtype: str
        """
        return self._iqn

    @iqn.setter
    def iqn(self, iqn):
        """Sets the iqn of this Metadata.


        :param iqn: The iqn of this Metadata.
        :type iqn: str
        """

        self._iqn = iqn

    @property
    def metro(self):
        """Gets the metro of this Metadata.

        The metro code of the instance

        :return: The metro of this Metadata.
        :rtype: str
        """
        return self._metro

    @metro.setter
    def metro(self, metro):
        """Sets the metro of this Metadata.

        The metro code of the instance

        :param metro: The metro of this Metadata.
        :type metro: str
        """

        self._metro = metro

    @property
    def network(self):
        """Gets the network of this Metadata.


        :return: The network of this Metadata.
        :rtype: MetadataNetwork
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this Metadata.


        :param network: The network of this Metadata.
        :type network: MetadataNetwork
        """

        self._network = network

    @property
    def operating_system(self):
        """Gets the operating_system of this Metadata.


        :return: The operating_system of this Metadata.
        :rtype: object
        """
        return self._operating_system

    @operating_system.setter
    def operating_system(self, operating_system):
        """Sets the operating_system of this Metadata.


        :param operating_system: The operating_system of this Metadata.
        :type operating_system: object
        """

        self._operating_system = operating_system

    @property
    def plan(self):
        """Gets the plan of this Metadata.

        The plan slug of the instance

        :return: The plan of this Metadata.
        :rtype: str
        """
        return self._plan

    @plan.setter
    def plan(self, plan):
        """Sets the plan of this Metadata.

        The plan slug of the instance

        :param plan: The plan of this Metadata.
        :type plan: str
        """

        self._plan = plan

    @property
    def private_subnets(self):
        """Gets the private_subnets of this Metadata.

        An array of the private subnets

        :return: The private_subnets of this Metadata.
        :rtype: List[str]
        """
        return self._private_subnets

    @private_subnets.setter
    def private_subnets(self, private_subnets):
        """Sets the private_subnets of this Metadata.

        An array of the private subnets

        :param private_subnets: The private_subnets of this Metadata.
        :type private_subnets: List[str]
        """

        self._private_subnets = private_subnets

    @property
    def reserved(self):
        """Gets the reserved of this Metadata.


        :return: The reserved of this Metadata.
        :rtype: bool
        """
        return self._reserved

    @reserved.setter
    def reserved(self, reserved):
        """Sets the reserved of this Metadata.


        :param reserved: The reserved of this Metadata.
        :type reserved: bool
        """

        self._reserved = reserved

    @property
    def specs(self):
        """Gets the specs of this Metadata.

        The specs of the plan version of the instance

        :return: The specs of this Metadata.
        :rtype: object
        """
        return self._specs

    @specs.setter
    def specs(self, specs):
        """Sets the specs of this Metadata.

        The specs of the plan version of the instance

        :param specs: The specs of this Metadata.
        :type specs: object
        """

        self._specs = specs

    @property
    def ssh_keys(self):
        """Gets the ssh_keys of this Metadata.


        :return: The ssh_keys of this Metadata.
        :rtype: List[str]
        """
        return self._ssh_keys

    @ssh_keys.setter
    def ssh_keys(self, ssh_keys):
        """Sets the ssh_keys of this Metadata.


        :param ssh_keys: The ssh_keys of this Metadata.
        :type ssh_keys: List[str]
        """

        self._ssh_keys = ssh_keys

    @property
    def switch_short_id(self):
        """Gets the switch_short_id of this Metadata.


        :return: The switch_short_id of this Metadata.
        :rtype: str
        """
        return self._switch_short_id

    @switch_short_id.setter
    def switch_short_id(self, switch_short_id):
        """Sets the switch_short_id of this Metadata.


        :param switch_short_id: The switch_short_id of this Metadata.
        :type switch_short_id: str
        """

        self._switch_short_id = switch_short_id

    @property
    def tags(self):
        """Gets the tags of this Metadata.


        :return: The tags of this Metadata.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Metadata.


        :param tags: The tags of this Metadata.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def volumes(self):
        """Gets the volumes of this Metadata.


        :return: The volumes of this Metadata.
        :rtype: List[str]
        """
        return self._volumes

    @volumes.setter
    def volumes(self, volumes):
        """Sets the volumes of this Metadata.


        :param volumes: The volumes of this Metadata.
        :type volumes: List[str]
        """

        self._volumes = volumes
