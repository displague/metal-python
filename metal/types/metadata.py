# coding: utf-8

"""
    Metal API

    # Introduction Equinix Metal provides a RESTful HTTP API which can be reached at <https://api.equinix.com/metal/v1>. This document describes the API and how to use it.  The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account. Every feature of the Equinix Metal web interface is accessible through the API.  The API docs are generated from the Equinix Metal OpenAPI specification and are officially hosted at <https://metal.equinix.com/developers/api>.  # Common Parameters  The Equinix Metal API uses a few methods to minimize network traffic and improve throughput. These parameters are not used in all API calls, but are used often enough to warrant their own section. Look for these parameters in the documentation for the API calls that support them.  ## Pagination  Pagination is used to limit the number of results returned in a single request. The API will return a maximum of 100 results per page. To retrieve additional results, you can use the `page` and `per_page` query parameters.  The `page` parameter is used to specify the page number. The first page is `1`. The `per_page` parameter is used to specify the number of results per page. The maximum number of results differs by resource type.  ## Sorting  Where offered, the API allows you to sort results by a specific field. To sort results use the `sort_by` query parameter with the root level field name as the value. The `sort_direction` parameter is used to specify the sort direction, either either `asc` (ascending) or `desc` (descending).  ## Filtering  Filtering is used to limit the results returned in a single request. The API supports filtering by certain fields in the response. To filter results, you can use the field as a query parameter.  For example, to filter the IP list to only return public IPv4 addresses, you can filter by the `type` field, as in the following request:  ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/projects/id/ips?type=public_ipv4 ```  Only IP addresses with the `type` field set to `public_ipv4` will be returned.  ## Searching  Searching is used to find matching resources using multiple field comparissons. The API supports searching in resources that define this behavior. The fields available for search differ by resource, as does the search strategy.  To search resources you can use the `search` query parameter.  ## Include and Exclude  For resources that contain references to other resources, sucha as a Device that refers to the Project it resides in, the Equinix Metal API will returns `href` values (API links) to the associated resource.  ```json {   ...   \"project\": {     \"href\": \"/metal/v1/projects/f3f131c8-f302-49ef-8c44-9405022dc6dd\"   } } ```  If you're going need the project details, you can avoid a second API request.  Specify the contained `href` resources and collections that you'd like to have included in the response using the `include` query parameter.  For example:  ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/user?include=projects ```  The `include` parameter is generally accepted in `GET`, `POST`, `PUT`, and `PATCH` requests where `href` resources are presented.  To have multiple resources include, use a comma-separated list (e.g. `?include=emails,projects,memberships`).  ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/user?include=emails,projects,memberships ```  You may also include nested associations up to three levels deep using dot notation (`?include=memberships.projects`):  ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/user?include=memberships.projects ```  To exclude resources, and optimize response delivery, use the `exclude` query parameter. The `exclude` parameter is generally accepted in `GET`, `POST`, `PUT`, and `PATCH` requests for fields with nested object responses. When excluded, these fields will be replaced with an object that contains only an `href` field.   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@equinixmetal.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from metal.configuration import Configuration


class Metadata(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        '_class': 'str',
        'customdata': 'dict[str, object]',
        'facility': 'str',
        'hostname': 'str',
        'id': 'str',
        'iqn': 'str',
        'metro': 'str',
        'network': 'MetadataNetwork',
        'operating_system': 'object',
        'plan': 'str',
        'private_subnets': 'list[str]',
        'reserved': 'bool',
        'specs': 'object',
        'ssh_keys': 'list[str]',
        'switch_short_id': 'str',
        'tags': 'list[str]',
        'volumes': 'list[str]'
    }

    attribute_map = {
        '_class': 'class',
        'customdata': 'customdata',
        'facility': 'facility',
        'hostname': 'hostname',
        'id': 'id',
        'iqn': 'iqn',
        'metro': 'metro',
        'network': 'network',
        'operating_system': 'operating_system',
        'plan': 'plan',
        'private_subnets': 'private_subnets',
        'reserved': 'reserved',
        'specs': 'specs',
        'ssh_keys': 'ssh_keys',
        'switch_short_id': 'switch_short_id',
        'tags': 'tags',
        'volumes': 'volumes'
    }

    def __init__(self, _class=None, customdata=None, facility=None, hostname=None, id=None, iqn=None, metro=None, network=None, operating_system=None, plan=None, private_subnets=None, reserved=None, specs=None, ssh_keys=None, switch_short_id=None, tags=None, volumes=None, local_vars_configuration=None):  # noqa: E501
        """Metadata - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self.__class = None
        self._customdata = None
        self._facility = None
        self._hostname = None
        self._id = None
        self._iqn = None
        self._metro = None
        self._network = None
        self._operating_system = None
        self._plan = None
        self._private_subnets = None
        self._reserved = None
        self._specs = None
        self._ssh_keys = None
        self._switch_short_id = None
        self._tags = None
        self._volumes = None
        self.discriminator = None

        if _class is not None:
            self._class = _class
        if customdata is not None:
            self.customdata = customdata
        if facility is not None:
            self.facility = facility
        if hostname is not None:
            self.hostname = hostname
        if id is not None:
            self.id = id
        if iqn is not None:
            self.iqn = iqn
        if metro is not None:
            self.metro = metro
        if network is not None:
            self.network = network
        if operating_system is not None:
            self.operating_system = operating_system
        if plan is not None:
            self.plan = plan
        if private_subnets is not None:
            self.private_subnets = private_subnets
        if reserved is not None:
            self.reserved = reserved
        if specs is not None:
            self.specs = specs
        if ssh_keys is not None:
            self.ssh_keys = ssh_keys
        if switch_short_id is not None:
            self.switch_short_id = switch_short_id
        if tags is not None:
            self.tags = tags
        if volumes is not None:
            self.volumes = volumes

    @property
    def _class(self):
        """Gets the _class of this Metadata.  # noqa: E501


        :return: The _class of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self.__class

    @_class.setter
    def _class(self, _class):
        """Sets the _class of this Metadata.


        :param _class: The _class of this Metadata.  # noqa: E501
        :type _class: str
        """

        self.__class = _class

    @property
    def customdata(self):
        """Gets the customdata of this Metadata.  # noqa: E501


        :return: The customdata of this Metadata.  # noqa: E501
        :rtype: dict[str, object]
        """
        return self._customdata

    @customdata.setter
    def customdata(self, customdata):
        """Sets the customdata of this Metadata.


        :param customdata: The customdata of this Metadata.  # noqa: E501
        :type customdata: dict[str, object]
        """

        self._customdata = customdata

    @property
    def facility(self):
        """Gets the facility of this Metadata.  # noqa: E501

        The facility code of the instance  # noqa: E501

        :return: The facility of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._facility

    @facility.setter
    def facility(self, facility):
        """Sets the facility of this Metadata.

        The facility code of the instance  # noqa: E501

        :param facility: The facility of this Metadata.  # noqa: E501
        :type facility: str
        """

        self._facility = facility

    @property
    def hostname(self):
        """Gets the hostname of this Metadata.  # noqa: E501


        :return: The hostname of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this Metadata.


        :param hostname: The hostname of this Metadata.  # noqa: E501
        :type hostname: str
        """

        self._hostname = hostname

    @property
    def id(self):
        """Gets the id of this Metadata.  # noqa: E501


        :return: The id of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Metadata.


        :param id: The id of this Metadata.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def iqn(self):
        """Gets the iqn of this Metadata.  # noqa: E501


        :return: The iqn of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._iqn

    @iqn.setter
    def iqn(self, iqn):
        """Sets the iqn of this Metadata.


        :param iqn: The iqn of this Metadata.  # noqa: E501
        :type iqn: str
        """

        self._iqn = iqn

    @property
    def metro(self):
        """Gets the metro of this Metadata.  # noqa: E501

        The metro code of the instance  # noqa: E501

        :return: The metro of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._metro

    @metro.setter
    def metro(self, metro):
        """Sets the metro of this Metadata.

        The metro code of the instance  # noqa: E501

        :param metro: The metro of this Metadata.  # noqa: E501
        :type metro: str
        """

        self._metro = metro

    @property
    def network(self):
        """Gets the network of this Metadata.  # noqa: E501


        :return: The network of this Metadata.  # noqa: E501
        :rtype: MetadataNetwork
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this Metadata.


        :param network: The network of this Metadata.  # noqa: E501
        :type network: MetadataNetwork
        """

        self._network = network

    @property
    def operating_system(self):
        """Gets the operating_system of this Metadata.  # noqa: E501


        :return: The operating_system of this Metadata.  # noqa: E501
        :rtype: object
        """
        return self._operating_system

    @operating_system.setter
    def operating_system(self, operating_system):
        """Sets the operating_system of this Metadata.


        :param operating_system: The operating_system of this Metadata.  # noqa: E501
        :type operating_system: object
        """

        self._operating_system = operating_system

    @property
    def plan(self):
        """Gets the plan of this Metadata.  # noqa: E501

        The plan slug of the instance  # noqa: E501

        :return: The plan of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._plan

    @plan.setter
    def plan(self, plan):
        """Sets the plan of this Metadata.

        The plan slug of the instance  # noqa: E501

        :param plan: The plan of this Metadata.  # noqa: E501
        :type plan: str
        """

        self._plan = plan

    @property
    def private_subnets(self):
        """Gets the private_subnets of this Metadata.  # noqa: E501

        An array of the private subnets  # noqa: E501

        :return: The private_subnets of this Metadata.  # noqa: E501
        :rtype: list[str]
        """
        return self._private_subnets

    @private_subnets.setter
    def private_subnets(self, private_subnets):
        """Sets the private_subnets of this Metadata.

        An array of the private subnets  # noqa: E501

        :param private_subnets: The private_subnets of this Metadata.  # noqa: E501
        :type private_subnets: list[str]
        """

        self._private_subnets = private_subnets

    @property
    def reserved(self):
        """Gets the reserved of this Metadata.  # noqa: E501


        :return: The reserved of this Metadata.  # noqa: E501
        :rtype: bool
        """
        return self._reserved

    @reserved.setter
    def reserved(self, reserved):
        """Sets the reserved of this Metadata.


        :param reserved: The reserved of this Metadata.  # noqa: E501
        :type reserved: bool
        """

        self._reserved = reserved

    @property
    def specs(self):
        """Gets the specs of this Metadata.  # noqa: E501

        The specs of the plan version of the instance  # noqa: E501

        :return: The specs of this Metadata.  # noqa: E501
        :rtype: object
        """
        return self._specs

    @specs.setter
    def specs(self, specs):
        """Sets the specs of this Metadata.

        The specs of the plan version of the instance  # noqa: E501

        :param specs: The specs of this Metadata.  # noqa: E501
        :type specs: object
        """

        self._specs = specs

    @property
    def ssh_keys(self):
        """Gets the ssh_keys of this Metadata.  # noqa: E501


        :return: The ssh_keys of this Metadata.  # noqa: E501
        :rtype: list[str]
        """
        return self._ssh_keys

    @ssh_keys.setter
    def ssh_keys(self, ssh_keys):
        """Sets the ssh_keys of this Metadata.


        :param ssh_keys: The ssh_keys of this Metadata.  # noqa: E501
        :type ssh_keys: list[str]
        """

        self._ssh_keys = ssh_keys

    @property
    def switch_short_id(self):
        """Gets the switch_short_id of this Metadata.  # noqa: E501


        :return: The switch_short_id of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._switch_short_id

    @switch_short_id.setter
    def switch_short_id(self, switch_short_id):
        """Sets the switch_short_id of this Metadata.


        :param switch_short_id: The switch_short_id of this Metadata.  # noqa: E501
        :type switch_short_id: str
        """

        self._switch_short_id = switch_short_id

    @property
    def tags(self):
        """Gets the tags of this Metadata.  # noqa: E501


        :return: The tags of this Metadata.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Metadata.


        :param tags: The tags of this Metadata.  # noqa: E501
        :type tags: list[str]
        """

        self._tags = tags

    @property
    def volumes(self):
        """Gets the volumes of this Metadata.  # noqa: E501


        :return: The volumes of this Metadata.  # noqa: E501
        :rtype: list[str]
        """
        return self._volumes

    @volumes.setter
    def volumes(self, volumes):
        """Sets the volumes of this Metadata.


        :param volumes: The volumes of this Metadata.  # noqa: E501
        :type volumes: list[str]
        """

        self._volumes = volumes

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Metadata):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Metadata):
            return True

        return self.to_dict() != other.to_dict()
