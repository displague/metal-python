# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from metal.types.base_model_ import Model
from metal import util


class VrfIpReservationCreateInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cidr: int=None, customdata: object=None, details: str=None, network: str=None, tags: List[str]=None, type: str=None, vrf_id: str=None):
        """VrfIpReservationCreateInput - a model defined in OpenAPI

        :param cidr: The cidr of this VrfIpReservationCreateInput.
        :param customdata: The customdata of this VrfIpReservationCreateInput.
        :param details: The details of this VrfIpReservationCreateInput.
        :param network: The network of this VrfIpReservationCreateInput.
        :param tags: The tags of this VrfIpReservationCreateInput.
        :param type: The type of this VrfIpReservationCreateInput.
        :param vrf_id: The vrf_id of this VrfIpReservationCreateInput.
        """
        self.openapi_types = {
            'cidr': int,
            'customdata': object,
            'details': str,
            'network': str,
            'tags': List[str],
            'type': str,
            'vrf_id': str
        }

        self.attribute_map = {
            'cidr': 'cidr',
            'customdata': 'customdata',
            'details': 'details',
            'network': 'network',
            'tags': 'tags',
            'type': 'type',
            'vrf_id': 'vrf_id'
        }

        self._cidr = cidr
        self._customdata = customdata
        self._details = details
        self._network = network
        self._tags = tags
        self._type = type
        self._vrf_id = vrf_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VrfIpReservationCreateInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VrfIpReservationCreateInput of this VrfIpReservationCreateInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cidr(self):
        """Gets the cidr of this VrfIpReservationCreateInput.

        The size of the VRF IP Reservation's subnet

        :return: The cidr of this VrfIpReservationCreateInput.
        :rtype: int
        """
        return self._cidr

    @cidr.setter
    def cidr(self, cidr):
        """Sets the cidr of this VrfIpReservationCreateInput.

        The size of the VRF IP Reservation's subnet

        :param cidr: The cidr of this VrfIpReservationCreateInput.
        :type cidr: int
        """
        if cidr is None:
            raise ValueError("Invalid value for `cidr`, must not be `None`")

        self._cidr = cidr

    @property
    def customdata(self):
        """Gets the customdata of this VrfIpReservationCreateInput.


        :return: The customdata of this VrfIpReservationCreateInput.
        :rtype: object
        """
        return self._customdata

    @customdata.setter
    def customdata(self, customdata):
        """Sets the customdata of this VrfIpReservationCreateInput.


        :param customdata: The customdata of this VrfIpReservationCreateInput.
        :type customdata: object
        """

        self._customdata = customdata

    @property
    def details(self):
        """Gets the details of this VrfIpReservationCreateInput.


        :return: The details of this VrfIpReservationCreateInput.
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this VrfIpReservationCreateInput.


        :param details: The details of this VrfIpReservationCreateInput.
        :type details: str
        """

        self._details = details

    @property
    def network(self):
        """Gets the network of this VrfIpReservationCreateInput.

        The starting address for this VRF IP Reservation's subnet

        :return: The network of this VrfIpReservationCreateInput.
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this VrfIpReservationCreateInput.

        The starting address for this VRF IP Reservation's subnet

        :param network: The network of this VrfIpReservationCreateInput.
        :type network: str
        """
        if network is None:
            raise ValueError("Invalid value for `network`, must not be `None`")

        self._network = network

    @property
    def tags(self):
        """Gets the tags of this VrfIpReservationCreateInput.


        :return: The tags of this VrfIpReservationCreateInput.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this VrfIpReservationCreateInput.


        :param tags: The tags of this VrfIpReservationCreateInput.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def type(self):
        """Gets the type of this VrfIpReservationCreateInput.

        Must be set to 'vrf'

        :return: The type of this VrfIpReservationCreateInput.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this VrfIpReservationCreateInput.

        Must be set to 'vrf'

        :param type: The type of this VrfIpReservationCreateInput.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def vrf_id(self):
        """Gets the vrf_id of this VrfIpReservationCreateInput.

        The ID of the VRF in which this VRF IP Reservation is created. The VRF must have an existing IP Range that contains the requested subnet. This field may be aliased as just 'vrf'.

        :return: The vrf_id of this VrfIpReservationCreateInput.
        :rtype: str
        """
        return self._vrf_id

    @vrf_id.setter
    def vrf_id(self, vrf_id):
        """Sets the vrf_id of this VrfIpReservationCreateInput.

        The ID of the VRF in which this VRF IP Reservation is created. The VRF must have an existing IP Range that contains the requested subnet. This field may be aliased as just 'vrf'.

        :param vrf_id: The vrf_id of this VrfIpReservationCreateInput.
        :type vrf_id: str
        """
        if vrf_id is None:
            raise ValueError("Invalid value for `vrf_id`, must not be `None`")

        self._vrf_id = vrf_id
