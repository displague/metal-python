# coding: utf-8

"""
    Metal API

    This is the API for Equinix Metal Product. Interact with your devices, user account, and projects.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@equinixmetal.com
    Generated by: https://openapi-generator.tech
"""


import inspect
import pprint
import re  # noqa: F401
import six

from metal.configuration import Configuration


class OrganizationInput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'description': 'str',
        'website': 'str',
        'twitter': 'str',
        'logo': 'file',
        'address': 'Address',
        'billing_address': 'Address',
        'customdata': 'object',
        'enforce_2fa_at': 'datetime'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'website': 'website',
        'twitter': 'twitter',
        'logo': 'logo',
        'address': 'address',
        'billing_address': 'billing_address',
        'customdata': 'customdata',
        'enforce_2fa_at': 'enforce_2fa_at'
    }

    def __init__(self, name=None, description=None, website=None, twitter=None, logo=None, address=None, billing_address=None, customdata=None, enforce_2fa_at=None, local_vars_configuration=None):  # noqa: E501
        """OrganizationInput - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._description = None
        self._website = None
        self._twitter = None
        self._logo = None
        self._address = None
        self._billing_address = None
        self._customdata = None
        self._enforce_2fa_at = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if website is not None:
            self.website = website
        if twitter is not None:
            self.twitter = twitter
        if logo is not None:
            self.logo = logo
        if address is not None:
            self.address = address
        if billing_address is not None:
            self.billing_address = billing_address
        if customdata is not None:
            self.customdata = customdata
        if enforce_2fa_at is not None:
            self.enforce_2fa_at = enforce_2fa_at

    @property
    def name(self):
        """Gets the name of this OrganizationInput.  # noqa: E501


        :return: The name of this OrganizationInput.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OrganizationInput.


        :param name: The name of this OrganizationInput.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this OrganizationInput.  # noqa: E501


        :return: The description of this OrganizationInput.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this OrganizationInput.


        :param description: The description of this OrganizationInput.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def website(self):
        """Gets the website of this OrganizationInput.  # noqa: E501


        :return: The website of this OrganizationInput.  # noqa: E501
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this OrganizationInput.


        :param website: The website of this OrganizationInput.  # noqa: E501
        :type website: str
        """

        self._website = website

    @property
    def twitter(self):
        """Gets the twitter of this OrganizationInput.  # noqa: E501


        :return: The twitter of this OrganizationInput.  # noqa: E501
        :rtype: str
        """
        return self._twitter

    @twitter.setter
    def twitter(self, twitter):
        """Sets the twitter of this OrganizationInput.


        :param twitter: The twitter of this OrganizationInput.  # noqa: E501
        :type twitter: str
        """

        self._twitter = twitter

    @property
    def logo(self):
        """Gets the logo of this OrganizationInput.  # noqa: E501


        :return: The logo of this OrganizationInput.  # noqa: E501
        :rtype: file
        """
        return self._logo

    @logo.setter
    def logo(self, logo):
        """Sets the logo of this OrganizationInput.


        :param logo: The logo of this OrganizationInput.  # noqa: E501
        :type logo: file
        """

        self._logo = logo

    @property
    def address(self):
        """Gets the address of this OrganizationInput.  # noqa: E501


        :return: The address of this OrganizationInput.  # noqa: E501
        :rtype: Address
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this OrganizationInput.


        :param address: The address of this OrganizationInput.  # noqa: E501
        :type address: Address
        """

        self._address = address

    @property
    def billing_address(self):
        """Gets the billing_address of this OrganizationInput.  # noqa: E501


        :return: The billing_address of this OrganizationInput.  # noqa: E501
        :rtype: Address
        """
        return self._billing_address

    @billing_address.setter
    def billing_address(self, billing_address):
        """Sets the billing_address of this OrganizationInput.


        :param billing_address: The billing_address of this OrganizationInput.  # noqa: E501
        :type billing_address: Address
        """

        self._billing_address = billing_address

    @property
    def customdata(self):
        """Gets the customdata of this OrganizationInput.  # noqa: E501


        :return: The customdata of this OrganizationInput.  # noqa: E501
        :rtype: object
        """
        return self._customdata

    @customdata.setter
    def customdata(self, customdata):
        """Sets the customdata of this OrganizationInput.


        :param customdata: The customdata of this OrganizationInput.  # noqa: E501
        :type customdata: object
        """

        self._customdata = customdata

    @property
    def enforce_2fa_at(self):
        """Gets the enforce_2fa_at of this OrganizationInput.  # noqa: E501

        Force to all members to have enabled the two factor authentication after that date, unless the value is null  # noqa: E501

        :return: The enforce_2fa_at of this OrganizationInput.  # noqa: E501
        :rtype: datetime
        """
        return self._enforce_2fa_at

    @enforce_2fa_at.setter
    def enforce_2fa_at(self, enforce_2fa_at):
        """Sets the enforce_2fa_at of this OrganizationInput.

        Force to all members to have enabled the two factor authentication after that date, unless the value is null  # noqa: E501

        :param enforce_2fa_at: The enforce_2fa_at of this OrganizationInput.  # noqa: E501
        :type enforce_2fa_at: datetime
        """

        self._enforce_2fa_at = enforce_2fa_at

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = inspect.getargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrganizationInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrganizationInput):
            return True

        return self.to_dict() != other.to_dict()
