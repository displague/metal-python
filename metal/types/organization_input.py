# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from metal.types.base_model_ import Model
from metal.types.address import Address
from metal import util


class OrganizationInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: Address=None, billing_address: Address=None, customdata: object=None, description: str=None, enforce_2fa_at: datetime=None, logo: file=None, name: str=None, twitter: str=None, website: str=None):
        """OrganizationInput - a model defined in OpenAPI

        :param address: The address of this OrganizationInput.
        :param billing_address: The billing_address of this OrganizationInput.
        :param customdata: The customdata of this OrganizationInput.
        :param description: The description of this OrganizationInput.
        :param enforce_2fa_at: The enforce_2fa_at of this OrganizationInput.
        :param logo: The logo of this OrganizationInput.
        :param name: The name of this OrganizationInput.
        :param twitter: The twitter of this OrganizationInput.
        :param website: The website of this OrganizationInput.
        """
        self.openapi_types = {
            'address': Address,
            'billing_address': Address,
            'customdata': object,
            'description': str,
            'enforce_2fa_at': datetime,
            'logo': file,
            'name': str,
            'twitter': str,
            'website': str
        }

        self.attribute_map = {
            'address': 'address',
            'billing_address': 'billing_address',
            'customdata': 'customdata',
            'description': 'description',
            'enforce_2fa_at': 'enforce_2fa_at',
            'logo': 'logo',
            'name': 'name',
            'twitter': 'twitter',
            'website': 'website'
        }

        self._address = address
        self._billing_address = billing_address
        self._customdata = customdata
        self._description = description
        self._enforce_2fa_at = enforce_2fa_at
        self._logo = logo
        self._name = name
        self._twitter = twitter
        self._website = website

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrganizationInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrganizationInput of this OrganizationInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this OrganizationInput.


        :return: The address of this OrganizationInput.
        :rtype: Address
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this OrganizationInput.


        :param address: The address of this OrganizationInput.
        :type address: Address
        """

        self._address = address

    @property
    def billing_address(self):
        """Gets the billing_address of this OrganizationInput.


        :return: The billing_address of this OrganizationInput.
        :rtype: Address
        """
        return self._billing_address

    @billing_address.setter
    def billing_address(self, billing_address):
        """Sets the billing_address of this OrganizationInput.


        :param billing_address: The billing_address of this OrganizationInput.
        :type billing_address: Address
        """

        self._billing_address = billing_address

    @property
    def customdata(self):
        """Gets the customdata of this OrganizationInput.


        :return: The customdata of this OrganizationInput.
        :rtype: object
        """
        return self._customdata

    @customdata.setter
    def customdata(self, customdata):
        """Sets the customdata of this OrganizationInput.


        :param customdata: The customdata of this OrganizationInput.
        :type customdata: object
        """

        self._customdata = customdata

    @property
    def description(self):
        """Gets the description of this OrganizationInput.


        :return: The description of this OrganizationInput.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this OrganizationInput.


        :param description: The description of this OrganizationInput.
        :type description: str
        """

        self._description = description

    @property
    def enforce_2fa_at(self):
        """Gets the enforce_2fa_at of this OrganizationInput.

        Force to all members to have enabled the two factor authentication after that date, unless the value is null

        :return: The enforce_2fa_at of this OrganizationInput.
        :rtype: datetime
        """
        return self._enforce_2fa_at

    @enforce_2fa_at.setter
    def enforce_2fa_at(self, enforce_2fa_at):
        """Sets the enforce_2fa_at of this OrganizationInput.

        Force to all members to have enabled the two factor authentication after that date, unless the value is null

        :param enforce_2fa_at: The enforce_2fa_at of this OrganizationInput.
        :type enforce_2fa_at: datetime
        """

        self._enforce_2fa_at = enforce_2fa_at

    @property
    def logo(self):
        """Gets the logo of this OrganizationInput.


        :return: The logo of this OrganizationInput.
        :rtype: file
        """
        return self._logo

    @logo.setter
    def logo(self, logo):
        """Sets the logo of this OrganizationInput.


        :param logo: The logo of this OrganizationInput.
        :type logo: file
        """

        self._logo = logo

    @property
    def name(self):
        """Gets the name of this OrganizationInput.


        :return: The name of this OrganizationInput.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OrganizationInput.


        :param name: The name of this OrganizationInput.
        :type name: str
        """

        self._name = name

    @property
    def twitter(self):
        """Gets the twitter of this OrganizationInput.


        :return: The twitter of this OrganizationInput.
        :rtype: str
        """
        return self._twitter

    @twitter.setter
    def twitter(self, twitter):
        """Sets the twitter of this OrganizationInput.


        :param twitter: The twitter of this OrganizationInput.
        :type twitter: str
        """

        self._twitter = twitter

    @property
    def website(self):
        """Gets the website of this OrganizationInput.


        :return: The website of this OrganizationInput.
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this OrganizationInput.


        :param website: The website of this OrganizationInput.
        :type website: str
        """

        self._website = website
