# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from metal.types.base_model_ import Model
from metal import util


class FabricServiceToken(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, expires_at: datetime=None, id: str=None, max_allowed_speed: int=None, role: str=None, service_token_type: str=None, state: str=None):
        """FabricServiceToken - a model defined in OpenAPI

        :param expires_at: The expires_at of this FabricServiceToken.
        :param id: The id of this FabricServiceToken.
        :param max_allowed_speed: The max_allowed_speed of this FabricServiceToken.
        :param role: The role of this FabricServiceToken.
        :param service_token_type: The service_token_type of this FabricServiceToken.
        :param state: The state of this FabricServiceToken.
        """
        self.openapi_types = {
            'expires_at': datetime,
            'id': str,
            'max_allowed_speed': int,
            'role': str,
            'service_token_type': str,
            'state': str
        }

        self.attribute_map = {
            'expires_at': 'expires_at',
            'id': 'id',
            'max_allowed_speed': 'max_allowed_speed',
            'role': 'role',
            'service_token_type': 'service_token_type',
            'state': 'state'
        }

        self._expires_at = expires_at
        self._id = id
        self._max_allowed_speed = max_allowed_speed
        self._role = role
        self._service_token_type = service_token_type
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FabricServiceToken':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FabricServiceToken of this FabricServiceToken.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def expires_at(self):
        """Gets the expires_at of this FabricServiceToken.

        The expiration date and time of the Fabric service token. Once a service token is expired, it is no longer redeemable.

        :return: The expires_at of this FabricServiceToken.
        :rtype: datetime
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """Sets the expires_at of this FabricServiceToken.

        The expiration date and time of the Fabric service token. Once a service token is expired, it is no longer redeemable.

        :param expires_at: The expires_at of this FabricServiceToken.
        :type expires_at: datetime
        """

        self._expires_at = expires_at

    @property
    def id(self):
        """Gets the id of this FabricServiceToken.

        The UUID that can be used on the Fabric Portal to redeem either an A-Side or Z-Side Service Token. For Fabric VCs (Metal Billed), this UUID will represent an A-Side Service Token, which will allow interconnections to be made from Equinix Metal to other Service Providers on Fabric. For Fabric VCs (Fabric Billed), this UUID will represent a Z-Side Service Token, which will allow interconnections to be made to connect an owned Fabric Port or  Virtual Device to Equinix Metal.

        :return: The id of this FabricServiceToken.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FabricServiceToken.

        The UUID that can be used on the Fabric Portal to redeem either an A-Side or Z-Side Service Token. For Fabric VCs (Metal Billed), this UUID will represent an A-Side Service Token, which will allow interconnections to be made from Equinix Metal to other Service Providers on Fabric. For Fabric VCs (Fabric Billed), this UUID will represent a Z-Side Service Token, which will allow interconnections to be made to connect an owned Fabric Port or  Virtual Device to Equinix Metal.

        :param id: The id of this FabricServiceToken.
        :type id: str
        """

        self._id = id

    @property
    def max_allowed_speed(self):
        """Gets the max_allowed_speed of this FabricServiceToken.

        The maximum speed that can be selected on the Fabric Portal when configuring a interconnection with either  an A-Side or Z-Side Service Token. For Fabric VCs (Metal Billed), this is what the billing is based off of, and can be one of the following options, '50mbps', '200mbps', '500mbps', '1gbps', '2gbps', '5gbps' or '10gbps'. For Fabric VCs (Fabric Billed), this will default to 10Gbps.

        :return: The max_allowed_speed of this FabricServiceToken.
        :rtype: int
        """
        return self._max_allowed_speed

    @max_allowed_speed.setter
    def max_allowed_speed(self, max_allowed_speed):
        """Sets the max_allowed_speed of this FabricServiceToken.

        The maximum speed that can be selected on the Fabric Portal when configuring a interconnection with either  an A-Side or Z-Side Service Token. For Fabric VCs (Metal Billed), this is what the billing is based off of, and can be one of the following options, '50mbps', '200mbps', '500mbps', '1gbps', '2gbps', '5gbps' or '10gbps'. For Fabric VCs (Fabric Billed), this will default to 10Gbps.

        :param max_allowed_speed: The max_allowed_speed of this FabricServiceToken.
        :type max_allowed_speed: int
        """

        self._max_allowed_speed = max_allowed_speed

    @property
    def role(self):
        """Gets the role of this FabricServiceToken.

        Either primary or secondary, depending on which interconnection the service token is associated to.

        :return: The role of this FabricServiceToken.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this FabricServiceToken.

        Either primary or secondary, depending on which interconnection the service token is associated to.

        :param role: The role of this FabricServiceToken.
        :type role: str
        """
        allowed_values = ["primary", "secondary"]  # noqa: E501
        if role not in allowed_values:
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"
                .format(role, allowed_values)
            )

        self._role = role

    @property
    def service_token_type(self):
        """Gets the service_token_type of this FabricServiceToken.

        Either 'a_side' or 'z_side', depending on which type of Fabric VC was requested.

        :return: The service_token_type of this FabricServiceToken.
        :rtype: str
        """
        return self._service_token_type

    @service_token_type.setter
    def service_token_type(self, service_token_type):
        """Sets the service_token_type of this FabricServiceToken.

        Either 'a_side' or 'z_side', depending on which type of Fabric VC was requested.

        :param service_token_type: The service_token_type of this FabricServiceToken.
        :type service_token_type: str
        """
        allowed_values = ["a_side", "z_side"]  # noqa: E501
        if service_token_type not in allowed_values:
            raise ValueError(
                "Invalid value for `service_token_type` ({0}), must be one of {1}"
                .format(service_token_type, allowed_values)
            )

        self._service_token_type = service_token_type

    @property
    def state(self):
        """Gets the state of this FabricServiceToken.

        The state of the service token that corresponds with the service token state on Fabric. An 'inactive' state refers to a token that has not been redeemed yet on the Fabric side, an 'active' state refers to a token that has already been redeemed, and an 'expired' state refers to a token that has reached its expiry time.

        :return: The state of this FabricServiceToken.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this FabricServiceToken.

        The state of the service token that corresponds with the service token state on Fabric. An 'inactive' state refers to a token that has not been redeemed yet on the Fabric side, an 'active' state refers to a token that has already been redeemed, and an 'expired' state refers to a token that has reached its expiry time.

        :param state: The state of this FabricServiceToken.
        :type state: str
        """
        allowed_values = ["inactive", "active", "expired"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
