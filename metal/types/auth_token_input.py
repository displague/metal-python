# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from metal.types.base_model_ import Model
from metal import util


class AuthTokenInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, read_only: bool=None):
        """AuthTokenInput - a model defined in OpenAPI

        :param description: The description of this AuthTokenInput.
        :param read_only: The read_only of this AuthTokenInput.
        """
        self.openapi_types = {
            'description': str,
            'read_only': bool
        }

        self.attribute_map = {
            'description': 'description',
            'read_only': 'read_only'
        }

        self._description = description
        self._read_only = read_only

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AuthTokenInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AuthTokenInput of this AuthTokenInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this AuthTokenInput.


        :return: The description of this AuthTokenInput.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AuthTokenInput.


        :param description: The description of this AuthTokenInput.
        :type description: str
        """

        self._description = description

    @property
    def read_only(self):
        """Gets the read_only of this AuthTokenInput.


        :return: The read_only of this AuthTokenInput.
        :rtype: bool
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only):
        """Sets the read_only of this AuthTokenInput.


        :param read_only: The read_only of this AuthTokenInput.
        :type read_only: bool
        """

        self._read_only = read_only
