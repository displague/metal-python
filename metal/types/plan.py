# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from metal.types.base_model_ import Model
from metal.types.plan_available_in_inner import PlanAvailableInInner
from metal.types.plan_available_in_metros_inner import PlanAvailableInMetrosInner
from metal.types.plan_specs import PlanSpecs
from metal import util


class Plan(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, available_in: List[PlanAvailableInInner]=None, available_in_metros: List[PlanAvailableInMetrosInner]=None, _class: str=None, description: str=None, deployment_types: list[str]=None, id: str=None, legacy: bool=None, line: str=None, name: str=None, pricing: object=None, slug: str=None, specs: PlanSpecs=None, type: str=None):
        """Plan - a model defined in OpenAPI

        :param available_in: The available_in of this Plan.
        :param available_in_metros: The available_in_metros of this Plan.
        :param _class: The _class of this Plan.
        :param description: The description of this Plan.
        :param deployment_types: The deployment_types of this Plan.
        :param id: The id of this Plan.
        :param legacy: The legacy of this Plan.
        :param line: The line of this Plan.
        :param name: The name of this Plan.
        :param pricing: The pricing of this Plan.
        :param slug: The slug of this Plan.
        :param specs: The specs of this Plan.
        :param type: The type of this Plan.
        """
        self.openapi_types = {
            'available_in': List[PlanAvailableInInner],
            'available_in_metros': List[PlanAvailableInMetrosInner],
            '_class': str,
            'description': str,
            'deployment_types': list[str],
            'id': str,
            'legacy': bool,
            'line': str,
            'name': str,
            'pricing': object,
            'slug': str,
            'specs': PlanSpecs,
            'type': str
        }

        self.attribute_map = {
            'available_in': 'available_in',
            'available_in_metros': 'available_in_metros',
            '_class': 'class',
            'description': 'description',
            'deployment_types': 'deployment_types',
            'id': 'id',
            'legacy': 'legacy',
            'line': 'line',
            'name': 'name',
            'pricing': 'pricing',
            'slug': 'slug',
            'specs': 'specs',
            'type': 'type'
        }

        self._available_in = available_in
        self._available_in_metros = available_in_metros
        self.__class = _class
        self._description = description
        self._deployment_types = deployment_types
        self._id = id
        self._legacy = legacy
        self._line = line
        self._name = name
        self._pricing = pricing
        self._slug = slug
        self._specs = specs
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Plan':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Plan of this Plan.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def available_in(self):
        """Gets the available_in of this Plan.

        Shows which facilities the plan is available in, and the facility-based price if it is different from the default price.

        :return: The available_in of this Plan.
        :rtype: List[PlanAvailableInInner]
        """
        return self._available_in

    @available_in.setter
    def available_in(self, available_in):
        """Sets the available_in of this Plan.

        Shows which facilities the plan is available in, and the facility-based price if it is different from the default price.

        :param available_in: The available_in of this Plan.
        :type available_in: List[PlanAvailableInInner]
        """

        self._available_in = available_in

    @property
    def available_in_metros(self):
        """Gets the available_in_metros of this Plan.

        Shows which metros the plan is available in, and the metro-based price if it is different from the default price.

        :return: The available_in_metros of this Plan.
        :rtype: List[PlanAvailableInMetrosInner]
        """
        return self._available_in_metros

    @available_in_metros.setter
    def available_in_metros(self, available_in_metros):
        """Sets the available_in_metros of this Plan.

        Shows which metros the plan is available in, and the metro-based price if it is different from the default price.

        :param available_in_metros: The available_in_metros of this Plan.
        :type available_in_metros: List[PlanAvailableInMetrosInner]
        """

        self._available_in_metros = available_in_metros

    @property
    def _class(self):
        """Gets the _class of this Plan.


        :return: The _class of this Plan.
        :rtype: str
        """
        return self.__class

    @_class.setter
    def _class(self, _class):
        """Sets the _class of this Plan.


        :param _class: The _class of this Plan.
        :type _class: str
        """

        self.__class = _class

    @property
    def description(self):
        """Gets the description of this Plan.


        :return: The description of this Plan.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Plan.


        :param description: The description of this Plan.
        :type description: str
        """

        self._description = description

    @property
    def deployment_types(self):
        """Gets the deployment_types of this Plan.


        :return: The deployment_types of this Plan.
        :rtype: list[str]
        """
        return self._deployment_types

    @deployment_types.setter
    def deployment_types(self, deployment_types):
        """Sets the deployment_types of this Plan.


        :param deployment_types: The deployment_types of this Plan.
        :type deployment_types: list[str]
        """
        allowed_values = ["on_demand", "spot_market"]  # noqa: E501
        if not set(deployment_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `deployment_types` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(deployment_types) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._deployment_types = deployment_types

    @property
    def id(self):
        """Gets the id of this Plan.


        :return: The id of this Plan.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Plan.


        :param id: The id of this Plan.
        :type id: str
        """

        self._id = id

    @property
    def legacy(self):
        """Gets the legacy of this Plan.


        :return: The legacy of this Plan.
        :rtype: bool
        """
        return self._legacy

    @legacy.setter
    def legacy(self, legacy):
        """Sets the legacy of this Plan.


        :param legacy: The legacy of this Plan.
        :type legacy: bool
        """

        self._legacy = legacy

    @property
    def line(self):
        """Gets the line of this Plan.


        :return: The line of this Plan.
        :rtype: str
        """
        return self._line

    @line.setter
    def line(self, line):
        """Sets the line of this Plan.


        :param line: The line of this Plan.
        :type line: str
        """
        allowed_values = ["baremetal"]  # noqa: E501
        if line not in allowed_values:
            raise ValueError(
                "Invalid value for `line` ({0}), must be one of {1}"
                .format(line, allowed_values)
            )

        self._line = line

    @property
    def name(self):
        """Gets the name of this Plan.


        :return: The name of this Plan.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Plan.


        :param name: The name of this Plan.
        :type name: str
        """

        self._name = name

    @property
    def pricing(self):
        """Gets the pricing of this Plan.


        :return: The pricing of this Plan.
        :rtype: object
        """
        return self._pricing

    @pricing.setter
    def pricing(self, pricing):
        """Sets the pricing of this Plan.


        :param pricing: The pricing of this Plan.
        :type pricing: object
        """

        self._pricing = pricing

    @property
    def slug(self):
        """Gets the slug of this Plan.


        :return: The slug of this Plan.
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this Plan.


        :param slug: The slug of this Plan.
        :type slug: str
        """

        self._slug = slug

    @property
    def specs(self):
        """Gets the specs of this Plan.


        :return: The specs of this Plan.
        :rtype: PlanSpecs
        """
        return self._specs

    @specs.setter
    def specs(self, specs):
        """Sets the specs of this Plan.


        :param specs: The specs of this Plan.
        :type specs: PlanSpecs
        """

        self._specs = specs

    @property
    def type(self):
        """Gets the type of this Plan.

        The plan type

        :return: The type of this Plan.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Plan.

        The plan type

        :param type: The type of this Plan.
        :type type: str
        """
        allowed_values = ["standard", "workload_optimized", "custom"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
