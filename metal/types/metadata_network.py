# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from metal.types.base_model_ import Model
from metal.types.metadata_network_network import MetadataNetworkNetwork
from metal import util


class MetadataNetwork(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, addresses: List[str]=None, interfaces: List[object]=None, network: MetadataNetworkNetwork=None):
        """MetadataNetwork - a model defined in OpenAPI

        :param addresses: The addresses of this MetadataNetwork.
        :param interfaces: The interfaces of this MetadataNetwork.
        :param network: The network of this MetadataNetwork.
        """
        self.openapi_types = {
            'addresses': List[str],
            'interfaces': List[object],
            'network': MetadataNetworkNetwork
        }

        self.attribute_map = {
            'addresses': 'addresses',
            'interfaces': 'interfaces',
            'network': 'network'
        }

        self._addresses = addresses
        self._interfaces = interfaces
        self._network = network

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MetadataNetwork':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Metadata_network of this MetadataNetwork.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def addresses(self):
        """Gets the addresses of this MetadataNetwork.


        :return: The addresses of this MetadataNetwork.
        :rtype: List[str]
        """
        return self._addresses

    @addresses.setter
    def addresses(self, addresses):
        """Sets the addresses of this MetadataNetwork.


        :param addresses: The addresses of this MetadataNetwork.
        :type addresses: List[str]
        """

        self._addresses = addresses

    @property
    def interfaces(self):
        """Gets the interfaces of this MetadataNetwork.


        :return: The interfaces of this MetadataNetwork.
        :rtype: List[object]
        """
        return self._interfaces

    @interfaces.setter
    def interfaces(self, interfaces):
        """Sets the interfaces of this MetadataNetwork.


        :param interfaces: The interfaces of this MetadataNetwork.
        :type interfaces: List[object]
        """

        self._interfaces = interfaces

    @property
    def network(self):
        """Gets the network of this MetadataNetwork.


        :return: The network of this MetadataNetwork.
        :rtype: MetadataNetworkNetwork
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this MetadataNetwork.


        :param network: The network of this MetadataNetwork.
        :type network: MetadataNetworkNetwork
        """

        self._network = network
