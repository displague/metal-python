# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from metal.types.base_model_ import Model
from metal.types.bgp_session import BgpSession
from metal.types.global_bgp_range import GlobalBgpRange
from metal.types.href import Href
from metal import util


class BgpConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, asn: int=None, created_at: datetime=None, deployment_type: str=None, href: str=None, id: str=None, max_prefix: int=10, md5: str=None, project: Href=None, ranges: List[GlobalBgpRange]=None, requested_at: datetime=None, route_object: str=None, sessions: List[BgpSession]=None, status: str=None):
        """BgpConfig - a model defined in OpenAPI

        :param asn: The asn of this BgpConfig.
        :param created_at: The created_at of this BgpConfig.
        :param deployment_type: The deployment_type of this BgpConfig.
        :param href: The href of this BgpConfig.
        :param id: The id of this BgpConfig.
        :param max_prefix: The max_prefix of this BgpConfig.
        :param md5: The md5 of this BgpConfig.
        :param project: The project of this BgpConfig.
        :param ranges: The ranges of this BgpConfig.
        :param requested_at: The requested_at of this BgpConfig.
        :param route_object: The route_object of this BgpConfig.
        :param sessions: The sessions of this BgpConfig.
        :param status: The status of this BgpConfig.
        """
        self.openapi_types = {
            'asn': int,
            'created_at': datetime,
            'deployment_type': str,
            'href': str,
            'id': str,
            'max_prefix': int,
            'md5': str,
            'project': Href,
            'ranges': List[GlobalBgpRange],
            'requested_at': datetime,
            'route_object': str,
            'sessions': List[BgpSession],
            'status': str
        }

        self.attribute_map = {
            'asn': 'asn',
            'created_at': 'created_at',
            'deployment_type': 'deployment_type',
            'href': 'href',
            'id': 'id',
            'max_prefix': 'max_prefix',
            'md5': 'md5',
            'project': 'project',
            'ranges': 'ranges',
            'requested_at': 'requested_at',
            'route_object': 'route_object',
            'sessions': 'sessions',
            'status': 'status'
        }

        self._asn = asn
        self._created_at = created_at
        self._deployment_type = deployment_type
        self._href = href
        self._id = id
        self._max_prefix = max_prefix
        self._md5 = md5
        self._project = project
        self._ranges = ranges
        self._requested_at = requested_at
        self._route_object = route_object
        self._sessions = sessions
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BgpConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BgpConfig of this BgpConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def asn(self):
        """Gets the asn of this BgpConfig.

        Autonomous System Number. ASN is required with Global BGP. With Local BGP the private ASN, 65000, is assigned.

        :return: The asn of this BgpConfig.
        :rtype: int
        """
        return self._asn

    @asn.setter
    def asn(self, asn):
        """Sets the asn of this BgpConfig.

        Autonomous System Number. ASN is required with Global BGP. With Local BGP the private ASN, 65000, is assigned.

        :param asn: The asn of this BgpConfig.
        :type asn: int
        """

        self._asn = asn

    @property
    def created_at(self):
        """Gets the created_at of this BgpConfig.


        :return: The created_at of this BgpConfig.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this BgpConfig.


        :param created_at: The created_at of this BgpConfig.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def deployment_type(self):
        """Gets the deployment_type of this BgpConfig.

        In a Local BGP deployment, a customer uses an internal ASN to control routes within a single Equinix Metal datacenter. This means that the routes are never advertised to the global Internet. Global BGP, on the other hand, requires a customer to have a registered ASN and IP space. 

        :return: The deployment_type of this BgpConfig.
        :rtype: str
        """
        return self._deployment_type

    @deployment_type.setter
    def deployment_type(self, deployment_type):
        """Sets the deployment_type of this BgpConfig.

        In a Local BGP deployment, a customer uses an internal ASN to control routes within a single Equinix Metal datacenter. This means that the routes are never advertised to the global Internet. Global BGP, on the other hand, requires a customer to have a registered ASN and IP space. 

        :param deployment_type: The deployment_type of this BgpConfig.
        :type deployment_type: str
        """
        allowed_values = ["global", "local"]  # noqa: E501
        if deployment_type not in allowed_values:
            raise ValueError(
                "Invalid value for `deployment_type` ({0}), must be one of {1}"
                .format(deployment_type, allowed_values)
            )

        self._deployment_type = deployment_type

    @property
    def href(self):
        """Gets the href of this BgpConfig.


        :return: The href of this BgpConfig.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this BgpConfig.


        :param href: The href of this BgpConfig.
        :type href: str
        """

        self._href = href

    @property
    def id(self):
        """Gets the id of this BgpConfig.


        :return: The id of this BgpConfig.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BgpConfig.


        :param id: The id of this BgpConfig.
        :type id: str
        """

        self._id = id

    @property
    def max_prefix(self):
        """Gets the max_prefix of this BgpConfig.

        The maximum number of route filters allowed per server

        :return: The max_prefix of this BgpConfig.
        :rtype: int
        """
        return self._max_prefix

    @max_prefix.setter
    def max_prefix(self, max_prefix):
        """Sets the max_prefix of this BgpConfig.

        The maximum number of route filters allowed per server

        :param max_prefix: The max_prefix of this BgpConfig.
        :type max_prefix: int
        """

        self._max_prefix = max_prefix

    @property
    def md5(self):
        """Gets the md5 of this BgpConfig.

        (Optional) Password for BGP session in plaintext (not a checksum)

        :return: The md5 of this BgpConfig.
        :rtype: str
        """
        return self._md5

    @md5.setter
    def md5(self, md5):
        """Sets the md5 of this BgpConfig.

        (Optional) Password for BGP session in plaintext (not a checksum)

        :param md5: The md5 of this BgpConfig.
        :type md5: str
        """

        self._md5 = md5

    @property
    def project(self):
        """Gets the project of this BgpConfig.


        :return: The project of this BgpConfig.
        :rtype: Href
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this BgpConfig.


        :param project: The project of this BgpConfig.
        :type project: Href
        """

        self._project = project

    @property
    def ranges(self):
        """Gets the ranges of this BgpConfig.

        The IP block ranges associated to the ASN (Populated in Global BGP only)

        :return: The ranges of this BgpConfig.
        :rtype: List[GlobalBgpRange]
        """
        return self._ranges

    @ranges.setter
    def ranges(self, ranges):
        """Sets the ranges of this BgpConfig.

        The IP block ranges associated to the ASN (Populated in Global BGP only)

        :param ranges: The ranges of this BgpConfig.
        :type ranges: List[GlobalBgpRange]
        """

        self._ranges = ranges

    @property
    def requested_at(self):
        """Gets the requested_at of this BgpConfig.


        :return: The requested_at of this BgpConfig.
        :rtype: datetime
        """
        return self._requested_at

    @requested_at.setter
    def requested_at(self, requested_at):
        """Sets the requested_at of this BgpConfig.


        :param requested_at: The requested_at of this BgpConfig.
        :type requested_at: datetime
        """

        self._requested_at = requested_at

    @property
    def route_object(self):
        """Gets the route_object of this BgpConfig.

        Specifies AS-MACRO (aka AS-SET) to use when building client route filters

        :return: The route_object of this BgpConfig.
        :rtype: str
        """
        return self._route_object

    @route_object.setter
    def route_object(self, route_object):
        """Sets the route_object of this BgpConfig.

        Specifies AS-MACRO (aka AS-SET) to use when building client route filters

        :param route_object: The route_object of this BgpConfig.
        :type route_object: str
        """

        self._route_object = route_object

    @property
    def sessions(self):
        """Gets the sessions of this BgpConfig.

        The direct connections between neighboring routers that want to exchange routing information.

        :return: The sessions of this BgpConfig.
        :rtype: List[BgpSession]
        """
        return self._sessions

    @sessions.setter
    def sessions(self, sessions):
        """Sets the sessions of this BgpConfig.

        The direct connections between neighboring routers that want to exchange routing information.

        :param sessions: The sessions of this BgpConfig.
        :type sessions: List[BgpSession]
        """

        self._sessions = sessions

    @property
    def status(self):
        """Gets the status of this BgpConfig.

        Status of the BGP Config. Status \"requested\" is valid only with the \"global\" deployment_type.

        :return: The status of this BgpConfig.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this BgpConfig.

        Status of the BGP Config. Status \"requested\" is valid only with the \"global\" deployment_type.

        :param status: The status of this BgpConfig.
        :type status: str
        """
        allowed_values = ["requested", "enabled", "disabled"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
