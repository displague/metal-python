# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from metal.types.base_model_ import Model
from metal.types.href import Href
from metal.types.virtual_circuit import VirtualCircuit
from metal.types.vrf import Vrf
from metal.types.vrf_virtual_circuit import VrfVirtualCircuit
from metal import util


class VirtualCircuitListVirtualCircuitsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bill: bool=False, description: str=None, id: str=None, name: str=None, nni_vlan: int=None, port: Href=None, project: Href=None, speed: int=None, status: str=None, tags: List[str]=None, virtual_network: Href=None, vnid: int=None, created_at: datetime=None, updated_at: datetime=None, customer_ip: str=None, md5: str=None, metal_ip: str=None, peer_asn: int=None, subnet: str=None, vrf: Vrf=None):
        """VirtualCircuitListVirtualCircuitsInner - a model defined in OpenAPI

        :param bill: The bill of this VirtualCircuitListVirtualCircuitsInner.
        :param description: The description of this VirtualCircuitListVirtualCircuitsInner.
        :param id: The id of this VirtualCircuitListVirtualCircuitsInner.
        :param name: The name of this VirtualCircuitListVirtualCircuitsInner.
        :param nni_vlan: The nni_vlan of this VirtualCircuitListVirtualCircuitsInner.
        :param port: The port of this VirtualCircuitListVirtualCircuitsInner.
        :param project: The project of this VirtualCircuitListVirtualCircuitsInner.
        :param speed: The speed of this VirtualCircuitListVirtualCircuitsInner.
        :param status: The status of this VirtualCircuitListVirtualCircuitsInner.
        :param tags: The tags of this VirtualCircuitListVirtualCircuitsInner.
        :param virtual_network: The virtual_network of this VirtualCircuitListVirtualCircuitsInner.
        :param vnid: The vnid of this VirtualCircuitListVirtualCircuitsInner.
        :param created_at: The created_at of this VirtualCircuitListVirtualCircuitsInner.
        :param updated_at: The updated_at of this VirtualCircuitListVirtualCircuitsInner.
        :param customer_ip: The customer_ip of this VirtualCircuitListVirtualCircuitsInner.
        :param md5: The md5 of this VirtualCircuitListVirtualCircuitsInner.
        :param metal_ip: The metal_ip of this VirtualCircuitListVirtualCircuitsInner.
        :param peer_asn: The peer_asn of this VirtualCircuitListVirtualCircuitsInner.
        :param subnet: The subnet of this VirtualCircuitListVirtualCircuitsInner.
        :param vrf: The vrf of this VirtualCircuitListVirtualCircuitsInner.
        """
        self.openapi_types = {
            'bill': bool,
            'description': str,
            'id': str,
            'name': str,
            'nni_vlan': int,
            'port': Href,
            'project': Href,
            'speed': int,
            'status': str,
            'tags': List[str],
            'virtual_network': Href,
            'vnid': int,
            'created_at': datetime,
            'updated_at': datetime,
            'customer_ip': str,
            'md5': str,
            'metal_ip': str,
            'peer_asn': int,
            'subnet': str,
            'vrf': Vrf
        }

        self.attribute_map = {
            'bill': 'bill',
            'description': 'description',
            'id': 'id',
            'name': 'name',
            'nni_vlan': 'nni_vlan',
            'port': 'port',
            'project': 'project',
            'speed': 'speed',
            'status': 'status',
            'tags': 'tags',
            'virtual_network': 'virtual_network',
            'vnid': 'vnid',
            'created_at': 'created_at',
            'updated_at': 'updated_at',
            'customer_ip': 'customer_ip',
            'md5': 'md5',
            'metal_ip': 'metal_ip',
            'peer_asn': 'peer_asn',
            'subnet': 'subnet',
            'vrf': 'vrf'
        }

        self._bill = bill
        self._description = description
        self._id = id
        self._name = name
        self._nni_vlan = nni_vlan
        self._port = port
        self._project = project
        self._speed = speed
        self._status = status
        self._tags = tags
        self._virtual_network = virtual_network
        self._vnid = vnid
        self._created_at = created_at
        self._updated_at = updated_at
        self._customer_ip = customer_ip
        self._md5 = md5
        self._metal_ip = metal_ip
        self._peer_asn = peer_asn
        self._subnet = subnet
        self._vrf = vrf

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VirtualCircuitListVirtualCircuitsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VirtualCircuitList_virtual_circuits_inner of this VirtualCircuitListVirtualCircuitsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bill(self):
        """Gets the bill of this VirtualCircuitListVirtualCircuitsInner.

        True if the Virtual Circuit is being billed. Currently, only Virtual Circuits of Fabric VCs (Metal Billed) will be billed. Usage will start the first time the Virtual Circuit becomes active, and will not stop until it is deleted from Metal.

        :return: The bill of this VirtualCircuitListVirtualCircuitsInner.
        :rtype: bool
        """
        return self._bill

    @bill.setter
    def bill(self, bill):
        """Sets the bill of this VirtualCircuitListVirtualCircuitsInner.

        True if the Virtual Circuit is being billed. Currently, only Virtual Circuits of Fabric VCs (Metal Billed) will be billed. Usage will start the first time the Virtual Circuit becomes active, and will not stop until it is deleted from Metal.

        :param bill: The bill of this VirtualCircuitListVirtualCircuitsInner.
        :type bill: bool
        """
        if bill is None:
            raise ValueError("Invalid value for `bill`, must not be `None`")

        self._bill = bill

    @property
    def description(self):
        """Gets the description of this VirtualCircuitListVirtualCircuitsInner.


        :return: The description of this VirtualCircuitListVirtualCircuitsInner.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this VirtualCircuitListVirtualCircuitsInner.


        :param description: The description of this VirtualCircuitListVirtualCircuitsInner.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def id(self):
        """Gets the id of this VirtualCircuitListVirtualCircuitsInner.


        :return: The id of this VirtualCircuitListVirtualCircuitsInner.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VirtualCircuitListVirtualCircuitsInner.


        :param id: The id of this VirtualCircuitListVirtualCircuitsInner.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this VirtualCircuitListVirtualCircuitsInner.


        :return: The name of this VirtualCircuitListVirtualCircuitsInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VirtualCircuitListVirtualCircuitsInner.


        :param name: The name of this VirtualCircuitListVirtualCircuitsInner.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def nni_vlan(self):
        """Gets the nni_vlan of this VirtualCircuitListVirtualCircuitsInner.


        :return: The nni_vlan of this VirtualCircuitListVirtualCircuitsInner.
        :rtype: int
        """
        return self._nni_vlan

    @nni_vlan.setter
    def nni_vlan(self, nni_vlan):
        """Sets the nni_vlan of this VirtualCircuitListVirtualCircuitsInner.


        :param nni_vlan: The nni_vlan of this VirtualCircuitListVirtualCircuitsInner.
        :type nni_vlan: int
        """
        if nni_vlan is None:
            raise ValueError("Invalid value for `nni_vlan`, must not be `None`")

        self._nni_vlan = nni_vlan

    @property
    def port(self):
        """Gets the port of this VirtualCircuitListVirtualCircuitsInner.


        :return: The port of this VirtualCircuitListVirtualCircuitsInner.
        :rtype: Href
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this VirtualCircuitListVirtualCircuitsInner.


        :param port: The port of this VirtualCircuitListVirtualCircuitsInner.
        :type port: Href
        """
        if port is None:
            raise ValueError("Invalid value for `port`, must not be `None`")

        self._port = port

    @property
    def project(self):
        """Gets the project of this VirtualCircuitListVirtualCircuitsInner.


        :return: The project of this VirtualCircuitListVirtualCircuitsInner.
        :rtype: Href
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this VirtualCircuitListVirtualCircuitsInner.


        :param project: The project of this VirtualCircuitListVirtualCircuitsInner.
        :type project: Href
        """
        if project is None:
            raise ValueError("Invalid value for `project`, must not be `None`")

        self._project = project

    @property
    def speed(self):
        """Gets the speed of this VirtualCircuitListVirtualCircuitsInner.

        integer representing bps speed

        :return: The speed of this VirtualCircuitListVirtualCircuitsInner.
        :rtype: int
        """
        return self._speed

    @speed.setter
    def speed(self, speed):
        """Sets the speed of this VirtualCircuitListVirtualCircuitsInner.

        integer representing bps speed

        :param speed: The speed of this VirtualCircuitListVirtualCircuitsInner.
        :type speed: int
        """

        self._speed = speed

    @property
    def status(self):
        """Gets the status of this VirtualCircuitListVirtualCircuitsInner.


        :return: The status of this VirtualCircuitListVirtualCircuitsInner.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this VirtualCircuitListVirtualCircuitsInner.


        :param status: The status of this VirtualCircuitListVirtualCircuitsInner.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def tags(self):
        """Gets the tags of this VirtualCircuitListVirtualCircuitsInner.


        :return: The tags of this VirtualCircuitListVirtualCircuitsInner.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this VirtualCircuitListVirtualCircuitsInner.


        :param tags: The tags of this VirtualCircuitListVirtualCircuitsInner.
        :type tags: List[str]
        """
        if tags is None:
            raise ValueError("Invalid value for `tags`, must not be `None`")

        self._tags = tags

    @property
    def virtual_network(self):
        """Gets the virtual_network of this VirtualCircuitListVirtualCircuitsInner.


        :return: The virtual_network of this VirtualCircuitListVirtualCircuitsInner.
        :rtype: Href
        """
        return self._virtual_network

    @virtual_network.setter
    def virtual_network(self, virtual_network):
        """Sets the virtual_network of this VirtualCircuitListVirtualCircuitsInner.


        :param virtual_network: The virtual_network of this VirtualCircuitListVirtualCircuitsInner.
        :type virtual_network: Href
        """
        if virtual_network is None:
            raise ValueError("Invalid value for `virtual_network`, must not be `None`")

        self._virtual_network = virtual_network

    @property
    def vnid(self):
        """Gets the vnid of this VirtualCircuitListVirtualCircuitsInner.


        :return: The vnid of this VirtualCircuitListVirtualCircuitsInner.
        :rtype: int
        """
        return self._vnid

    @vnid.setter
    def vnid(self, vnid):
        """Sets the vnid of this VirtualCircuitListVirtualCircuitsInner.


        :param vnid: The vnid of this VirtualCircuitListVirtualCircuitsInner.
        :type vnid: int
        """
        if vnid is None:
            raise ValueError("Invalid value for `vnid`, must not be `None`")

        self._vnid = vnid

    @property
    def created_at(self):
        """Gets the created_at of this VirtualCircuitListVirtualCircuitsInner.


        :return: The created_at of this VirtualCircuitListVirtualCircuitsInner.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this VirtualCircuitListVirtualCircuitsInner.


        :param created_at: The created_at of this VirtualCircuitListVirtualCircuitsInner.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this VirtualCircuitListVirtualCircuitsInner.


        :return: The updated_at of this VirtualCircuitListVirtualCircuitsInner.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this VirtualCircuitListVirtualCircuitsInner.


        :param updated_at: The updated_at of this VirtualCircuitListVirtualCircuitsInner.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def customer_ip(self):
        """Gets the customer_ip of this VirtualCircuitListVirtualCircuitsInner.

        An IP address from the subnet that will be used on the Customer side. This parameter is optional, but if supplied, we will use the other usable IP address in the subnet as the Metal IP. By default, the last usable IP address in the subnet will be used.

        :return: The customer_ip of this VirtualCircuitListVirtualCircuitsInner.
        :rtype: str
        """
        return self._customer_ip

    @customer_ip.setter
    def customer_ip(self, customer_ip):
        """Sets the customer_ip of this VirtualCircuitListVirtualCircuitsInner.

        An IP address from the subnet that will be used on the Customer side. This parameter is optional, but if supplied, we will use the other usable IP address in the subnet as the Metal IP. By default, the last usable IP address in the subnet will be used.

        :param customer_ip: The customer_ip of this VirtualCircuitListVirtualCircuitsInner.
        :type customer_ip: str
        """

        self._customer_ip = customer_ip

    @property
    def md5(self):
        """Gets the md5 of this VirtualCircuitListVirtualCircuitsInner.

        The MD5 password for the BGP peering in plaintext (not a checksum).

        :return: The md5 of this VirtualCircuitListVirtualCircuitsInner.
        :rtype: str
        """
        return self._md5

    @md5.setter
    def md5(self, md5):
        """Sets the md5 of this VirtualCircuitListVirtualCircuitsInner.

        The MD5 password for the BGP peering in plaintext (not a checksum).

        :param md5: The md5 of this VirtualCircuitListVirtualCircuitsInner.
        :type md5: str
        """

        self._md5 = md5

    @property
    def metal_ip(self):
        """Gets the metal_ip of this VirtualCircuitListVirtualCircuitsInner.

        An IP address from the subnet that will be used on the Metal side. This parameter is optional, but if supplied, we will use the other usable IP address in the subnet as the Customer IP. By default, the first usable IP address in the subnet will be used.

        :return: The metal_ip of this VirtualCircuitListVirtualCircuitsInner.
        :rtype: str
        """
        return self._metal_ip

    @metal_ip.setter
    def metal_ip(self, metal_ip):
        """Sets the metal_ip of this VirtualCircuitListVirtualCircuitsInner.

        An IP address from the subnet that will be used on the Metal side. This parameter is optional, but if supplied, we will use the other usable IP address in the subnet as the Customer IP. By default, the first usable IP address in the subnet will be used.

        :param metal_ip: The metal_ip of this VirtualCircuitListVirtualCircuitsInner.
        :type metal_ip: str
        """

        self._metal_ip = metal_ip

    @property
    def peer_asn(self):
        """Gets the peer_asn of this VirtualCircuitListVirtualCircuitsInner.

        The peer ASN that will be used with the VRF on the Virtual Circuit.

        :return: The peer_asn of this VirtualCircuitListVirtualCircuitsInner.
        :rtype: int
        """
        return self._peer_asn

    @peer_asn.setter
    def peer_asn(self, peer_asn):
        """Sets the peer_asn of this VirtualCircuitListVirtualCircuitsInner.

        The peer ASN that will be used with the VRF on the Virtual Circuit.

        :param peer_asn: The peer_asn of this VirtualCircuitListVirtualCircuitsInner.
        :type peer_asn: int
        """

        self._peer_asn = peer_asn

    @property
    def subnet(self):
        """Gets the subnet of this VirtualCircuitListVirtualCircuitsInner.

        The /30 or /31 subnet of one of the VRF IP Blocks that will be used with the VRF for the Virtual Circuit. This subnet does not have to be an existing VRF IP reservation, as we will create the VRF IP reservation on creation if it does not exist. The Metal IP and Customer IP must be IPs from this subnet. For /30 subnets, the network and broadcast IPs cannot be used as the Metal or Customer IP.

        :return: The subnet of this VirtualCircuitListVirtualCircuitsInner.
        :rtype: str
        """
        return self._subnet

    @subnet.setter
    def subnet(self, subnet):
        """Sets the subnet of this VirtualCircuitListVirtualCircuitsInner.

        The /30 or /31 subnet of one of the VRF IP Blocks that will be used with the VRF for the Virtual Circuit. This subnet does not have to be an existing VRF IP reservation, as we will create the VRF IP reservation on creation if it does not exist. The Metal IP and Customer IP must be IPs from this subnet. For /30 subnets, the network and broadcast IPs cannot be used as the Metal or Customer IP.

        :param subnet: The subnet of this VirtualCircuitListVirtualCircuitsInner.
        :type subnet: str
        """

        self._subnet = subnet

    @property
    def vrf(self):
        """Gets the vrf of this VirtualCircuitListVirtualCircuitsInner.


        :return: The vrf of this VirtualCircuitListVirtualCircuitsInner.
        :rtype: Vrf
        """
        return self._vrf

    @vrf.setter
    def vrf(self, vrf):
        """Sets the vrf of this VirtualCircuitListVirtualCircuitsInner.


        :param vrf: The vrf of this VirtualCircuitListVirtualCircuitsInner.
        :type vrf: Vrf
        """

        self._vrf = vrf
