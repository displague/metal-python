# coding: utf-8

"""
    Metal API

    This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>.   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@equinixmetal.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from metal.configuration import Configuration


class SupportRequestInput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'subject': 'str',
        'message': 'str',
        'project_id': 'str',
        'device_id': 'str',
        'priority': 'str'
    }

    attribute_map = {
        'subject': 'subject',
        'message': 'message',
        'project_id': 'project_id',
        'device_id': 'device_id',
        'priority': 'priority'
    }

    def __init__(self, subject=None, message=None, project_id=None, device_id=None, priority=None, local_vars_configuration=None):  # noqa: E501
        """SupportRequestInput - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._subject = None
        self._message = None
        self._project_id = None
        self._device_id = None
        self._priority = None
        self.discriminator = None

        self.subject = subject
        self.message = message
        if project_id is not None:
            self.project_id = project_id
        if device_id is not None:
            self.device_id = device_id
        if priority is not None:
            self.priority = priority

    @property
    def subject(self):
        """Gets the subject of this SupportRequestInput.  # noqa: E501


        :return: The subject of this SupportRequestInput.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this SupportRequestInput.


        :param subject: The subject of this SupportRequestInput.  # noqa: E501
        :type subject: str
        """
        if self.local_vars_configuration.client_side_validation and subject is None:  # noqa: E501
            raise ValueError("Invalid value for `subject`, must not be `None`")  # noqa: E501

        self._subject = subject

    @property
    def message(self):
        """Gets the message of this SupportRequestInput.  # noqa: E501


        :return: The message of this SupportRequestInput.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this SupportRequestInput.


        :param message: The message of this SupportRequestInput.  # noqa: E501
        :type message: str
        """
        if self.local_vars_configuration.client_side_validation and message is None:  # noqa: E501
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501

        self._message = message

    @property
    def project_id(self):
        """Gets the project_id of this SupportRequestInput.  # noqa: E501


        :return: The project_id of this SupportRequestInput.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this SupportRequestInput.


        :param project_id: The project_id of this SupportRequestInput.  # noqa: E501
        :type project_id: str
        """

        self._project_id = project_id

    @property
    def device_id(self):
        """Gets the device_id of this SupportRequestInput.  # noqa: E501


        :return: The device_id of this SupportRequestInput.  # noqa: E501
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this SupportRequestInput.


        :param device_id: The device_id of this SupportRequestInput.  # noqa: E501
        :type device_id: str
        """

        self._device_id = device_id

    @property
    def priority(self):
        """Gets the priority of this SupportRequestInput.  # noqa: E501


        :return: The priority of this SupportRequestInput.  # noqa: E501
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this SupportRequestInput.


        :param priority: The priority of this SupportRequestInput.  # noqa: E501
        :type priority: str
        """
        allowed_values = ["urgent", "high", "medium", "low"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and priority not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `priority` ({0}), must be one of {1}"  # noqa: E501
                .format(priority, allowed_values)
            )

        self._priority = priority

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SupportRequestInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SupportRequestInput):
            return True

        return self.to_dict() != other.to_dict()
