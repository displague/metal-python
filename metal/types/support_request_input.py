# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from metal.types.base_model_ import Model
from metal import util


class SupportRequestInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, device_id: str=None, message: str=None, priority: str=None, project_id: str=None, subject: str=None):
        """SupportRequestInput - a model defined in OpenAPI

        :param device_id: The device_id of this SupportRequestInput.
        :param message: The message of this SupportRequestInput.
        :param priority: The priority of this SupportRequestInput.
        :param project_id: The project_id of this SupportRequestInput.
        :param subject: The subject of this SupportRequestInput.
        """
        self.openapi_types = {
            'device_id': str,
            'message': str,
            'priority': str,
            'project_id': str,
            'subject': str
        }

        self.attribute_map = {
            'device_id': 'device_id',
            'message': 'message',
            'priority': 'priority',
            'project_id': 'project_id',
            'subject': 'subject'
        }

        self._device_id = device_id
        self._message = message
        self._priority = priority
        self._project_id = project_id
        self._subject = subject

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SupportRequestInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SupportRequestInput of this SupportRequestInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def device_id(self):
        """Gets the device_id of this SupportRequestInput.


        :return: The device_id of this SupportRequestInput.
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this SupportRequestInput.


        :param device_id: The device_id of this SupportRequestInput.
        :type device_id: str
        """

        self._device_id = device_id

    @property
    def message(self):
        """Gets the message of this SupportRequestInput.


        :return: The message of this SupportRequestInput.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this SupportRequestInput.


        :param message: The message of this SupportRequestInput.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message

    @property
    def priority(self):
        """Gets the priority of this SupportRequestInput.


        :return: The priority of this SupportRequestInput.
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this SupportRequestInput.


        :param priority: The priority of this SupportRequestInput.
        :type priority: str
        """
        allowed_values = ["urgent", "high", "medium", "low"]  # noqa: E501
        if priority not in allowed_values:
            raise ValueError(
                "Invalid value for `priority` ({0}), must be one of {1}"
                .format(priority, allowed_values)
            )

        self._priority = priority

    @property
    def project_id(self):
        """Gets the project_id of this SupportRequestInput.


        :return: The project_id of this SupportRequestInput.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this SupportRequestInput.


        :param project_id: The project_id of this SupportRequestInput.
        :type project_id: str
        """

        self._project_id = project_id

    @property
    def subject(self):
        """Gets the subject of this SupportRequestInput.


        :return: The subject of this SupportRequestInput.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this SupportRequestInput.


        :param subject: The subject of this SupportRequestInput.
        :type subject: str
        """
        if subject is None:
            raise ValueError("Invalid value for `subject`, must not be `None`")

        self._subject = subject
