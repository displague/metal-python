# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from metal.types.base_model_ import Model
from metal.types.email_input import EmailInput
from metal import util


class UserCreateInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, avatar: file=None, company_name: str=None, company_url: str=None, customdata: object=None, emails: List[EmailInput]=None, first_name: str=None, last_name: str=None, level: str=None, locked: bool=None, password: str=None, phone_number: str=None, social_accounts: object=None, timezone: str=None, title: str=None, two_factor_auth: str=None, verified_at: datetime=None, invitation_id: str=None, nonce: str=None):
        """UserCreateInput - a model defined in OpenAPI

        :param avatar: The avatar of this UserCreateInput.
        :param company_name: The company_name of this UserCreateInput.
        :param company_url: The company_url of this UserCreateInput.
        :param customdata: The customdata of this UserCreateInput.
        :param emails: The emails of this UserCreateInput.
        :param first_name: The first_name of this UserCreateInput.
        :param last_name: The last_name of this UserCreateInput.
        :param level: The level of this UserCreateInput.
        :param locked: The locked of this UserCreateInput.
        :param password: The password of this UserCreateInput.
        :param phone_number: The phone_number of this UserCreateInput.
        :param social_accounts: The social_accounts of this UserCreateInput.
        :param timezone: The timezone of this UserCreateInput.
        :param title: The title of this UserCreateInput.
        :param two_factor_auth: The two_factor_auth of this UserCreateInput.
        :param verified_at: The verified_at of this UserCreateInput.
        :param invitation_id: The invitation_id of this UserCreateInput.
        :param nonce: The nonce of this UserCreateInput.
        """
        self.openapi_types = {
            'avatar': file,
            'company_name': str,
            'company_url': str,
            'customdata': object,
            'emails': List[EmailInput],
            'first_name': str,
            'last_name': str,
            'level': str,
            'locked': bool,
            'password': str,
            'phone_number': str,
            'social_accounts': object,
            'timezone': str,
            'title': str,
            'two_factor_auth': str,
            'verified_at': datetime,
            'invitation_id': str,
            'nonce': str
        }

        self.attribute_map = {
            'avatar': 'avatar',
            'company_name': 'company_name',
            'company_url': 'company_url',
            'customdata': 'customdata',
            'emails': 'emails',
            'first_name': 'first_name',
            'last_name': 'last_name',
            'level': 'level',
            'locked': 'locked',
            'password': 'password',
            'phone_number': 'phone_number',
            'social_accounts': 'social_accounts',
            'timezone': 'timezone',
            'title': 'title',
            'two_factor_auth': 'two_factor_auth',
            'verified_at': 'verified_at',
            'invitation_id': 'invitation_id',
            'nonce': 'nonce'
        }

        self._avatar = avatar
        self._company_name = company_name
        self._company_url = company_url
        self._customdata = customdata
        self._emails = emails
        self._first_name = first_name
        self._last_name = last_name
        self._level = level
        self._locked = locked
        self._password = password
        self._phone_number = phone_number
        self._social_accounts = social_accounts
        self._timezone = timezone
        self._title = title
        self._two_factor_auth = two_factor_auth
        self._verified_at = verified_at
        self._invitation_id = invitation_id
        self._nonce = nonce

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserCreateInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserCreateInput of this UserCreateInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def avatar(self):
        """Gets the avatar of this UserCreateInput.


        :return: The avatar of this UserCreateInput.
        :rtype: file
        """
        return self._avatar

    @avatar.setter
    def avatar(self, avatar):
        """Sets the avatar of this UserCreateInput.


        :param avatar: The avatar of this UserCreateInput.
        :type avatar: file
        """

        self._avatar = avatar

    @property
    def company_name(self):
        """Gets the company_name of this UserCreateInput.


        :return: The company_name of this UserCreateInput.
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this UserCreateInput.


        :param company_name: The company_name of this UserCreateInput.
        :type company_name: str
        """

        self._company_name = company_name

    @property
    def company_url(self):
        """Gets the company_url of this UserCreateInput.


        :return: The company_url of this UserCreateInput.
        :rtype: str
        """
        return self._company_url

    @company_url.setter
    def company_url(self, company_url):
        """Sets the company_url of this UserCreateInput.


        :param company_url: The company_url of this UserCreateInput.
        :type company_url: str
        """

        self._company_url = company_url

    @property
    def customdata(self):
        """Gets the customdata of this UserCreateInput.


        :return: The customdata of this UserCreateInput.
        :rtype: object
        """
        return self._customdata

    @customdata.setter
    def customdata(self, customdata):
        """Sets the customdata of this UserCreateInput.


        :param customdata: The customdata of this UserCreateInput.
        :type customdata: object
        """

        self._customdata = customdata

    @property
    def emails(self):
        """Gets the emails of this UserCreateInput.


        :return: The emails of this UserCreateInput.
        :rtype: List[EmailInput]
        """
        return self._emails

    @emails.setter
    def emails(self, emails):
        """Sets the emails of this UserCreateInput.


        :param emails: The emails of this UserCreateInput.
        :type emails: List[EmailInput]
        """
        if emails is None:
            raise ValueError("Invalid value for `emails`, must not be `None`")

        self._emails = emails

    @property
    def first_name(self):
        """Gets the first_name of this UserCreateInput.


        :return: The first_name of this UserCreateInput.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this UserCreateInput.


        :param first_name: The first_name of this UserCreateInput.
        :type first_name: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this UserCreateInput.


        :return: The last_name of this UserCreateInput.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this UserCreateInput.


        :param last_name: The last_name of this UserCreateInput.
        :type last_name: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")

        self._last_name = last_name

    @property
    def level(self):
        """Gets the level of this UserCreateInput.


        :return: The level of this UserCreateInput.
        :rtype: str
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this UserCreateInput.


        :param level: The level of this UserCreateInput.
        :type level: str
        """

        self._level = level

    @property
    def locked(self):
        """Gets the locked of this UserCreateInput.


        :return: The locked of this UserCreateInput.
        :rtype: bool
        """
        return self._locked

    @locked.setter
    def locked(self, locked):
        """Sets the locked of this UserCreateInput.


        :param locked: The locked of this UserCreateInput.
        :type locked: bool
        """

        self._locked = locked

    @property
    def password(self):
        """Gets the password of this UserCreateInput.


        :return: The password of this UserCreateInput.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this UserCreateInput.


        :param password: The password of this UserCreateInput.
        :type password: str
        """

        self._password = password

    @property
    def phone_number(self):
        """Gets the phone_number of this UserCreateInput.


        :return: The phone_number of this UserCreateInput.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this UserCreateInput.


        :param phone_number: The phone_number of this UserCreateInput.
        :type phone_number: str
        """

        self._phone_number = phone_number

    @property
    def social_accounts(self):
        """Gets the social_accounts of this UserCreateInput.


        :return: The social_accounts of this UserCreateInput.
        :rtype: object
        """
        return self._social_accounts

    @social_accounts.setter
    def social_accounts(self, social_accounts):
        """Sets the social_accounts of this UserCreateInput.


        :param social_accounts: The social_accounts of this UserCreateInput.
        :type social_accounts: object
        """

        self._social_accounts = social_accounts

    @property
    def timezone(self):
        """Gets the timezone of this UserCreateInput.


        :return: The timezone of this UserCreateInput.
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this UserCreateInput.


        :param timezone: The timezone of this UserCreateInput.
        :type timezone: str
        """

        self._timezone = timezone

    @property
    def title(self):
        """Gets the title of this UserCreateInput.


        :return: The title of this UserCreateInput.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this UserCreateInput.


        :param title: The title of this UserCreateInput.
        :type title: str
        """

        self._title = title

    @property
    def two_factor_auth(self):
        """Gets the two_factor_auth of this UserCreateInput.


        :return: The two_factor_auth of this UserCreateInput.
        :rtype: str
        """
        return self._two_factor_auth

    @two_factor_auth.setter
    def two_factor_auth(self, two_factor_auth):
        """Sets the two_factor_auth of this UserCreateInput.


        :param two_factor_auth: The two_factor_auth of this UserCreateInput.
        :type two_factor_auth: str
        """

        self._two_factor_auth = two_factor_auth

    @property
    def verified_at(self):
        """Gets the verified_at of this UserCreateInput.


        :return: The verified_at of this UserCreateInput.
        :rtype: datetime
        """
        return self._verified_at

    @verified_at.setter
    def verified_at(self, verified_at):
        """Sets the verified_at of this UserCreateInput.


        :param verified_at: The verified_at of this UserCreateInput.
        :type verified_at: datetime
        """

        self._verified_at = verified_at

    @property
    def invitation_id(self):
        """Gets the invitation_id of this UserCreateInput.


        :return: The invitation_id of this UserCreateInput.
        :rtype: str
        """
        return self._invitation_id

    @invitation_id.setter
    def invitation_id(self, invitation_id):
        """Sets the invitation_id of this UserCreateInput.


        :param invitation_id: The invitation_id of this UserCreateInput.
        :type invitation_id: str
        """

        self._invitation_id = invitation_id

    @property
    def nonce(self):
        """Gets the nonce of this UserCreateInput.


        :return: The nonce of this UserCreateInput.
        :rtype: str
        """
        return self._nonce

    @nonce.setter
    def nonce(self, nonce):
        """Sets the nonce of this UserCreateInput.


        :param nonce: The nonce of this UserCreateInput.
        :type nonce: str
        """

        self._nonce = nonce
