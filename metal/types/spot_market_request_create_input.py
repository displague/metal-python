# coding: utf-8

"""
    Metal API

    # Introduction Equinix Metal provides a RESTful HTTP API which can be reached at <https://api.equinix.com/metal/v1>. This document describes the API and how to use it.  The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account. Every feature of the Equinix Metal web interface is accessible through the API.  The API docs are generated from the Equinix Metal OpenAPI specification and are officially hosted at <https://metal.equinix.com/developers/api>.  # Common Parameters  The Equinix Metal API uses a few methods to minimize network traffic and improve throughput. These parameters are not used in all API calls, but are used often enough to warrant their own section. Look for these parameters in the documentation for the API calls that support them.  ## Pagination  Pagination is used to limit the number of results returned in a single request. The API will return a maximum of 100 results per page. To retrieve additional results, you can use the `page` and `per_page` query parameters.  The `page` parameter is used to specify the page number. The first page is `1`. The `per_page` parameter is used to specify the number of results per page. The maximum number of results differs by resource type.  ## Sorting  Where offered, the API allows you to sort results by a specific field. To sort results use the `sort_by` query parameter with the root level field name as the value. The `sort_direction` parameter is used to specify the sort direction, either either `asc` (ascending) or `desc` (descending).  ## Filtering  Filtering is used to limit the results returned in a single request. The API supports filtering by certain fields in the response. To filter results, you can use the field as a query parameter.  For example, to filter the IP list to only return public IPv4 addresses, you can filter by the `type` field, as in the following request:  ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/projects/id/ips?type=public_ipv4 ```  Only IP addresses with the `type` field set to `public_ipv4` will be returned.  ## Searching  Searching is used to find matching resources using multiple field comparissons. The API supports searching in resources that define this behavior. The fields available for search differ by resource, as does the search strategy.  To search resources you can use the `search` query parameter.  ## Include and Exclude  For resources that contain references to other resources, sucha as a Device that refers to the Project it resides in, the Equinix Metal API will returns `href` values (API links) to the associated resource.  ```json {   ...   \"project\": {     \"href\": \"/metal/v1/projects/f3f131c8-f302-49ef-8c44-9405022dc6dd\"   } } ```  If you're going need the project details, you can avoid a second API request.  Specify the contained `href` resources and collections that you'd like to have included in the response using the `include` query parameter.  For example:  ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/user?include=projects ```  The `include` parameter is generally accepted in `GET`, `POST`, `PUT`, and `PATCH` requests where `href` resources are presented.  To have multiple resources include, use a comma-separated list (e.g. `?include=emails,projects,memberships`).  ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/user?include=emails,projects,memberships ```  You may also include nested associations up to three levels deep using dot notation (`?include=memberships.projects`):  ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/user?include=memberships.projects ```  To exclude resources, and optimize response delivery, use the `exclude` query parameter. The `exclude` parameter is generally accepted in `GET`, `POST`, `PUT`, and `PATCH` requests for fields with nested object responses. When excluded, these fields will be replaced with an object that contains only an `href` field.   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@equinixmetal.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from metal.configuration import Configuration


class SpotMarketRequestCreateInput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'devices_max': 'int',
        'devices_min': 'int',
        'end_at': 'datetime',
        'facilities': 'list[str]',
        'instance_attributes': 'SpotMarketRequestCreateInputInstanceAttributes',
        'max_bid_price': 'float',
        'metro': 'str'
    }

    attribute_map = {
        'devices_max': 'devices_max',
        'devices_min': 'devices_min',
        'end_at': 'end_at',
        'facilities': 'facilities',
        'instance_attributes': 'instance_attributes',
        'max_bid_price': 'max_bid_price',
        'metro': 'metro'
    }

    def __init__(self, devices_max=None, devices_min=None, end_at=None, facilities=None, instance_attributes=None, max_bid_price=None, metro=None, local_vars_configuration=None):  # noqa: E501
        """SpotMarketRequestCreateInput - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._devices_max = None
        self._devices_min = None
        self._end_at = None
        self._facilities = None
        self._instance_attributes = None
        self._max_bid_price = None
        self._metro = None
        self.discriminator = None

        if devices_max is not None:
            self.devices_max = devices_max
        if devices_min is not None:
            self.devices_min = devices_min
        if end_at is not None:
            self.end_at = end_at
        if facilities is not None:
            self.facilities = facilities
        if instance_attributes is not None:
            self.instance_attributes = instance_attributes
        if max_bid_price is not None:
            self.max_bid_price = max_bid_price
        if metro is not None:
            self.metro = metro

    @property
    def devices_max(self):
        """Gets the devices_max of this SpotMarketRequestCreateInput.  # noqa: E501


        :return: The devices_max of this SpotMarketRequestCreateInput.  # noqa: E501
        :rtype: int
        """
        return self._devices_max

    @devices_max.setter
    def devices_max(self, devices_max):
        """Sets the devices_max of this SpotMarketRequestCreateInput.


        :param devices_max: The devices_max of this SpotMarketRequestCreateInput.  # noqa: E501
        :type devices_max: int
        """

        self._devices_max = devices_max

    @property
    def devices_min(self):
        """Gets the devices_min of this SpotMarketRequestCreateInput.  # noqa: E501


        :return: The devices_min of this SpotMarketRequestCreateInput.  # noqa: E501
        :rtype: int
        """
        return self._devices_min

    @devices_min.setter
    def devices_min(self, devices_min):
        """Sets the devices_min of this SpotMarketRequestCreateInput.


        :param devices_min: The devices_min of this SpotMarketRequestCreateInput.  # noqa: E501
        :type devices_min: int
        """

        self._devices_min = devices_min

    @property
    def end_at(self):
        """Gets the end_at of this SpotMarketRequestCreateInput.  # noqa: E501


        :return: The end_at of this SpotMarketRequestCreateInput.  # noqa: E501
        :rtype: datetime
        """
        return self._end_at

    @end_at.setter
    def end_at(self, end_at):
        """Sets the end_at of this SpotMarketRequestCreateInput.


        :param end_at: The end_at of this SpotMarketRequestCreateInput.  # noqa: E501
        :type end_at: datetime
        """

        self._end_at = end_at

    @property
    def facilities(self):
        """Gets the facilities of this SpotMarketRequestCreateInput.  # noqa: E501


        :return: The facilities of this SpotMarketRequestCreateInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._facilities

    @facilities.setter
    def facilities(self, facilities):
        """Sets the facilities of this SpotMarketRequestCreateInput.


        :param facilities: The facilities of this SpotMarketRequestCreateInput.  # noqa: E501
        :type facilities: list[str]
        """

        self._facilities = facilities

    @property
    def instance_attributes(self):
        """Gets the instance_attributes of this SpotMarketRequestCreateInput.  # noqa: E501


        :return: The instance_attributes of this SpotMarketRequestCreateInput.  # noqa: E501
        :rtype: SpotMarketRequestCreateInputInstanceAttributes
        """
        return self._instance_attributes

    @instance_attributes.setter
    def instance_attributes(self, instance_attributes):
        """Sets the instance_attributes of this SpotMarketRequestCreateInput.


        :param instance_attributes: The instance_attributes of this SpotMarketRequestCreateInput.  # noqa: E501
        :type instance_attributes: SpotMarketRequestCreateInputInstanceAttributes
        """

        self._instance_attributes = instance_attributes

    @property
    def max_bid_price(self):
        """Gets the max_bid_price of this SpotMarketRequestCreateInput.  # noqa: E501


        :return: The max_bid_price of this SpotMarketRequestCreateInput.  # noqa: E501
        :rtype: float
        """
        return self._max_bid_price

    @max_bid_price.setter
    def max_bid_price(self, max_bid_price):
        """Sets the max_bid_price of this SpotMarketRequestCreateInput.


        :param max_bid_price: The max_bid_price of this SpotMarketRequestCreateInput.  # noqa: E501
        :type max_bid_price: float
        """

        self._max_bid_price = max_bid_price

    @property
    def metro(self):
        """Gets the metro of this SpotMarketRequestCreateInput.  # noqa: E501

        The metro ID or code the spot market request will be created in.  # noqa: E501

        :return: The metro of this SpotMarketRequestCreateInput.  # noqa: E501
        :rtype: str
        """
        return self._metro

    @metro.setter
    def metro(self, metro):
        """Sets the metro of this SpotMarketRequestCreateInput.

        The metro ID or code the spot market request will be created in.  # noqa: E501

        :param metro: The metro of this SpotMarketRequestCreateInput.  # noqa: E501
        :type metro: str
        """

        self._metro = metro

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SpotMarketRequestCreateInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SpotMarketRequestCreateInput):
            return True

        return self.to_dict() != other.to_dict()
