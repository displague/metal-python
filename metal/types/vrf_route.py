# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from metal.types.base_model_ import Model
from metal.types.vrf_route_metal_gateway import VrfRouteMetalGateway
from metal.types.vrf_route_virtual_network import VrfRouteVirtualNetwork
from metal.types.vrf_route_vrf import VrfRouteVrf
from metal import util


class VrfRoute(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, status: str=None, prefix: str=None, next_hop: str=None, type: str=None, created_at: datetime=None, updated_at: datetime=None, metal_gateway: VrfRouteMetalGateway=None, virtual_network: VrfRouteVirtualNetwork=None, vrf: VrfRouteVrf=None, href: str=None):
        """VrfRoute - a model defined in OpenAPI

        :param id: The id of this VrfRoute.
        :param status: The status of this VrfRoute.
        :param prefix: The prefix of this VrfRoute.
        :param next_hop: The next_hop of this VrfRoute.
        :param type: The type of this VrfRoute.
        :param created_at: The created_at of this VrfRoute.
        :param updated_at: The updated_at of this VrfRoute.
        :param metal_gateway: The metal_gateway of this VrfRoute.
        :param virtual_network: The virtual_network of this VrfRoute.
        :param vrf: The vrf of this VrfRoute.
        :param href: The href of this VrfRoute.
        """
        self.openapi_types = {
            'id': str,
            'status': str,
            'prefix': str,
            'next_hop': str,
            'type': str,
            'created_at': datetime,
            'updated_at': datetime,
            'metal_gateway': VrfRouteMetalGateway,
            'virtual_network': VrfRouteVirtualNetwork,
            'vrf': VrfRouteVrf,
            'href': str
        }

        self.attribute_map = {
            'id': 'id',
            'status': 'status',
            'prefix': 'prefix',
            'next_hop': 'next_hop',
            'type': 'type',
            'created_at': 'created_at',
            'updated_at': 'updated_at',
            'metal_gateway': 'metal_gateway',
            'virtual_network': 'virtual_network',
            'vrf': 'vrf',
            'href': 'href'
        }

        self._id = id
        self._status = status
        self._prefix = prefix
        self._next_hop = next_hop
        self._type = type
        self._created_at = created_at
        self._updated_at = updated_at
        self._metal_gateway = metal_gateway
        self._virtual_network = virtual_network
        self._vrf = vrf
        self._href = href

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VrfRoute':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VrfRoute of this VrfRoute.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this VrfRoute.

        The unique identifier for the newly-created resource

        :return: The id of this VrfRoute.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VrfRoute.

        The unique identifier for the newly-created resource

        :param id: The id of this VrfRoute.
        :type id: str
        """

        self._id = id

    @property
    def status(self):
        """Gets the status of this VrfRoute.

        The status of the route. Potential values are \"pending\", \"active\", \"deleting\", and \"error\", representing various lifecycle states of the route and whether or not it has been successfully configured on the network

        :return: The status of this VrfRoute.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this VrfRoute.

        The status of the route. Potential values are \"pending\", \"active\", \"deleting\", and \"error\", representing various lifecycle states of the route and whether or not it has been successfully configured on the network

        :param status: The status of this VrfRoute.
        :type status: str
        """
        allowed_values = ["pending", "active", "deleting", "error"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def prefix(self):
        """Gets the prefix of this VrfRoute.

        The IPv4 prefix for the route, in CIDR-style notation

        :return: The prefix of this VrfRoute.
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this VrfRoute.

        The IPv4 prefix for the route, in CIDR-style notation

        :param prefix: The prefix of this VrfRoute.
        :type prefix: str
        """

        self._prefix = prefix

    @property
    def next_hop(self):
        """Gets the next_hop of this VrfRoute.

        The next-hop IPv4 address for the route

        :return: The next_hop of this VrfRoute.
        :rtype: str
        """
        return self._next_hop

    @next_hop.setter
    def next_hop(self, next_hop):
        """Sets the next_hop of this VrfRoute.

        The next-hop IPv4 address for the route

        :param next_hop: The next_hop of this VrfRoute.
        :type next_hop: str
        """

        self._next_hop = next_hop

    @property
    def type(self):
        """Gets the type of this VrfRoute.

        VRF route type, like 'bgp', 'connected', and 'static'. Currently, only static routes are supported

        :return: The type of this VrfRoute.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this VrfRoute.

        VRF route type, like 'bgp', 'connected', and 'static'. Currently, only static routes are supported

        :param type: The type of this VrfRoute.
        :type type: str
        """
        allowed_values = ["static"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def created_at(self):
        """Gets the created_at of this VrfRoute.


        :return: The created_at of this VrfRoute.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this VrfRoute.


        :param created_at: The created_at of this VrfRoute.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this VrfRoute.


        :return: The updated_at of this VrfRoute.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this VrfRoute.


        :param updated_at: The updated_at of this VrfRoute.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def metal_gateway(self):
        """Gets the metal_gateway of this VrfRoute.


        :return: The metal_gateway of this VrfRoute.
        :rtype: VrfRouteMetalGateway
        """
        return self._metal_gateway

    @metal_gateway.setter
    def metal_gateway(self, metal_gateway):
        """Sets the metal_gateway of this VrfRoute.


        :param metal_gateway: The metal_gateway of this VrfRoute.
        :type metal_gateway: VrfRouteMetalGateway
        """

        self._metal_gateway = metal_gateway

    @property
    def virtual_network(self):
        """Gets the virtual_network of this VrfRoute.


        :return: The virtual_network of this VrfRoute.
        :rtype: VrfRouteVirtualNetwork
        """
        return self._virtual_network

    @virtual_network.setter
    def virtual_network(self, virtual_network):
        """Sets the virtual_network of this VrfRoute.


        :param virtual_network: The virtual_network of this VrfRoute.
        :type virtual_network: VrfRouteVirtualNetwork
        """

        self._virtual_network = virtual_network

    @property
    def vrf(self):
        """Gets the vrf of this VrfRoute.


        :return: The vrf of this VrfRoute.
        :rtype: VrfRouteVrf
        """
        return self._vrf

    @vrf.setter
    def vrf(self, vrf):
        """Sets the vrf of this VrfRoute.


        :param vrf: The vrf of this VrfRoute.
        :type vrf: VrfRouteVrf
        """

        self._vrf = vrf

    @property
    def href(self):
        """Gets the href of this VrfRoute.


        :return: The href of this VrfRoute.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this VrfRoute.


        :param href: The href of this VrfRoute.
        :type href: str
        """

        self._href = href
