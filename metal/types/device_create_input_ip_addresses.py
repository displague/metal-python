# coding: utf-8

"""
    Metal API

    This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>.   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@equinixmetal.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from metal.configuration import Configuration


class DeviceCreateInputIpAddresses(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'address_family': 'float',
        'public': 'bool',
        'cidr': 'float',
        'ip_reservations': 'list[str]'
    }

    attribute_map = {
        'address_family': 'address_family',
        'public': 'public',
        'cidr': 'cidr',
        'ip_reservations': 'ip_reservations'
    }

    def __init__(self, address_family=None, public=True, cidr=None, ip_reservations=None, local_vars_configuration=None):  # noqa: E501
        """DeviceCreateInputIpAddresses - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._address_family = None
        self._public = None
        self._cidr = None
        self._ip_reservations = None
        self.discriminator = None

        if address_family is not None:
            self.address_family = address_family
        if public is not None:
            self.public = public
        if cidr is not None:
            self.cidr = cidr
        if ip_reservations is not None:
            self.ip_reservations = ip_reservations

    @property
    def address_family(self):
        """Gets the address_family of this DeviceCreateInputIpAddresses.  # noqa: E501

        Address Family for IP Address  # noqa: E501

        :return: The address_family of this DeviceCreateInputIpAddresses.  # noqa: E501
        :rtype: float
        """
        return self._address_family

    @address_family.setter
    def address_family(self, address_family):
        """Sets the address_family of this DeviceCreateInputIpAddresses.

        Address Family for IP Address  # noqa: E501

        :param address_family: The address_family of this DeviceCreateInputIpAddresses.  # noqa: E501
        :type address_family: float
        """

        self._address_family = address_family

    @property
    def public(self):
        """Gets the public of this DeviceCreateInputIpAddresses.  # noqa: E501

        Address Type for IP Address  # noqa: E501

        :return: The public of this DeviceCreateInputIpAddresses.  # noqa: E501
        :rtype: bool
        """
        return self._public

    @public.setter
    def public(self, public):
        """Sets the public of this DeviceCreateInputIpAddresses.

        Address Type for IP Address  # noqa: E501

        :param public: The public of this DeviceCreateInputIpAddresses.  # noqa: E501
        :type public: bool
        """

        self._public = public

    @property
    def cidr(self):
        """Gets the cidr of this DeviceCreateInputIpAddresses.  # noqa: E501

        Cidr Size for the IP Block created. Valid values depends on the operating system being provisioned. (28..32 for IPv4 addresses, 124..127 for IPv6 addresses)  # noqa: E501

        :return: The cidr of this DeviceCreateInputIpAddresses.  # noqa: E501
        :rtype: float
        """
        return self._cidr

    @cidr.setter
    def cidr(self, cidr):
        """Sets the cidr of this DeviceCreateInputIpAddresses.

        Cidr Size for the IP Block created. Valid values depends on the operating system being provisioned. (28..32 for IPv4 addresses, 124..127 for IPv6 addresses)  # noqa: E501

        :param cidr: The cidr of this DeviceCreateInputIpAddresses.  # noqa: E501
        :type cidr: float
        """

        self._cidr = cidr

    @property
    def ip_reservations(self):
        """Gets the ip_reservations of this DeviceCreateInputIpAddresses.  # noqa: E501

        UUIDs of any IP reservations to use when assigning IPs  # noqa: E501

        :return: The ip_reservations of this DeviceCreateInputIpAddresses.  # noqa: E501
        :rtype: list[str]
        """
        return self._ip_reservations

    @ip_reservations.setter
    def ip_reservations(self, ip_reservations):
        """Sets the ip_reservations of this DeviceCreateInputIpAddresses.

        UUIDs of any IP reservations to use when assigning IPs  # noqa: E501

        :param ip_reservations: The ip_reservations of this DeviceCreateInputIpAddresses.  # noqa: E501
        :type ip_reservations: list[str]
        """

        self._ip_reservations = ip_reservations

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceCreateInputIpAddresses):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DeviceCreateInputIpAddresses):
            return True

        return self.to_dict() != other.to_dict()
