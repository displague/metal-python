# coding: utf-8

"""
    Metal API

    # Introduction Equinix Metal provides a RESTful HTTP API which can be reached at <https://api.equinix.com/metal/v1>. This document describes the API and how to use it.  The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account. Every feature of the Equinix Metal web interface is accessible through the API.  The API docs are generated from the Equinix Metal OpenAPI specification and are officially hosted at <https://metal.equinix.com/developers/api>.  # Common Parameters  The Equinix Metal API uses a few methods to minimize network traffic and improve throughput. These parameters are not used in all API calls, but are used often enough to warrant their own section. Look for these parameters in the documentation for the API calls that support them.  ## Pagination  Pagination is used to limit the number of results returned in a single request. The API will return a maximum of 100 results per page. To retrieve additional results, you can use the `page` and `per_page` query parameters.  The `page` parameter is used to specify the page number. The first page is `1`. The `per_page` parameter is used to specify the number of results per page. The maximum number of results differs by resource type.  ## Sorting  Where offered, the API allows you to sort results by a specific field. To sort results use the `sort_by` query parameter with the root level field name as the value. The `sort_direction` parameter is used to specify the sort direction, either either `asc` (ascending) or `desc` (descending).  ## Filtering  Filtering is used to limit the results returned in a single request. The API supports filtering by certain fields in the response. To filter results, you can use the field as a query parameter.  For example, to filter the IP list to only return public IPv4 addresses, you can filter by the `type` field, as in the following request:  ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/projects/id/ips?type=public_ipv4 ```  Only IP addresses with the `type` field set to `public_ipv4` will be returned.  ## Searching  Searching is used to find matching resources using multiple field comparissons. The API supports searching in resources that define this behavior. The fields available for search differ by resource, as does the search strategy.  To search resources you can use the `search` query parameter.  ## Include and Exclude  For resources that contain references to other resources, sucha as a Device that refers to the Project it resides in, the Equinix Metal API will returns `href` values (API links) to the associated resource.  ```json {   ...   \"project\": {     \"href\": \"/metal/v1/projects/f3f131c8-f302-49ef-8c44-9405022dc6dd\"   } } ```  If you're going need the project details, you can avoid a second API request.  Specify the contained `href` resources and collections that you'd like to have included in the response using the `include` query parameter.  For example:  ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/user?include=projects ```  The `include` parameter is generally accepted in `GET`, `POST`, `PUT`, and `PATCH` requests where `href` resources are presented.  To have multiple resources include, use a comma-separated list (e.g. `?include=emails,projects,memberships`).  ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/user?include=emails,projects,memberships ```  You may also include nested associations up to three levels deep using dot notation (`?include=memberships.projects`):  ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/user?include=memberships.projects ```  To exclude resources, and optimize response delivery, use the `exclude` query parameter. The `exclude` parameter is generally accepted in `GET`, `POST`, `PUT`, and `PATCH` requests for fields with nested object responses. When excluded, these fields will be replaced with an object that contains only an `href` field.   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@equinixmetal.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from metal.configuration import Configuration


class SelfServiceReservationResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'created_at': 'datetime',
        'item': 'list[SelfServiceReservationItemResponse]',
        'notes': 'str',
        'organization': 'str',
        'organization_id': 'str',
        'period': 'CreateSelfServiceReservationRequestPeriod',
        'project': 'str',
        'project_id': 'str',
        'start_date': 'datetime',
        'status': 'str',
        'total_cost': 'int'
    }

    attribute_map = {
        'created_at': 'created_at',
        'item': 'item',
        'notes': 'notes',
        'organization': 'organization',
        'organization_id': 'organization_id',
        'period': 'period',
        'project': 'project',
        'project_id': 'project_id',
        'start_date': 'start_date',
        'status': 'status',
        'total_cost': 'total_cost'
    }

    def __init__(self, created_at=None, item=None, notes=None, organization=None, organization_id=None, period=None, project=None, project_id=None, start_date=None, status=None, total_cost=None, local_vars_configuration=None):  # noqa: E501
        """SelfServiceReservationResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._created_at = None
        self._item = None
        self._notes = None
        self._organization = None
        self._organization_id = None
        self._period = None
        self._project = None
        self._project_id = None
        self._start_date = None
        self._status = None
        self._total_cost = None
        self.discriminator = None

        if created_at is not None:
            self.created_at = created_at
        if item is not None:
            self.item = item
        if notes is not None:
            self.notes = notes
        if organization is not None:
            self.organization = organization
        if organization_id is not None:
            self.organization_id = organization_id
        if period is not None:
            self.period = period
        if project is not None:
            self.project = project
        if project_id is not None:
            self.project_id = project_id
        if start_date is not None:
            self.start_date = start_date
        if status is not None:
            self.status = status
        if total_cost is not None:
            self.total_cost = total_cost

    @property
    def created_at(self):
        """Gets the created_at of this SelfServiceReservationResponse.  # noqa: E501


        :return: The created_at of this SelfServiceReservationResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this SelfServiceReservationResponse.


        :param created_at: The created_at of this SelfServiceReservationResponse.  # noqa: E501
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def item(self):
        """Gets the item of this SelfServiceReservationResponse.  # noqa: E501


        :return: The item of this SelfServiceReservationResponse.  # noqa: E501
        :rtype: list[SelfServiceReservationItemResponse]
        """
        return self._item

    @item.setter
    def item(self, item):
        """Sets the item of this SelfServiceReservationResponse.


        :param item: The item of this SelfServiceReservationResponse.  # noqa: E501
        :type item: list[SelfServiceReservationItemResponse]
        """

        self._item = item

    @property
    def notes(self):
        """Gets the notes of this SelfServiceReservationResponse.  # noqa: E501


        :return: The notes of this SelfServiceReservationResponse.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this SelfServiceReservationResponse.


        :param notes: The notes of this SelfServiceReservationResponse.  # noqa: E501
        :type notes: str
        """

        self._notes = notes

    @property
    def organization(self):
        """Gets the organization of this SelfServiceReservationResponse.  # noqa: E501


        :return: The organization of this SelfServiceReservationResponse.  # noqa: E501
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this SelfServiceReservationResponse.


        :param organization: The organization of this SelfServiceReservationResponse.  # noqa: E501
        :type organization: str
        """

        self._organization = organization

    @property
    def organization_id(self):
        """Gets the organization_id of this SelfServiceReservationResponse.  # noqa: E501


        :return: The organization_id of this SelfServiceReservationResponse.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this SelfServiceReservationResponse.


        :param organization_id: The organization_id of this SelfServiceReservationResponse.  # noqa: E501
        :type organization_id: str
        """

        self._organization_id = organization_id

    @property
    def period(self):
        """Gets the period of this SelfServiceReservationResponse.  # noqa: E501


        :return: The period of this SelfServiceReservationResponse.  # noqa: E501
        :rtype: CreateSelfServiceReservationRequestPeriod
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this SelfServiceReservationResponse.


        :param period: The period of this SelfServiceReservationResponse.  # noqa: E501
        :type period: CreateSelfServiceReservationRequestPeriod
        """

        self._period = period

    @property
    def project(self):
        """Gets the project of this SelfServiceReservationResponse.  # noqa: E501


        :return: The project of this SelfServiceReservationResponse.  # noqa: E501
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this SelfServiceReservationResponse.


        :param project: The project of this SelfServiceReservationResponse.  # noqa: E501
        :type project: str
        """

        self._project = project

    @property
    def project_id(self):
        """Gets the project_id of this SelfServiceReservationResponse.  # noqa: E501


        :return: The project_id of this SelfServiceReservationResponse.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this SelfServiceReservationResponse.


        :param project_id: The project_id of this SelfServiceReservationResponse.  # noqa: E501
        :type project_id: str
        """

        self._project_id = project_id

    @property
    def start_date(self):
        """Gets the start_date of this SelfServiceReservationResponse.  # noqa: E501


        :return: The start_date of this SelfServiceReservationResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this SelfServiceReservationResponse.


        :param start_date: The start_date of this SelfServiceReservationResponse.  # noqa: E501
        :type start_date: datetime
        """

        self._start_date = start_date

    @property
    def status(self):
        """Gets the status of this SelfServiceReservationResponse.  # noqa: E501


        :return: The status of this SelfServiceReservationResponse.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SelfServiceReservationResponse.


        :param status: The status of this SelfServiceReservationResponse.  # noqa: E501
        :type status: str
        """

        self._status = status

    @property
    def total_cost(self):
        """Gets the total_cost of this SelfServiceReservationResponse.  # noqa: E501


        :return: The total_cost of this SelfServiceReservationResponse.  # noqa: E501
        :rtype: int
        """
        return self._total_cost

    @total_cost.setter
    def total_cost(self, total_cost):
        """Sets the total_cost of this SelfServiceReservationResponse.


        :param total_cost: The total_cost of this SelfServiceReservationResponse.  # noqa: E501
        :type total_cost: int
        """

        self._total_cost = total_cost

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SelfServiceReservationResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SelfServiceReservationResponse):
            return True

        return self.to_dict() != other.to_dict()
