# coding: utf-8

"""
    Metal API

    This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>.   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@equinixmetal.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from metal.configuration import Configuration


class SelfServiceReservationResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'status': 'str',
        'start_date': 'datetime',
        'period': 'CreateSelfServiceReservationRequestPeriod',
        'total_cost': 'int',
        'created_at': 'datetime',
        'notes': 'str',
        'organization': 'str',
        'organization_id': 'str',
        'project': 'str',
        'project_id': 'str',
        'item': 'list[SelfServiceReservationItemResponse]'
    }

    attribute_map = {
        'status': 'status',
        'start_date': 'start_date',
        'period': 'period',
        'total_cost': 'total_cost',
        'created_at': 'created_at',
        'notes': 'notes',
        'organization': 'organization',
        'organization_id': 'organization_id',
        'project': 'project',
        'project_id': 'project_id',
        'item': 'item'
    }

    def __init__(self, status=None, start_date=None, period=None, total_cost=None, created_at=None, notes=None, organization=None, organization_id=None, project=None, project_id=None, item=None, local_vars_configuration=None):  # noqa: E501
        """SelfServiceReservationResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._status = None
        self._start_date = None
        self._period = None
        self._total_cost = None
        self._created_at = None
        self._notes = None
        self._organization = None
        self._organization_id = None
        self._project = None
        self._project_id = None
        self._item = None
        self.discriminator = None

        if status is not None:
            self.status = status
        if start_date is not None:
            self.start_date = start_date
        if period is not None:
            self.period = period
        if total_cost is not None:
            self.total_cost = total_cost
        if created_at is not None:
            self.created_at = created_at
        if notes is not None:
            self.notes = notes
        if organization is not None:
            self.organization = organization
        if organization_id is not None:
            self.organization_id = organization_id
        if project is not None:
            self.project = project
        if project_id is not None:
            self.project_id = project_id
        if item is not None:
            self.item = item

    @property
    def status(self):
        """Gets the status of this SelfServiceReservationResponse.  # noqa: E501


        :return: The status of this SelfServiceReservationResponse.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SelfServiceReservationResponse.


        :param status: The status of this SelfServiceReservationResponse.  # noqa: E501
        :type status: str
        """

        self._status = status

    @property
    def start_date(self):
        """Gets the start_date of this SelfServiceReservationResponse.  # noqa: E501


        :return: The start_date of this SelfServiceReservationResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this SelfServiceReservationResponse.


        :param start_date: The start_date of this SelfServiceReservationResponse.  # noqa: E501
        :type start_date: datetime
        """

        self._start_date = start_date

    @property
    def period(self):
        """Gets the period of this SelfServiceReservationResponse.  # noqa: E501


        :return: The period of this SelfServiceReservationResponse.  # noqa: E501
        :rtype: CreateSelfServiceReservationRequestPeriod
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this SelfServiceReservationResponse.


        :param period: The period of this SelfServiceReservationResponse.  # noqa: E501
        :type period: CreateSelfServiceReservationRequestPeriod
        """

        self._period = period

    @property
    def total_cost(self):
        """Gets the total_cost of this SelfServiceReservationResponse.  # noqa: E501


        :return: The total_cost of this SelfServiceReservationResponse.  # noqa: E501
        :rtype: int
        """
        return self._total_cost

    @total_cost.setter
    def total_cost(self, total_cost):
        """Sets the total_cost of this SelfServiceReservationResponse.


        :param total_cost: The total_cost of this SelfServiceReservationResponse.  # noqa: E501
        :type total_cost: int
        """

        self._total_cost = total_cost

    @property
    def created_at(self):
        """Gets the created_at of this SelfServiceReservationResponse.  # noqa: E501


        :return: The created_at of this SelfServiceReservationResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this SelfServiceReservationResponse.


        :param created_at: The created_at of this SelfServiceReservationResponse.  # noqa: E501
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def notes(self):
        """Gets the notes of this SelfServiceReservationResponse.  # noqa: E501


        :return: The notes of this SelfServiceReservationResponse.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this SelfServiceReservationResponse.


        :param notes: The notes of this SelfServiceReservationResponse.  # noqa: E501
        :type notes: str
        """

        self._notes = notes

    @property
    def organization(self):
        """Gets the organization of this SelfServiceReservationResponse.  # noqa: E501


        :return: The organization of this SelfServiceReservationResponse.  # noqa: E501
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this SelfServiceReservationResponse.


        :param organization: The organization of this SelfServiceReservationResponse.  # noqa: E501
        :type organization: str
        """

        self._organization = organization

    @property
    def organization_id(self):
        """Gets the organization_id of this SelfServiceReservationResponse.  # noqa: E501


        :return: The organization_id of this SelfServiceReservationResponse.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this SelfServiceReservationResponse.


        :param organization_id: The organization_id of this SelfServiceReservationResponse.  # noqa: E501
        :type organization_id: str
        """

        self._organization_id = organization_id

    @property
    def project(self):
        """Gets the project of this SelfServiceReservationResponse.  # noqa: E501


        :return: The project of this SelfServiceReservationResponse.  # noqa: E501
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this SelfServiceReservationResponse.


        :param project: The project of this SelfServiceReservationResponse.  # noqa: E501
        :type project: str
        """

        self._project = project

    @property
    def project_id(self):
        """Gets the project_id of this SelfServiceReservationResponse.  # noqa: E501


        :return: The project_id of this SelfServiceReservationResponse.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this SelfServiceReservationResponse.


        :param project_id: The project_id of this SelfServiceReservationResponse.  # noqa: E501
        :type project_id: str
        """

        self._project_id = project_id

    @property
    def item(self):
        """Gets the item of this SelfServiceReservationResponse.  # noqa: E501


        :return: The item of this SelfServiceReservationResponse.  # noqa: E501
        :rtype: list[SelfServiceReservationItemResponse]
        """
        return self._item

    @item.setter
    def item(self, item):
        """Sets the item of this SelfServiceReservationResponse.


        :param item: The item of this SelfServiceReservationResponse.  # noqa: E501
        :type item: list[SelfServiceReservationItemResponse]
        """

        self._item = item

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SelfServiceReservationResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SelfServiceReservationResponse):
            return True

        return self.to_dict() != other.to_dict()
