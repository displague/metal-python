# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from metal.types.base_model_ import Model
from metal import util


class BgpConfigRequestInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, asn: int=None, deployment_type: str=None, md5: str=None, use_case: str=None):
        """BgpConfigRequestInput - a model defined in OpenAPI

        :param asn: The asn of this BgpConfigRequestInput.
        :param deployment_type: The deployment_type of this BgpConfigRequestInput.
        :param md5: The md5 of this BgpConfigRequestInput.
        :param use_case: The use_case of this BgpConfigRequestInput.
        """
        self.openapi_types = {
            'asn': int,
            'deployment_type': str,
            'md5': str,
            'use_case': str
        }

        self.attribute_map = {
            'asn': 'asn',
            'deployment_type': 'deployment_type',
            'md5': 'md5',
            'use_case': 'use_case'
        }

        self._asn = asn
        self._deployment_type = deployment_type
        self._md5 = md5
        self._use_case = use_case

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BgpConfigRequestInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BgpConfigRequestInput of this BgpConfigRequestInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def asn(self):
        """Gets the asn of this BgpConfigRequestInput.


        :return: The asn of this BgpConfigRequestInput.
        :rtype: int
        """
        return self._asn

    @asn.setter
    def asn(self, asn):
        """Sets the asn of this BgpConfigRequestInput.


        :param asn: The asn of this BgpConfigRequestInput.
        :type asn: int
        """
        if asn is None:
            raise ValueError("Invalid value for `asn`, must not be `None`")

        self._asn = asn

    @property
    def deployment_type(self):
        """Gets the deployment_type of this BgpConfigRequestInput.


        :return: The deployment_type of this BgpConfigRequestInput.
        :rtype: str
        """
        return self._deployment_type

    @deployment_type.setter
    def deployment_type(self, deployment_type):
        """Sets the deployment_type of this BgpConfigRequestInput.


        :param deployment_type: The deployment_type of this BgpConfigRequestInput.
        :type deployment_type: str
        """
        if deployment_type is None:
            raise ValueError("Invalid value for `deployment_type`, must not be `None`")

        self._deployment_type = deployment_type

    @property
    def md5(self):
        """Gets the md5 of this BgpConfigRequestInput.


        :return: The md5 of this BgpConfigRequestInput.
        :rtype: str
        """
        return self._md5

    @md5.setter
    def md5(self, md5):
        """Sets the md5 of this BgpConfigRequestInput.


        :param md5: The md5 of this BgpConfigRequestInput.
        :type md5: str
        """

        self._md5 = md5

    @property
    def use_case(self):
        """Gets the use_case of this BgpConfigRequestInput.


        :return: The use_case of this BgpConfigRequestInput.
        :rtype: str
        """
        return self._use_case

    @use_case.setter
    def use_case(self, use_case):
        """Sets the use_case of this BgpConfigRequestInput.


        :param use_case: The use_case of this BgpConfigRequestInput.
        :type use_case: str
        """

        self._use_case = use_case
