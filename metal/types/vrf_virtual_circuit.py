# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from metal.types.base_model_ import Model
from metal.types.href import Href
from metal.types.vrf import Vrf
from metal import util


class VrfVirtualCircuit(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, customer_ip: str=None, description: str=None, id: str=None, md5: str=None, metal_ip: str=None, name: str=None, port: Href=None, nni_vlan: int=None, peer_asn: int=None, project: Href=None, speed: int=None, status: str=None, subnet: str=None, tags: List[str]=None, vrf: Vrf=None, created_at: datetime=None, updated_at: datetime=None):
        """VrfVirtualCircuit - a model defined in OpenAPI

        :param customer_ip: The customer_ip of this VrfVirtualCircuit.
        :param description: The description of this VrfVirtualCircuit.
        :param id: The id of this VrfVirtualCircuit.
        :param md5: The md5 of this VrfVirtualCircuit.
        :param metal_ip: The metal_ip of this VrfVirtualCircuit.
        :param name: The name of this VrfVirtualCircuit.
        :param port: The port of this VrfVirtualCircuit.
        :param nni_vlan: The nni_vlan of this VrfVirtualCircuit.
        :param peer_asn: The peer_asn of this VrfVirtualCircuit.
        :param project: The project of this VrfVirtualCircuit.
        :param speed: The speed of this VrfVirtualCircuit.
        :param status: The status of this VrfVirtualCircuit.
        :param subnet: The subnet of this VrfVirtualCircuit.
        :param tags: The tags of this VrfVirtualCircuit.
        :param vrf: The vrf of this VrfVirtualCircuit.
        :param created_at: The created_at of this VrfVirtualCircuit.
        :param updated_at: The updated_at of this VrfVirtualCircuit.
        """
        self.openapi_types = {
            'customer_ip': str,
            'description': str,
            'id': str,
            'md5': str,
            'metal_ip': str,
            'name': str,
            'port': Href,
            'nni_vlan': int,
            'peer_asn': int,
            'project': Href,
            'speed': int,
            'status': str,
            'subnet': str,
            'tags': List[str],
            'vrf': Vrf,
            'created_at': datetime,
            'updated_at': datetime
        }

        self.attribute_map = {
            'customer_ip': 'customer_ip',
            'description': 'description',
            'id': 'id',
            'md5': 'md5',
            'metal_ip': 'metal_ip',
            'name': 'name',
            'port': 'port',
            'nni_vlan': 'nni_vlan',
            'peer_asn': 'peer_asn',
            'project': 'project',
            'speed': 'speed',
            'status': 'status',
            'subnet': 'subnet',
            'tags': 'tags',
            'vrf': 'vrf',
            'created_at': 'created_at',
            'updated_at': 'updated_at'
        }

        self._customer_ip = customer_ip
        self._description = description
        self._id = id
        self._md5 = md5
        self._metal_ip = metal_ip
        self._name = name
        self._port = port
        self._nni_vlan = nni_vlan
        self._peer_asn = peer_asn
        self._project = project
        self._speed = speed
        self._status = status
        self._subnet = subnet
        self._tags = tags
        self._vrf = vrf
        self._created_at = created_at
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VrfVirtualCircuit':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VrfVirtualCircuit of this VrfVirtualCircuit.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def customer_ip(self):
        """Gets the customer_ip of this VrfVirtualCircuit.

        An IP address from the subnet that will be used on the Customer side. This parameter is optional, but if supplied, we will use the other usable IP address in the subnet as the Metal IP. By default, the last usable IP address in the subnet will be used.

        :return: The customer_ip of this VrfVirtualCircuit.
        :rtype: str
        """
        return self._customer_ip

    @customer_ip.setter
    def customer_ip(self, customer_ip):
        """Sets the customer_ip of this VrfVirtualCircuit.

        An IP address from the subnet that will be used on the Customer side. This parameter is optional, but if supplied, we will use the other usable IP address in the subnet as the Metal IP. By default, the last usable IP address in the subnet will be used.

        :param customer_ip: The customer_ip of this VrfVirtualCircuit.
        :type customer_ip: str
        """

        self._customer_ip = customer_ip

    @property
    def description(self):
        """Gets the description of this VrfVirtualCircuit.


        :return: The description of this VrfVirtualCircuit.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this VrfVirtualCircuit.


        :param description: The description of this VrfVirtualCircuit.
        :type description: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this VrfVirtualCircuit.


        :return: The id of this VrfVirtualCircuit.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VrfVirtualCircuit.


        :param id: The id of this VrfVirtualCircuit.
        :type id: str
        """

        self._id = id

    @property
    def md5(self):
        """Gets the md5 of this VrfVirtualCircuit.

        The MD5 password for the BGP peering in plaintext (not a checksum).

        :return: The md5 of this VrfVirtualCircuit.
        :rtype: str
        """
        return self._md5

    @md5.setter
    def md5(self, md5):
        """Sets the md5 of this VrfVirtualCircuit.

        The MD5 password for the BGP peering in plaintext (not a checksum).

        :param md5: The md5 of this VrfVirtualCircuit.
        :type md5: str
        """

        self._md5 = md5

    @property
    def metal_ip(self):
        """Gets the metal_ip of this VrfVirtualCircuit.

        An IP address from the subnet that will be used on the Metal side. This parameter is optional, but if supplied, we will use the other usable IP address in the subnet as the Customer IP. By default, the first usable IP address in the subnet will be used.

        :return: The metal_ip of this VrfVirtualCircuit.
        :rtype: str
        """
        return self._metal_ip

    @metal_ip.setter
    def metal_ip(self, metal_ip):
        """Sets the metal_ip of this VrfVirtualCircuit.

        An IP address from the subnet that will be used on the Metal side. This parameter is optional, but if supplied, we will use the other usable IP address in the subnet as the Customer IP. By default, the first usable IP address in the subnet will be used.

        :param metal_ip: The metal_ip of this VrfVirtualCircuit.
        :type metal_ip: str
        """

        self._metal_ip = metal_ip

    @property
    def name(self):
        """Gets the name of this VrfVirtualCircuit.


        :return: The name of this VrfVirtualCircuit.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VrfVirtualCircuit.


        :param name: The name of this VrfVirtualCircuit.
        :type name: str
        """

        self._name = name

    @property
    def port(self):
        """Gets the port of this VrfVirtualCircuit.


        :return: The port of this VrfVirtualCircuit.
        :rtype: Href
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this VrfVirtualCircuit.


        :param port: The port of this VrfVirtualCircuit.
        :type port: Href
        """

        self._port = port

    @property
    def nni_vlan(self):
        """Gets the nni_vlan of this VrfVirtualCircuit.


        :return: The nni_vlan of this VrfVirtualCircuit.
        :rtype: int
        """
        return self._nni_vlan

    @nni_vlan.setter
    def nni_vlan(self, nni_vlan):
        """Sets the nni_vlan of this VrfVirtualCircuit.


        :param nni_vlan: The nni_vlan of this VrfVirtualCircuit.
        :type nni_vlan: int
        """

        self._nni_vlan = nni_vlan

    @property
    def peer_asn(self):
        """Gets the peer_asn of this VrfVirtualCircuit.

        The peer ASN that will be used with the VRF on the Virtual Circuit.

        :return: The peer_asn of this VrfVirtualCircuit.
        :rtype: int
        """
        return self._peer_asn

    @peer_asn.setter
    def peer_asn(self, peer_asn):
        """Sets the peer_asn of this VrfVirtualCircuit.

        The peer ASN that will be used with the VRF on the Virtual Circuit.

        :param peer_asn: The peer_asn of this VrfVirtualCircuit.
        :type peer_asn: int
        """

        self._peer_asn = peer_asn

    @property
    def project(self):
        """Gets the project of this VrfVirtualCircuit.


        :return: The project of this VrfVirtualCircuit.
        :rtype: Href
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this VrfVirtualCircuit.


        :param project: The project of this VrfVirtualCircuit.
        :type project: Href
        """

        self._project = project

    @property
    def speed(self):
        """Gets the speed of this VrfVirtualCircuit.

        integer representing bps speed

        :return: The speed of this VrfVirtualCircuit.
        :rtype: int
        """
        return self._speed

    @speed.setter
    def speed(self, speed):
        """Sets the speed of this VrfVirtualCircuit.

        integer representing bps speed

        :param speed: The speed of this VrfVirtualCircuit.
        :type speed: int
        """

        self._speed = speed

    @property
    def status(self):
        """Gets the status of this VrfVirtualCircuit.


        :return: The status of this VrfVirtualCircuit.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this VrfVirtualCircuit.


        :param status: The status of this VrfVirtualCircuit.
        :type status: str
        """

        self._status = status

    @property
    def subnet(self):
        """Gets the subnet of this VrfVirtualCircuit.

        The /30 or /31 subnet of one of the VRF IP Blocks that will be used with the VRF for the Virtual Circuit. This subnet does not have to be an existing VRF IP reservation, as we will create the VRF IP reservation on creation if it does not exist. The Metal IP and Customer IP must be IPs from this subnet. For /30 subnets, the network and broadcast IPs cannot be used as the Metal or Customer IP.

        :return: The subnet of this VrfVirtualCircuit.
        :rtype: str
        """
        return self._subnet

    @subnet.setter
    def subnet(self, subnet):
        """Sets the subnet of this VrfVirtualCircuit.

        The /30 or /31 subnet of one of the VRF IP Blocks that will be used with the VRF for the Virtual Circuit. This subnet does not have to be an existing VRF IP reservation, as we will create the VRF IP reservation on creation if it does not exist. The Metal IP and Customer IP must be IPs from this subnet. For /30 subnets, the network and broadcast IPs cannot be used as the Metal or Customer IP.

        :param subnet: The subnet of this VrfVirtualCircuit.
        :type subnet: str
        """

        self._subnet = subnet

    @property
    def tags(self):
        """Gets the tags of this VrfVirtualCircuit.


        :return: The tags of this VrfVirtualCircuit.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this VrfVirtualCircuit.


        :param tags: The tags of this VrfVirtualCircuit.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def vrf(self):
        """Gets the vrf of this VrfVirtualCircuit.


        :return: The vrf of this VrfVirtualCircuit.
        :rtype: Vrf
        """
        return self._vrf

    @vrf.setter
    def vrf(self, vrf):
        """Sets the vrf of this VrfVirtualCircuit.


        :param vrf: The vrf of this VrfVirtualCircuit.
        :type vrf: Vrf
        """

        self._vrf = vrf

    @property
    def created_at(self):
        """Gets the created_at of this VrfVirtualCircuit.


        :return: The created_at of this VrfVirtualCircuit.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this VrfVirtualCircuit.


        :param created_at: The created_at of this VrfVirtualCircuit.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this VrfVirtualCircuit.


        :return: The updated_at of this VrfVirtualCircuit.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this VrfVirtualCircuit.


        :param updated_at: The updated_at of this VrfVirtualCircuit.
        :type updated_at: datetime
        """

        self._updated_at = updated_at
