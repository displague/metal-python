# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from metal.types.base_model_ import Model
from metal import util


class VrfUpdateInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, ip_ranges: List[str]=None, local_asn: int=None, name: str=None):
        """VrfUpdateInput - a model defined in OpenAPI

        :param description: The description of this VrfUpdateInput.
        :param ip_ranges: The ip_ranges of this VrfUpdateInput.
        :param local_asn: The local_asn of this VrfUpdateInput.
        :param name: The name of this VrfUpdateInput.
        """
        self.openapi_types = {
            'description': str,
            'ip_ranges': List[str],
            'local_asn': int,
            'name': str
        }

        self.attribute_map = {
            'description': 'description',
            'ip_ranges': 'ip_ranges',
            'local_asn': 'local_asn',
            'name': 'name'
        }

        self._description = description
        self._ip_ranges = ip_ranges
        self._local_asn = local_asn
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VrfUpdateInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VrfUpdateInput of this VrfUpdateInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this VrfUpdateInput.


        :return: The description of this VrfUpdateInput.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this VrfUpdateInput.


        :param description: The description of this VrfUpdateInput.
        :type description: str
        """

        self._description = description

    @property
    def ip_ranges(self):
        """Gets the ip_ranges of this VrfUpdateInput.

        A list of CIDR network addresses. Like [\"10.0.0.0/16\", \"2001:d78::/56\"]. IPv4 blocks must be between /8 and /29 in size. IPv6 blocks must be between /56 and /64. A VRF\\'s IP ranges must be defined in order to create VRF IP Reservations, which can then be used for Metal Gateways or Virtual Circuits. Adding a new CIDR address to the list will result in the creation of a new IP Range for this VRF. Removal of an existing CIDR address from the list will result in the deletion of an existing IP Range for this VRF. Deleting an IP Range will result in the deletion of any VRF IP Reservations contained within the IP Range, as well as the VRF IP Reservation\\'s associated Metal Gateways or Virtual Circuits. If you do not wish to add or remove IP Ranges, either include the full existing list of IP Ranges in the update request, or do not specify the `ip_ranges` field in the update request. Specifying a value of `[]` will remove all existing IP Ranges from the VRF.

        :return: The ip_ranges of this VrfUpdateInput.
        :rtype: List[str]
        """
        return self._ip_ranges

    @ip_ranges.setter
    def ip_ranges(self, ip_ranges):
        """Sets the ip_ranges of this VrfUpdateInput.

        A list of CIDR network addresses. Like [\"10.0.0.0/16\", \"2001:d78::/56\"]. IPv4 blocks must be between /8 and /29 in size. IPv6 blocks must be between /56 and /64. A VRF\\'s IP ranges must be defined in order to create VRF IP Reservations, which can then be used for Metal Gateways or Virtual Circuits. Adding a new CIDR address to the list will result in the creation of a new IP Range for this VRF. Removal of an existing CIDR address from the list will result in the deletion of an existing IP Range for this VRF. Deleting an IP Range will result in the deletion of any VRF IP Reservations contained within the IP Range, as well as the VRF IP Reservation\\'s associated Metal Gateways or Virtual Circuits. If you do not wish to add or remove IP Ranges, either include the full existing list of IP Ranges in the update request, or do not specify the `ip_ranges` field in the update request. Specifying a value of `[]` will remove all existing IP Ranges from the VRF.

        :param ip_ranges: The ip_ranges of this VrfUpdateInput.
        :type ip_ranges: List[str]
        """

        self._ip_ranges = ip_ranges

    @property
    def local_asn(self):
        """Gets the local_asn of this VrfUpdateInput.

        The new `local_asn` value for the VRF. This field cannot be updated when there are active Interconnection Virtual Circuits associated to the VRF.

        :return: The local_asn of this VrfUpdateInput.
        :rtype: int
        """
        return self._local_asn

    @local_asn.setter
    def local_asn(self, local_asn):
        """Sets the local_asn of this VrfUpdateInput.

        The new `local_asn` value for the VRF. This field cannot be updated when there are active Interconnection Virtual Circuits associated to the VRF.

        :param local_asn: The local_asn of this VrfUpdateInput.
        :type local_asn: int
        """

        self._local_asn = local_asn

    @property
    def name(self):
        """Gets the name of this VrfUpdateInput.


        :return: The name of this VrfUpdateInput.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VrfUpdateInput.


        :param name: The name of this VrfUpdateInput.
        :type name: str
        """

        self._name = name
