# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from metal.types.base_model_ import Model
from metal.types.address import Address
from metal.types.device_metro import DeviceMetro
from metal import util


class IPReservationFacility(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: Address=None, code: str=None, features: List[str]=None, id: str=None, ip_ranges: List[str]=None, metro: DeviceMetro=None, name: str=None):
        """IPReservationFacility - a model defined in OpenAPI

        :param address: The address of this IPReservationFacility.
        :param code: The code of this IPReservationFacility.
        :param features: The features of this IPReservationFacility.
        :param id: The id of this IPReservationFacility.
        :param ip_ranges: The ip_ranges of this IPReservationFacility.
        :param metro: The metro of this IPReservationFacility.
        :param name: The name of this IPReservationFacility.
        """
        self.openapi_types = {
            'address': Address,
            'code': str,
            'features': List[str],
            'id': str,
            'ip_ranges': List[str],
            'metro': DeviceMetro,
            'name': str
        }

        self.attribute_map = {
            'address': 'address',
            'code': 'code',
            'features': 'features',
            'id': 'id',
            'ip_ranges': 'ip_ranges',
            'metro': 'metro',
            'name': 'name'
        }

        self._address = address
        self._code = code
        self._features = features
        self._id = id
        self._ip_ranges = ip_ranges
        self._metro = metro
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IPReservationFacility':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IPReservation_facility of this IPReservationFacility.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this IPReservationFacility.


        :return: The address of this IPReservationFacility.
        :rtype: Address
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this IPReservationFacility.


        :param address: The address of this IPReservationFacility.
        :type address: Address
        """

        self._address = address

    @property
    def code(self):
        """Gets the code of this IPReservationFacility.


        :return: The code of this IPReservationFacility.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this IPReservationFacility.


        :param code: The code of this IPReservationFacility.
        :type code: str
        """

        self._code = code

    @property
    def features(self):
        """Gets the features of this IPReservationFacility.


        :return: The features of this IPReservationFacility.
        :rtype: List[str]
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this IPReservationFacility.


        :param features: The features of this IPReservationFacility.
        :type features: List[str]
        """
        allowed_values = ["baremetal", "backend_transfer", "layer_2", "global_ipv4", "ibx"]  # noqa: E501
        if not set(features).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `features` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(features) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._features = features

    @property
    def id(self):
        """Gets the id of this IPReservationFacility.


        :return: The id of this IPReservationFacility.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IPReservationFacility.


        :param id: The id of this IPReservationFacility.
        :type id: str
        """

        self._id = id

    @property
    def ip_ranges(self):
        """Gets the ip_ranges of this IPReservationFacility.

        IP ranges registered in facility. Can be used for GeoIP location

        :return: The ip_ranges of this IPReservationFacility.
        :rtype: List[str]
        """
        return self._ip_ranges

    @ip_ranges.setter
    def ip_ranges(self, ip_ranges):
        """Sets the ip_ranges of this IPReservationFacility.

        IP ranges registered in facility. Can be used for GeoIP location

        :param ip_ranges: The ip_ranges of this IPReservationFacility.
        :type ip_ranges: List[str]
        """

        self._ip_ranges = ip_ranges

    @property
    def metro(self):
        """Gets the metro of this IPReservationFacility.


        :return: The metro of this IPReservationFacility.
        :rtype: DeviceMetro
        """
        return self._metro

    @metro.setter
    def metro(self, metro):
        """Sets the metro of this IPReservationFacility.


        :param metro: The metro of this IPReservationFacility.
        :type metro: DeviceMetro
        """

        self._metro = metro

    @property
    def name(self):
        """Gets the name of this IPReservationFacility.


        :return: The name of this IPReservationFacility.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IPReservationFacility.


        :param name: The name of this IPReservationFacility.
        :type name: str
        """

        self._name = name
