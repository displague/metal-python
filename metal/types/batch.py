# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from metal.types.base_model_ import Model
from metal.types.href import Href
from metal import util


class Batch(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: datetime=None, devices: List[Href]=None, error_messages: List[str]=None, id: str=None, project: Href=None, quantity: int=None, state: str=None, updated_at: datetime=None):
        """Batch - a model defined in OpenAPI

        :param created_at: The created_at of this Batch.
        :param devices: The devices of this Batch.
        :param error_messages: The error_messages of this Batch.
        :param id: The id of this Batch.
        :param project: The project of this Batch.
        :param quantity: The quantity of this Batch.
        :param state: The state of this Batch.
        :param updated_at: The updated_at of this Batch.
        """
        self.openapi_types = {
            'created_at': datetime,
            'devices': List[Href],
            'error_messages': List[str],
            'id': str,
            'project': Href,
            'quantity': int,
            'state': str,
            'updated_at': datetime
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'devices': 'devices',
            'error_messages': 'error_messages',
            'id': 'id',
            'project': 'project',
            'quantity': 'quantity',
            'state': 'state',
            'updated_at': 'updated_at'
        }

        self._created_at = created_at
        self._devices = devices
        self._error_messages = error_messages
        self._id = id
        self._project = project
        self._quantity = quantity
        self._state = state
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Batch':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Batch of this Batch.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this Batch.


        :return: The created_at of this Batch.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Batch.


        :param created_at: The created_at of this Batch.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def devices(self):
        """Gets the devices of this Batch.


        :return: The devices of this Batch.
        :rtype: List[Href]
        """
        return self._devices

    @devices.setter
    def devices(self, devices):
        """Sets the devices of this Batch.


        :param devices: The devices of this Batch.
        :type devices: List[Href]
        """

        self._devices = devices

    @property
    def error_messages(self):
        """Gets the error_messages of this Batch.


        :return: The error_messages of this Batch.
        :rtype: List[str]
        """
        return self._error_messages

    @error_messages.setter
    def error_messages(self, error_messages):
        """Sets the error_messages of this Batch.


        :param error_messages: The error_messages of this Batch.
        :type error_messages: List[str]
        """

        self._error_messages = error_messages

    @property
    def id(self):
        """Gets the id of this Batch.


        :return: The id of this Batch.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Batch.


        :param id: The id of this Batch.
        :type id: str
        """

        self._id = id

    @property
    def project(self):
        """Gets the project of this Batch.


        :return: The project of this Batch.
        :rtype: Href
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this Batch.


        :param project: The project of this Batch.
        :type project: Href
        """

        self._project = project

    @property
    def quantity(self):
        """Gets the quantity of this Batch.


        :return: The quantity of this Batch.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this Batch.


        :param quantity: The quantity of this Batch.
        :type quantity: int
        """

        self._quantity = quantity

    @property
    def state(self):
        """Gets the state of this Batch.


        :return: The state of this Batch.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Batch.


        :param state: The state of this Batch.
        :type state: str
        """

        self._state = state

    @property
    def updated_at(self):
        """Gets the updated_at of this Batch.


        :return: The updated_at of this Batch.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Batch.


        :param updated_at: The updated_at of this Batch.
        :type updated_at: datetime
        """

        self._updated_at = updated_at
