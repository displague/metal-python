# coding: utf-8

"""
    Metal API

    # Introduction Equinix Metal provides a RESTful HTTP API which can be reached at <https://api.equinix.com/metal/v1>. This document describes the API and how to use it.  The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account. Every feature of the Equinix Metal web interface is accessible through the API.  The API docs are generated from the Equinix Metal OpenAPI specification and are officially hosted at <https://metal.equinix.com/developers/api>.  # Common Parameters  The Equinix Metal API uses a few methods to minimize network traffic and improve throughput. These parameters are not used in all API calls, but are used often enough to warrant their own section. Look for these parameters in the documentation for the API calls that support them.  ## Pagination  Pagination is used to limit the number of results returned in a single request. The API will return a maximum of 100 results per page. To retrieve additional results, you can use the `page` and `per_page` query parameters.  The `page` parameter is used to specify the page number. The first page is `1`. The `per_page` parameter is used to specify the number of results per page. The maximum number of results differs by resource type.  ## Sorting  Where offered, the API allows you to sort results by a specific field. To sort results use the `sort_by` query parameter with the root level field name as the value. The `sort_direction` parameter is used to specify the sort direction, either either `asc` (ascending) or `desc` (descending).  ## Filtering  Filtering is used to limit the results returned in a single request. The API supports filtering by certain fields in the response. To filter results, you can use the field as a query parameter.  For example, to filter the IP list to only return public IPv4 addresses, you can filter by the `type` field, as in the following request:  ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/projects/id/ips?type=public_ipv4 ```  Only IP addresses with the `type` field set to `public_ipv4` will be returned.  ## Searching  Searching is used to find matching resources using multiple field comparissons. The API supports searching in resources that define this behavior. The fields available for search differ by resource, as does the search strategy.  To search resources you can use the `search` query parameter.  ## Include and Exclude  For resources that contain references to other resources, sucha as a Device that refers to the Project it resides in, the Equinix Metal API will returns `href` values (API links) to the associated resource.  ```json {   ...   \"project\": {     \"href\": \"/metal/v1/projects/f3f131c8-f302-49ef-8c44-9405022dc6dd\"   } } ```  If you're going need the project details, you can avoid a second API request.  Specify the contained `href` resources and collections that you'd like to have included in the response using the `include` query parameter.  For example:  ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/user?include=projects ```  The `include` parameter is generally accepted in `GET`, `POST`, `PUT`, and `PATCH` requests where `href` resources are presented.  To have multiple resources include, use a comma-separated list (e.g. `?include=emails,projects,memberships`).  ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/user?include=emails,projects,memberships ```  You may also include nested associations up to three levels deep using dot notation (`?include=memberships.projects`):  ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/user?include=memberships.projects ```  To exclude resources, and optimize response delivery, use the `exclude` query parameter. The `exclude` parameter is generally accepted in `GET`, `POST`, `PUT`, and `PATCH` requests for fields with nested object responses. When excluded, these fields will be replaced with an object that contains only an `href` field.   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@equinixmetal.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from metal.configuration import Configuration


class Entitlement(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'description': 'str',
        'feature_access': 'object',
        'href': 'str',
        'id': 'str',
        'instance_quota': 'object',
        'ip_quota': 'object',
        'name': 'str',
        'project_quota': 'int',
        'slug': 'str',
        'volume_limits': 'object',
        'volume_quota': 'object',
        'weight': 'int'
    }

    attribute_map = {
        'description': 'description',
        'feature_access': 'feature_access',
        'href': 'href',
        'id': 'id',
        'instance_quota': 'instance_quota',
        'ip_quota': 'ip_quota',
        'name': 'name',
        'project_quota': 'project_quota',
        'slug': 'slug',
        'volume_limits': 'volume_limits',
        'volume_quota': 'volume_quota',
        'weight': 'weight'
    }

    def __init__(self, description=None, feature_access=None, href=None, id=None, instance_quota=None, ip_quota=None, name=None, project_quota=0, slug=None, volume_limits=None, volume_quota=None, weight=None, local_vars_configuration=None):  # noqa: E501
        """Entitlement - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._description = None
        self._feature_access = None
        self._href = None
        self._id = None
        self._instance_quota = None
        self._ip_quota = None
        self._name = None
        self._project_quota = None
        self._slug = None
        self._volume_limits = None
        self._volume_quota = None
        self._weight = None
        self.discriminator = None

        if description is not None:
            self.description = description
        if feature_access is not None:
            self.feature_access = feature_access
        if href is not None:
            self.href = href
        self.id = id
        if instance_quota is not None:
            self.instance_quota = instance_quota
        if ip_quota is not None:
            self.ip_quota = ip_quota
        if name is not None:
            self.name = name
        if project_quota is not None:
            self.project_quota = project_quota
        self.slug = slug
        if volume_limits is not None:
            self.volume_limits = volume_limits
        if volume_quota is not None:
            self.volume_quota = volume_quota
        self.weight = weight

    @property
    def description(self):
        """Gets the description of this Entitlement.  # noqa: E501


        :return: The description of this Entitlement.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Entitlement.


        :param description: The description of this Entitlement.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def feature_access(self):
        """Gets the feature_access of this Entitlement.  # noqa: E501


        :return: The feature_access of this Entitlement.  # noqa: E501
        :rtype: object
        """
        return self._feature_access

    @feature_access.setter
    def feature_access(self, feature_access):
        """Sets the feature_access of this Entitlement.


        :param feature_access: The feature_access of this Entitlement.  # noqa: E501
        :type feature_access: object
        """

        self._feature_access = feature_access

    @property
    def href(self):
        """Gets the href of this Entitlement.  # noqa: E501


        :return: The href of this Entitlement.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this Entitlement.


        :param href: The href of this Entitlement.  # noqa: E501
        :type href: str
        """

        self._href = href

    @property
    def id(self):
        """Gets the id of this Entitlement.  # noqa: E501


        :return: The id of this Entitlement.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Entitlement.


        :param id: The id of this Entitlement.  # noqa: E501
        :type id: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def instance_quota(self):
        """Gets the instance_quota of this Entitlement.  # noqa: E501


        :return: The instance_quota of this Entitlement.  # noqa: E501
        :rtype: object
        """
        return self._instance_quota

    @instance_quota.setter
    def instance_quota(self, instance_quota):
        """Sets the instance_quota of this Entitlement.


        :param instance_quota: The instance_quota of this Entitlement.  # noqa: E501
        :type instance_quota: object
        """

        self._instance_quota = instance_quota

    @property
    def ip_quota(self):
        """Gets the ip_quota of this Entitlement.  # noqa: E501


        :return: The ip_quota of this Entitlement.  # noqa: E501
        :rtype: object
        """
        return self._ip_quota

    @ip_quota.setter
    def ip_quota(self, ip_quota):
        """Sets the ip_quota of this Entitlement.


        :param ip_quota: The ip_quota of this Entitlement.  # noqa: E501
        :type ip_quota: object
        """

        self._ip_quota = ip_quota

    @property
    def name(self):
        """Gets the name of this Entitlement.  # noqa: E501


        :return: The name of this Entitlement.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Entitlement.


        :param name: The name of this Entitlement.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def project_quota(self):
        """Gets the project_quota of this Entitlement.  # noqa: E501


        :return: The project_quota of this Entitlement.  # noqa: E501
        :rtype: int
        """
        return self._project_quota

    @project_quota.setter
    def project_quota(self, project_quota):
        """Sets the project_quota of this Entitlement.


        :param project_quota: The project_quota of this Entitlement.  # noqa: E501
        :type project_quota: int
        """

        self._project_quota = project_quota

    @property
    def slug(self):
        """Gets the slug of this Entitlement.  # noqa: E501


        :return: The slug of this Entitlement.  # noqa: E501
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this Entitlement.


        :param slug: The slug of this Entitlement.  # noqa: E501
        :type slug: str
        """
        if self.local_vars_configuration.client_side_validation and slug is None:  # noqa: E501
            raise ValueError("Invalid value for `slug`, must not be `None`")  # noqa: E501

        self._slug = slug

    @property
    def volume_limits(self):
        """Gets the volume_limits of this Entitlement.  # noqa: E501


        :return: The volume_limits of this Entitlement.  # noqa: E501
        :rtype: object
        """
        return self._volume_limits

    @volume_limits.setter
    def volume_limits(self, volume_limits):
        """Sets the volume_limits of this Entitlement.


        :param volume_limits: The volume_limits of this Entitlement.  # noqa: E501
        :type volume_limits: object
        """

        self._volume_limits = volume_limits

    @property
    def volume_quota(self):
        """Gets the volume_quota of this Entitlement.  # noqa: E501


        :return: The volume_quota of this Entitlement.  # noqa: E501
        :rtype: object
        """
        return self._volume_quota

    @volume_quota.setter
    def volume_quota(self, volume_quota):
        """Sets the volume_quota of this Entitlement.


        :param volume_quota: The volume_quota of this Entitlement.  # noqa: E501
        :type volume_quota: object
        """

        self._volume_quota = volume_quota

    @property
    def weight(self):
        """Gets the weight of this Entitlement.  # noqa: E501


        :return: The weight of this Entitlement.  # noqa: E501
        :rtype: int
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this Entitlement.


        :param weight: The weight of this Entitlement.  # noqa: E501
        :type weight: int
        """
        if self.local_vars_configuration.client_side_validation and weight is None:  # noqa: E501
            raise ValueError("Invalid value for `weight`, must not be `None`")  # noqa: E501

        self._weight = weight

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Entitlement):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Entitlement):
            return True

        return self.to_dict() != other.to_dict()
