# coding: utf-8

"""
    Metal API

    This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>.   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@equinixmetal.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from metal.configuration import Configuration


class Entitlement(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'description': 'str',
        'slug': 'str',
        'name': 'str',
        'weight': 'int',
        'instance_quota': 'object',
        'project_quota': 'int',
        'volume_quota': 'object',
        'ip_quota': 'object',
        'feature_access': 'object',
        'href': 'str',
        'volume_limits': 'object'
    }

    attribute_map = {
        'id': 'id',
        'description': 'description',
        'slug': 'slug',
        'name': 'name',
        'weight': 'weight',
        'instance_quota': 'instance_quota',
        'project_quota': 'project_quota',
        'volume_quota': 'volume_quota',
        'ip_quota': 'ip_quota',
        'feature_access': 'feature_access',
        'href': 'href',
        'volume_limits': 'volume_limits'
    }

    def __init__(self, id=None, description=None, slug=None, name=None, weight=None, instance_quota=None, project_quota=None, volume_quota=None, ip_quota=None, feature_access=None, href=None, volume_limits=None, local_vars_configuration=None):  # noqa: E501
        """Entitlement - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._description = None
        self._slug = None
        self._name = None
        self._weight = None
        self._instance_quota = None
        self._project_quota = None
        self._volume_quota = None
        self._ip_quota = None
        self._feature_access = None
        self._href = None
        self._volume_limits = None
        self.discriminator = None

        self.id = id
        if description is not None:
            self.description = description
        self.slug = slug
        if name is not None:
            self.name = name
        self.weight = weight
        if instance_quota is not None:
            self.instance_quota = instance_quota
        if project_quota is not None:
            self.project_quota = project_quota
        if volume_quota is not None:
            self.volume_quota = volume_quota
        if ip_quota is not None:
            self.ip_quota = ip_quota
        if feature_access is not None:
            self.feature_access = feature_access
        if href is not None:
            self.href = href
        if volume_limits is not None:
            self.volume_limits = volume_limits

    @property
    def id(self):
        """Gets the id of this Entitlement.  # noqa: E501


        :return: The id of this Entitlement.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Entitlement.


        :param id: The id of this Entitlement.  # noqa: E501
        :type id: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def description(self):
        """Gets the description of this Entitlement.  # noqa: E501


        :return: The description of this Entitlement.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Entitlement.


        :param description: The description of this Entitlement.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def slug(self):
        """Gets the slug of this Entitlement.  # noqa: E501


        :return: The slug of this Entitlement.  # noqa: E501
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this Entitlement.


        :param slug: The slug of this Entitlement.  # noqa: E501
        :type slug: str
        """
        if self.local_vars_configuration.client_side_validation and slug is None:  # noqa: E501
            raise ValueError("Invalid value for `slug`, must not be `None`")  # noqa: E501

        self._slug = slug

    @property
    def name(self):
        """Gets the name of this Entitlement.  # noqa: E501


        :return: The name of this Entitlement.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Entitlement.


        :param name: The name of this Entitlement.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def weight(self):
        """Gets the weight of this Entitlement.  # noqa: E501


        :return: The weight of this Entitlement.  # noqa: E501
        :rtype: int
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this Entitlement.


        :param weight: The weight of this Entitlement.  # noqa: E501
        :type weight: int
        """
        if self.local_vars_configuration.client_side_validation and weight is None:  # noqa: E501
            raise ValueError("Invalid value for `weight`, must not be `None`")  # noqa: E501

        self._weight = weight

    @property
    def instance_quota(self):
        """Gets the instance_quota of this Entitlement.  # noqa: E501


        :return: The instance_quota of this Entitlement.  # noqa: E501
        :rtype: object
        """
        return self._instance_quota

    @instance_quota.setter
    def instance_quota(self, instance_quota):
        """Sets the instance_quota of this Entitlement.


        :param instance_quota: The instance_quota of this Entitlement.  # noqa: E501
        :type instance_quota: object
        """

        self._instance_quota = instance_quota

    @property
    def project_quota(self):
        """Gets the project_quota of this Entitlement.  # noqa: E501


        :return: The project_quota of this Entitlement.  # noqa: E501
        :rtype: int
        """
        return self._project_quota

    @project_quota.setter
    def project_quota(self, project_quota):
        """Sets the project_quota of this Entitlement.


        :param project_quota: The project_quota of this Entitlement.  # noqa: E501
        :type project_quota: int
        """

        self._project_quota = project_quota

    @property
    def volume_quota(self):
        """Gets the volume_quota of this Entitlement.  # noqa: E501


        :return: The volume_quota of this Entitlement.  # noqa: E501
        :rtype: object
        """
        return self._volume_quota

    @volume_quota.setter
    def volume_quota(self, volume_quota):
        """Sets the volume_quota of this Entitlement.


        :param volume_quota: The volume_quota of this Entitlement.  # noqa: E501
        :type volume_quota: object
        """

        self._volume_quota = volume_quota

    @property
    def ip_quota(self):
        """Gets the ip_quota of this Entitlement.  # noqa: E501


        :return: The ip_quota of this Entitlement.  # noqa: E501
        :rtype: object
        """
        return self._ip_quota

    @ip_quota.setter
    def ip_quota(self, ip_quota):
        """Sets the ip_quota of this Entitlement.


        :param ip_quota: The ip_quota of this Entitlement.  # noqa: E501
        :type ip_quota: object
        """

        self._ip_quota = ip_quota

    @property
    def feature_access(self):
        """Gets the feature_access of this Entitlement.  # noqa: E501


        :return: The feature_access of this Entitlement.  # noqa: E501
        :rtype: object
        """
        return self._feature_access

    @feature_access.setter
    def feature_access(self, feature_access):
        """Sets the feature_access of this Entitlement.


        :param feature_access: The feature_access of this Entitlement.  # noqa: E501
        :type feature_access: object
        """

        self._feature_access = feature_access

    @property
    def href(self):
        """Gets the href of this Entitlement.  # noqa: E501


        :return: The href of this Entitlement.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this Entitlement.


        :param href: The href of this Entitlement.  # noqa: E501
        :type href: str
        """

        self._href = href

    @property
    def volume_limits(self):
        """Gets the volume_limits of this Entitlement.  # noqa: E501


        :return: The volume_limits of this Entitlement.  # noqa: E501
        :rtype: object
        """
        return self._volume_limits

    @volume_limits.setter
    def volume_limits(self, volume_limits):
        """Sets the volume_limits of this Entitlement.


        :param volume_limits: The volume_limits of this Entitlement.  # noqa: E501
        :type volume_limits: object
        """

        self._volume_limits = volume_limits

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Entitlement):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Entitlement):
            return True

        return self.to_dict() != other.to_dict()
