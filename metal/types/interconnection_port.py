# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from metal.types.base_model_ import Model
from metal.types.href import Href
from metal.types.virtual_circuit_list import VirtualCircuitList
from metal import util


class InterconnectionPort(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, organization: Href=None, role: str=None, status: str=None, switch_id: str=None, virtual_circuits: VirtualCircuitList=None, name: str=None, speed: int=None, link_status: str=None, href: str=None):
        """InterconnectionPort - a model defined in OpenAPI

        :param id: The id of this InterconnectionPort.
        :param organization: The organization of this InterconnectionPort.
        :param role: The role of this InterconnectionPort.
        :param status: The status of this InterconnectionPort.
        :param switch_id: The switch_id of this InterconnectionPort.
        :param virtual_circuits: The virtual_circuits of this InterconnectionPort.
        :param name: The name of this InterconnectionPort.
        :param speed: The speed of this InterconnectionPort.
        :param link_status: The link_status of this InterconnectionPort.
        :param href: The href of this InterconnectionPort.
        """
        self.openapi_types = {
            'id': str,
            'organization': Href,
            'role': str,
            'status': str,
            'switch_id': str,
            'virtual_circuits': VirtualCircuitList,
            'name': str,
            'speed': int,
            'link_status': str,
            'href': str
        }

        self.attribute_map = {
            'id': 'id',
            'organization': 'organization',
            'role': 'role',
            'status': 'status',
            'switch_id': 'switch_id',
            'virtual_circuits': 'virtual_circuits',
            'name': 'name',
            'speed': 'speed',
            'link_status': 'link_status',
            'href': 'href'
        }

        self._id = id
        self._organization = organization
        self._role = role
        self._status = status
        self._switch_id = switch_id
        self._virtual_circuits = virtual_circuits
        self._name = name
        self._speed = speed
        self._link_status = link_status
        self._href = href

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InterconnectionPort':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InterconnectionPort of this InterconnectionPort.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this InterconnectionPort.


        :return: The id of this InterconnectionPort.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InterconnectionPort.


        :param id: The id of this InterconnectionPort.
        :type id: str
        """

        self._id = id

    @property
    def organization(self):
        """Gets the organization of this InterconnectionPort.


        :return: The organization of this InterconnectionPort.
        :rtype: Href
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this InterconnectionPort.


        :param organization: The organization of this InterconnectionPort.
        :type organization: Href
        """

        self._organization = organization

    @property
    def role(self):
        """Gets the role of this InterconnectionPort.

        Either 'primary' or 'secondary'.

        :return: The role of this InterconnectionPort.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this InterconnectionPort.

        Either 'primary' or 'secondary'.

        :param role: The role of this InterconnectionPort.
        :type role: str
        """
        allowed_values = ["primary", "secondary"]  # noqa: E501
        if role not in allowed_values:
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"
                .format(role, allowed_values)
            )

        self._role = role

    @property
    def status(self):
        """Gets the status of this InterconnectionPort.

        For both Fabric VCs and Dedicated Ports, this will be 'requested' on creation and 'deleting' on deletion. Once the Fabric VC has found its corresponding Fabric connection, this will turn to 'active'. For Dedicated Ports, once the dedicated port is associated, this will also turn to 'active'. For Fabric VCs, this can turn into an 'expired' state if the service token associated is expired.

        :return: The status of this InterconnectionPort.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InterconnectionPort.

        For both Fabric VCs and Dedicated Ports, this will be 'requested' on creation and 'deleting' on deletion. Once the Fabric VC has found its corresponding Fabric connection, this will turn to 'active'. For Dedicated Ports, once the dedicated port is associated, this will also turn to 'active'. For Fabric VCs, this can turn into an 'expired' state if the service token associated is expired.

        :param status: The status of this InterconnectionPort.
        :type status: str
        """
        allowed_values = ["requested", "active", "deleting", "expired"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def switch_id(self):
        """Gets the switch_id of this InterconnectionPort.

        A switch 'short ID'

        :return: The switch_id of this InterconnectionPort.
        :rtype: str
        """
        return self._switch_id

    @switch_id.setter
    def switch_id(self, switch_id):
        """Sets the switch_id of this InterconnectionPort.

        A switch 'short ID'

        :param switch_id: The switch_id of this InterconnectionPort.
        :type switch_id: str
        """

        self._switch_id = switch_id

    @property
    def virtual_circuits(self):
        """Gets the virtual_circuits of this InterconnectionPort.


        :return: The virtual_circuits of this InterconnectionPort.
        :rtype: VirtualCircuitList
        """
        return self._virtual_circuits

    @virtual_circuits.setter
    def virtual_circuits(self, virtual_circuits):
        """Sets the virtual_circuits of this InterconnectionPort.


        :param virtual_circuits: The virtual_circuits of this InterconnectionPort.
        :type virtual_circuits: VirtualCircuitList
        """

        self._virtual_circuits = virtual_circuits

    @property
    def name(self):
        """Gets the name of this InterconnectionPort.


        :return: The name of this InterconnectionPort.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InterconnectionPort.


        :param name: The name of this InterconnectionPort.
        :type name: str
        """

        self._name = name

    @property
    def speed(self):
        """Gets the speed of this InterconnectionPort.


        :return: The speed of this InterconnectionPort.
        :rtype: int
        """
        return self._speed

    @speed.setter
    def speed(self, speed):
        """Sets the speed of this InterconnectionPort.


        :param speed: The speed of this InterconnectionPort.
        :type speed: int
        """

        self._speed = speed

    @property
    def link_status(self):
        """Gets the link_status of this InterconnectionPort.


        :return: The link_status of this InterconnectionPort.
        :rtype: str
        """
        return self._link_status

    @link_status.setter
    def link_status(self, link_status):
        """Sets the link_status of this InterconnectionPort.


        :param link_status: The link_status of this InterconnectionPort.
        :type link_status: str
        """

        self._link_status = link_status

    @property
    def href(self):
        """Gets the href of this InterconnectionPort.


        :return: The href of this InterconnectionPort.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this InterconnectionPort.


        :param href: The href of this InterconnectionPort.
        :type href: str
        """

        self._href = href
