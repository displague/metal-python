# coding: utf-8

"""
    Metal API

    # Introduction Equinix Metal provides a RESTful HTTP API which can be reached at <https://api.equinix.com/metal/v1>. This document describes the API and how to use it.  The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account. Every feature of the Equinix Metal web interface is accessible through the API.  The API docs are generated from the Equinix Metal OpenAPI specification and are officially hosted at <https://metal.equinix.com/developers/api>.  # Common Parameters  The Equinix Metal API uses a few methods to minimize network traffic and improve throughput. These parameters are not used in all API calls, but are used often enough to warrant their own section. Look for these parameters in the documentation for the API calls that support them.  ## Pagination  Pagination is used to limit the number of results returned in a single request. The API will return a maximum of 100 results per page. To retrieve additional results, you can use the `page` and `per_page` query parameters.  The `page` parameter is used to specify the page number. The first page is `1`. The `per_page` parameter is used to specify the number of results per page. The maximum number of results differs by resource type.  ## Sorting  Where offered, the API allows you to sort results by a specific field. To sort results use the `sort_by` query parameter with the root level field name as the value. The `sort_direction` parameter is used to specify the sort direction, either either `asc` (ascending) or `desc` (descending).  ## Filtering  Filtering is used to limit the results returned in a single request. The API supports filtering by certain fields in the response. To filter results, you can use the field as a query parameter.  For example, to filter the IP list to only return public IPv4 addresses, you can filter by the `type` field, as in the following request:  ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/projects/id/ips?type=public_ipv4 ```  Only IP addresses with the `type` field set to `public_ipv4` will be returned.  ## Searching  Searching is used to find matching resources using multiple field comparissons. The API supports searching in resources that define this behavior. The fields available for search differ by resource, as does the search strategy.  To search resources you can use the `search` query parameter.  ## Include and Exclude  For resources that contain references to other resources, sucha as a Device that refers to the Project it resides in, the Equinix Metal API will returns `href` values (API links) to the associated resource.  ```json {   ...   \"project\": {     \"href\": \"/metal/v1/projects/f3f131c8-f302-49ef-8c44-9405022dc6dd\"   } } ```  If you're going need the project details, you can avoid a second API request.  Specify the contained `href` resources and collections that you'd like to have included in the response using the `include` query parameter.  For example:  ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/user?include=projects ```  The `include` parameter is generally accepted in `GET`, `POST`, `PUT`, and `PATCH` requests where `href` resources are presented.  To have multiple resources include, use a comma-separated list (e.g. `?include=emails,projects,memberships`).  ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/user?include=emails,projects,memberships ```  You may also include nested associations up to three levels deep using dot notation (`?include=memberships.projects`):  ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/user?include=memberships.projects ```  To exclude resources, and optimize response delivery, use the `exclude` query parameter. The `exclude` parameter is generally accepted in `GET`, `POST`, `PUT`, and `PATCH` requests for fields with nested object responses. When excluded, these fields will be replaced with an object that contains only an `href` field.   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@equinixmetal.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from metal.configuration import Configuration


class MetalGatewayCreateInput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'ip_reservation_id': 'str',
        'private_ipv4_subnet_size': 'int',
        'virtual_network_id': 'str'
    }

    attribute_map = {
        'ip_reservation_id': 'ip_reservation_id',
        'private_ipv4_subnet_size': 'private_ipv4_subnet_size',
        'virtual_network_id': 'virtual_network_id'
    }

    def __init__(self, ip_reservation_id=None, private_ipv4_subnet_size=None, virtual_network_id=None, local_vars_configuration=None):  # noqa: E501
        """MetalGatewayCreateInput - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._ip_reservation_id = None
        self._private_ipv4_subnet_size = None
        self._virtual_network_id = None
        self.discriminator = None

        if ip_reservation_id is not None:
            self.ip_reservation_id = ip_reservation_id
        if private_ipv4_subnet_size is not None:
            self.private_ipv4_subnet_size = private_ipv4_subnet_size
        self.virtual_network_id = virtual_network_id

    @property
    def ip_reservation_id(self):
        """Gets the ip_reservation_id of this MetalGatewayCreateInput.  # noqa: E501

        The UUID of an IP reservation that belongs to the same project as where the metal gateway will be created in. This field is required unless the private IPv4 subnet size is specified.  # noqa: E501

        :return: The ip_reservation_id of this MetalGatewayCreateInput.  # noqa: E501
        :rtype: str
        """
        return self._ip_reservation_id

    @ip_reservation_id.setter
    def ip_reservation_id(self, ip_reservation_id):
        """Sets the ip_reservation_id of this MetalGatewayCreateInput.

        The UUID of an IP reservation that belongs to the same project as where the metal gateway will be created in. This field is required unless the private IPv4 subnet size is specified.  # noqa: E501

        :param ip_reservation_id: The ip_reservation_id of this MetalGatewayCreateInput.  # noqa: E501
        :type ip_reservation_id: str
        """

        self._ip_reservation_id = ip_reservation_id

    @property
    def private_ipv4_subnet_size(self):
        """Gets the private_ipv4_subnet_size of this MetalGatewayCreateInput.  # noqa: E501

        The subnet size (8, 16, 32, 64, or 128) of the private IPv4 reservation that will be created for the metal gateway. This field is required unless a project IP reservation was specified.           Please keep in mind that the number of private metal gateway ranges are limited per project. If you would like to increase the limit per project, please contact support for assistance.  # noqa: E501

        :return: The private_ipv4_subnet_size of this MetalGatewayCreateInput.  # noqa: E501
        :rtype: int
        """
        return self._private_ipv4_subnet_size

    @private_ipv4_subnet_size.setter
    def private_ipv4_subnet_size(self, private_ipv4_subnet_size):
        """Sets the private_ipv4_subnet_size of this MetalGatewayCreateInput.

        The subnet size (8, 16, 32, 64, or 128) of the private IPv4 reservation that will be created for the metal gateway. This field is required unless a project IP reservation was specified.           Please keep in mind that the number of private metal gateway ranges are limited per project. If you would like to increase the limit per project, please contact support for assistance.  # noqa: E501

        :param private_ipv4_subnet_size: The private_ipv4_subnet_size of this MetalGatewayCreateInput.  # noqa: E501
        :type private_ipv4_subnet_size: int
        """

        self._private_ipv4_subnet_size = private_ipv4_subnet_size

    @property
    def virtual_network_id(self):
        """Gets the virtual_network_id of this MetalGatewayCreateInput.  # noqa: E501

        The UUID of a metro virtual network that belongs to the same project as where the metal gateway will be created in.  # noqa: E501

        :return: The virtual_network_id of this MetalGatewayCreateInput.  # noqa: E501
        :rtype: str
        """
        return self._virtual_network_id

    @virtual_network_id.setter
    def virtual_network_id(self, virtual_network_id):
        """Sets the virtual_network_id of this MetalGatewayCreateInput.

        The UUID of a metro virtual network that belongs to the same project as where the metal gateway will be created in.  # noqa: E501

        :param virtual_network_id: The virtual_network_id of this MetalGatewayCreateInput.  # noqa: E501
        :type virtual_network_id: str
        """
        if self.local_vars_configuration.client_side_validation and virtual_network_id is None:  # noqa: E501
            raise ValueError("Invalid value for `virtual_network_id`, must not be `None`")  # noqa: E501

        self._virtual_network_id = virtual_network_id

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MetalGatewayCreateInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MetalGatewayCreateInput):
            return True

        return self.to_dict() != other.to_dict()
