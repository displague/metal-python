# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from metal.types.base_model_ import Model
from metal import util


class VrfRouteCreateInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, prefix: str=None, next_hop: str=None):
        """VrfRouteCreateInput - a model defined in OpenAPI

        :param prefix: The prefix of this VrfRouteCreateInput.
        :param next_hop: The next_hop of this VrfRouteCreateInput.
        """
        self.openapi_types = {
            'prefix': str,
            'next_hop': str
        }

        self.attribute_map = {
            'prefix': 'prefix',
            'next_hop': 'next_hop'
        }

        self._prefix = prefix
        self._next_hop = next_hop

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VrfRouteCreateInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VrfRouteCreateInput of this VrfRouteCreateInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def prefix(self):
        """Gets the prefix of this VrfRouteCreateInput.

        The IPv4 prefix for the route, in CIDR-style notation. For a static default route, this will always be \"0.0.0.0/0\"

        :return: The prefix of this VrfRouteCreateInput.
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this VrfRouteCreateInput.

        The IPv4 prefix for the route, in CIDR-style notation. For a static default route, this will always be \"0.0.0.0/0\"

        :param prefix: The prefix of this VrfRouteCreateInput.
        :type prefix: str
        """
        if prefix is None:
            raise ValueError("Invalid value for `prefix`, must not be `None`")

        self._prefix = prefix

    @property
    def next_hop(self):
        """Gets the next_hop of this VrfRouteCreateInput.

        The IPv4 address within the VRF of the host that will handle this route

        :return: The next_hop of this VrfRouteCreateInput.
        :rtype: str
        """
        return self._next_hop

    @next_hop.setter
    def next_hop(self, next_hop):
        """Sets the next_hop of this VrfRouteCreateInput.

        The IPv4 address within the VRF of the host that will handle this route

        :param next_hop: The next_hop of this VrfRouteCreateInput.
        :type next_hop: str
        """
        if next_hop is None:
            raise ValueError("Invalid value for `next_hop`, must not be `None`")

        self._next_hop = next_hop
