# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from metal.types.base_model_ import Model
from metal.types.auth_token_project import AuthTokenProject
from metal.types.auth_token_user import AuthTokenUser
from metal import util


class AuthToken(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: datetime=None, description: str=None, id: str=None, project: AuthTokenProject=None, read_only: bool=None, token: str=None, updated_at: datetime=None, user: AuthTokenUser=None):
        """AuthToken - a model defined in OpenAPI

        :param created_at: The created_at of this AuthToken.
        :param description: The description of this AuthToken.
        :param id: The id of this AuthToken.
        :param project: The project of this AuthToken.
        :param read_only: The read_only of this AuthToken.
        :param token: The token of this AuthToken.
        :param updated_at: The updated_at of this AuthToken.
        :param user: The user of this AuthToken.
        """
        self.openapi_types = {
            'created_at': datetime,
            'description': str,
            'id': str,
            'project': AuthTokenProject,
            'read_only': bool,
            'token': str,
            'updated_at': datetime,
            'user': AuthTokenUser
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'description': 'description',
            'id': 'id',
            'project': 'project',
            'read_only': 'read_only',
            'token': 'token',
            'updated_at': 'updated_at',
            'user': 'user'
        }

        self._created_at = created_at
        self._description = description
        self._id = id
        self._project = project
        self._read_only = read_only
        self._token = token
        self._updated_at = updated_at
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AuthToken':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AuthToken of this AuthToken.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this AuthToken.


        :return: The created_at of this AuthToken.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this AuthToken.


        :param created_at: The created_at of this AuthToken.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def description(self):
        """Gets the description of this AuthToken.

        Available only for API keys

        :return: The description of this AuthToken.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AuthToken.

        Available only for API keys

        :param description: The description of this AuthToken.
        :type description: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this AuthToken.


        :return: The id of this AuthToken.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AuthToken.


        :param id: The id of this AuthToken.
        :type id: str
        """

        self._id = id

    @property
    def project(self):
        """Gets the project of this AuthToken.


        :return: The project of this AuthToken.
        :rtype: AuthTokenProject
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this AuthToken.


        :param project: The project of this AuthToken.
        :type project: AuthTokenProject
        """

        self._project = project

    @property
    def read_only(self):
        """Gets the read_only of this AuthToken.


        :return: The read_only of this AuthToken.
        :rtype: bool
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only):
        """Sets the read_only of this AuthToken.


        :param read_only: The read_only of this AuthToken.
        :type read_only: bool
        """

        self._read_only = read_only

    @property
    def token(self):
        """Gets the token of this AuthToken.


        :return: The token of this AuthToken.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this AuthToken.


        :param token: The token of this AuthToken.
        :type token: str
        """

        self._token = token

    @property
    def updated_at(self):
        """Gets the updated_at of this AuthToken.


        :return: The updated_at of this AuthToken.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this AuthToken.


        :param updated_at: The updated_at of this AuthToken.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def user(self):
        """Gets the user of this AuthToken.


        :return: The user of this AuthToken.
        :rtype: AuthTokenUser
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this AuthToken.


        :param user: The user of this AuthToken.
        :type user: AuthTokenUser
        """

        self._user = user
