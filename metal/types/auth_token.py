# coding: utf-8

"""
    Metal API

    This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>.   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@equinixmetal.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from metal.configuration import Configuration


class AuthToken(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'token': 'str',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'description': 'str',
        'read_only': 'bool',
        'user': 'User',
        'project': 'Project'
    }

    attribute_map = {
        'id': 'id',
        'token': 'token',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'description': 'description',
        'read_only': 'read_only',
        'user': 'user',
        'project': 'project'
    }

    def __init__(self, id=None, token=None, created_at=None, updated_at=None, description=None, read_only=None, user=None, project=None, local_vars_configuration=None):  # noqa: E501
        """AuthToken - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._token = None
        self._created_at = None
        self._updated_at = None
        self._description = None
        self._read_only = None
        self._user = None
        self._project = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if token is not None:
            self.token = token
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if description is not None:
            self.description = description
        if read_only is not None:
            self.read_only = read_only
        if user is not None:
            self.user = user
        if project is not None:
            self.project = project

    @property
    def id(self):
        """Gets the id of this AuthToken.  # noqa: E501


        :return: The id of this AuthToken.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AuthToken.


        :param id: The id of this AuthToken.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def token(self):
        """Gets the token of this AuthToken.  # noqa: E501


        :return: The token of this AuthToken.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this AuthToken.


        :param token: The token of this AuthToken.  # noqa: E501
        :type token: str
        """

        self._token = token

    @property
    def created_at(self):
        """Gets the created_at of this AuthToken.  # noqa: E501


        :return: The created_at of this AuthToken.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this AuthToken.


        :param created_at: The created_at of this AuthToken.  # noqa: E501
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this AuthToken.  # noqa: E501


        :return: The updated_at of this AuthToken.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this AuthToken.


        :param updated_at: The updated_at of this AuthToken.  # noqa: E501
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def description(self):
        """Gets the description of this AuthToken.  # noqa: E501

        Available only for API keys  # noqa: E501

        :return: The description of this AuthToken.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AuthToken.

        Available only for API keys  # noqa: E501

        :param description: The description of this AuthToken.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def read_only(self):
        """Gets the read_only of this AuthToken.  # noqa: E501


        :return: The read_only of this AuthToken.  # noqa: E501
        :rtype: bool
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only):
        """Sets the read_only of this AuthToken.


        :param read_only: The read_only of this AuthToken.  # noqa: E501
        :type read_only: bool
        """

        self._read_only = read_only

    @property
    def user(self):
        """Gets the user of this AuthToken.  # noqa: E501


        :return: The user of this AuthToken.  # noqa: E501
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this AuthToken.


        :param user: The user of this AuthToken.  # noqa: E501
        :type user: User
        """

        self._user = user

    @property
    def project(self):
        """Gets the project of this AuthToken.  # noqa: E501


        :return: The project of this AuthToken.  # noqa: E501
        :rtype: Project
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this AuthToken.


        :param project: The project of this AuthToken.  # noqa: E501
        :type project: Project
        """

        self._project = project

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuthToken):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AuthToken):
            return True

        return self.to_dict() != other.to_dict()
