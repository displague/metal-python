# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from metal.types.base_model_ import Model
from metal import util


class PortData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, mac: str=None, bonded: bool=None):
        """PortData - a model defined in OpenAPI

        :param mac: The mac of this PortData.
        :param bonded: The bonded of this PortData.
        """
        self.openapi_types = {
            'mac': str,
            'bonded': bool
        }

        self.attribute_map = {
            'mac': 'mac',
            'bonded': 'bonded'
        }

        self._mac = mac
        self._bonded = bonded

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PortData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PortData of this PortData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def mac(self):
        """Gets the mac of this PortData.

        MAC address is set for NetworkPort ports

        :return: The mac of this PortData.
        :rtype: str
        """
        return self._mac

    @mac.setter
    def mac(self, mac):
        """Sets the mac of this PortData.

        MAC address is set for NetworkPort ports

        :param mac: The mac of this PortData.
        :type mac: str
        """

        self._mac = mac

    @property
    def bonded(self):
        """Gets the bonded of this PortData.

        Bonded is true for NetworkPort ports in a bond and NetworkBondPort ports that are active

        :return: The bonded of this PortData.
        :rtype: bool
        """
        return self._bonded

    @bonded.setter
    def bonded(self, bonded):
        """Sets the bonded of this PortData.

        Bonded is true for NetworkPort ports in a bond and NetworkBondPort ports that are active

        :param bonded: The bonded of this PortData.
        :type bonded: bool
        """

        self._bonded = bonded
