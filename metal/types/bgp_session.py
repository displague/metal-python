# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from metal.types.base_model_ import Model
from metal.types.href import Href
from metal import util


class BgpSession(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address_family: str=None, created_at: datetime=None, default_route: bool=None, device: Href=None, href: str=None, id: str=None, learned_routes: List[str]=None, status: str=None, updated_at: datetime=None):
        """BgpSession - a model defined in OpenAPI

        :param address_family: The address_family of this BgpSession.
        :param created_at: The created_at of this BgpSession.
        :param default_route: The default_route of this BgpSession.
        :param device: The device of this BgpSession.
        :param href: The href of this BgpSession.
        :param id: The id of this BgpSession.
        :param learned_routes: The learned_routes of this BgpSession.
        :param status: The status of this BgpSession.
        :param updated_at: The updated_at of this BgpSession.
        """
        self.openapi_types = {
            'address_family': str,
            'created_at': datetime,
            'default_route': bool,
            'device': Href,
            'href': str,
            'id': str,
            'learned_routes': List[str],
            'status': str,
            'updated_at': datetime
        }

        self.attribute_map = {
            'address_family': 'address_family',
            'created_at': 'created_at',
            'default_route': 'default_route',
            'device': 'device',
            'href': 'href',
            'id': 'id',
            'learned_routes': 'learned_routes',
            'status': 'status',
            'updated_at': 'updated_at'
        }

        self._address_family = address_family
        self._created_at = created_at
        self._default_route = default_route
        self._device = device
        self._href = href
        self._id = id
        self._learned_routes = learned_routes
        self._status = status
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BgpSession':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BgpSession of this BgpSession.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address_family(self):
        """Gets the address_family of this BgpSession.


        :return: The address_family of this BgpSession.
        :rtype: str
        """
        return self._address_family

    @address_family.setter
    def address_family(self, address_family):
        """Sets the address_family of this BgpSession.


        :param address_family: The address_family of this BgpSession.
        :type address_family: str
        """
        allowed_values = ["ipv4", "ipv6"]  # noqa: E501
        if address_family not in allowed_values:
            raise ValueError(
                "Invalid value for `address_family` ({0}), must be one of {1}"
                .format(address_family, allowed_values)
            )

        self._address_family = address_family

    @property
    def created_at(self):
        """Gets the created_at of this BgpSession.


        :return: The created_at of this BgpSession.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this BgpSession.


        :param created_at: The created_at of this BgpSession.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def default_route(self):
        """Gets the default_route of this BgpSession.


        :return: The default_route of this BgpSession.
        :rtype: bool
        """
        return self._default_route

    @default_route.setter
    def default_route(self, default_route):
        """Sets the default_route of this BgpSession.


        :param default_route: The default_route of this BgpSession.
        :type default_route: bool
        """

        self._default_route = default_route

    @property
    def device(self):
        """Gets the device of this BgpSession.


        :return: The device of this BgpSession.
        :rtype: Href
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this BgpSession.


        :param device: The device of this BgpSession.
        :type device: Href
        """

        self._device = device

    @property
    def href(self):
        """Gets the href of this BgpSession.


        :return: The href of this BgpSession.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this BgpSession.


        :param href: The href of this BgpSession.
        :type href: str
        """

        self._href = href

    @property
    def id(self):
        """Gets the id of this BgpSession.


        :return: The id of this BgpSession.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BgpSession.


        :param id: The id of this BgpSession.
        :type id: str
        """

        self._id = id

    @property
    def learned_routes(self):
        """Gets the learned_routes of this BgpSession.


        :return: The learned_routes of this BgpSession.
        :rtype: List[str]
        """
        return self._learned_routes

    @learned_routes.setter
    def learned_routes(self, learned_routes):
        """Sets the learned_routes of this BgpSession.


        :param learned_routes: The learned_routes of this BgpSession.
        :type learned_routes: List[str]
        """

        self._learned_routes = learned_routes

    @property
    def status(self):
        """Gets the status of this BgpSession.

         The status of the BGP Session. Multiple status values may be reported when the device is connected to multiple switches, one value per switch. Each status will start with \"unknown\" and progress to \"up\" or \"down\" depending on the connected device. Subsequent \"unknown\" values indicate a problem acquiring status from the switch. 

        :return: The status of this BgpSession.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this BgpSession.

         The status of the BGP Session. Multiple status values may be reported when the device is connected to multiple switches, one value per switch. Each status will start with \"unknown\" and progress to \"up\" or \"down\" depending on the connected device. Subsequent \"unknown\" values indicate a problem acquiring status from the switch. 

        :param status: The status of this BgpSession.
        :type status: str
        """
        allowed_values = ["unknown", "up", "down"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def updated_at(self):
        """Gets the updated_at of this BgpSession.


        :return: The updated_at of this BgpSession.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this BgpSession.


        :param updated_at: The updated_at of this BgpSession.
        :type updated_at: datetime
        """

        self._updated_at = updated_at
