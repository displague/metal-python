# coding: utf-8

"""
    Metal API

    This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>.   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@equinixmetal.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from metal.configuration import Configuration


class BgpSession(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'status': 'str',
        'learned_routes': 'list[str]',
        'address_family': 'str',
        'device': 'Href',
        'href': 'str',
        'default_route': 'bool',
        'created_at': 'datetime',
        'updated_at': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'status': 'status',
        'learned_routes': 'learned_routes',
        'address_family': 'address_family',
        'device': 'device',
        'href': 'href',
        'default_route': 'default_route',
        'created_at': 'created_at',
        'updated_at': 'updated_at'
    }

    def __init__(self, id=None, status=None, learned_routes=None, address_family=None, device=None, href=None, default_route=None, created_at=None, updated_at=None, local_vars_configuration=None):  # noqa: E501
        """BgpSession - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._status = None
        self._learned_routes = None
        self._address_family = None
        self._device = None
        self._href = None
        self._default_route = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if status is not None:
            self.status = status
        if learned_routes is not None:
            self.learned_routes = learned_routes
        self.address_family = address_family
        if device is not None:
            self.device = device
        if href is not None:
            self.href = href
        if default_route is not None:
            self.default_route = default_route
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def id(self):
        """Gets the id of this BgpSession.  # noqa: E501


        :return: The id of this BgpSession.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BgpSession.


        :param id: The id of this BgpSession.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def status(self):
        """Gets the status of this BgpSession.  # noqa: E501

         The status of the BGP Session. Multiple status values may be reported when the device is connected to multiple switches, one value per switch. Each status will start with \"unknown\" and progress to \"up\" or \"down\" depending on the connected device. Subsequent \"unknown\" values indicate a problem acquiring status from the switch.   # noqa: E501

        :return: The status of this BgpSession.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this BgpSession.

         The status of the BGP Session. Multiple status values may be reported when the device is connected to multiple switches, one value per switch. Each status will start with \"unknown\" and progress to \"up\" or \"down\" depending on the connected device. Subsequent \"unknown\" values indicate a problem acquiring status from the switch.   # noqa: E501

        :param status: The status of this BgpSession.  # noqa: E501
        :type status: str
        """
        allowed_values = ["unknown", "up", "down"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def learned_routes(self):
        """Gets the learned_routes of this BgpSession.  # noqa: E501


        :return: The learned_routes of this BgpSession.  # noqa: E501
        :rtype: list[str]
        """
        return self._learned_routes

    @learned_routes.setter
    def learned_routes(self, learned_routes):
        """Sets the learned_routes of this BgpSession.


        :param learned_routes: The learned_routes of this BgpSession.  # noqa: E501
        :type learned_routes: list[str]
        """

        self._learned_routes = learned_routes

    @property
    def address_family(self):
        """Gets the address_family of this BgpSession.  # noqa: E501


        :return: The address_family of this BgpSession.  # noqa: E501
        :rtype: str
        """
        return self._address_family

    @address_family.setter
    def address_family(self, address_family):
        """Sets the address_family of this BgpSession.


        :param address_family: The address_family of this BgpSession.  # noqa: E501
        :type address_family: str
        """
        if self.local_vars_configuration.client_side_validation and address_family is None:  # noqa: E501
            raise ValueError("Invalid value for `address_family`, must not be `None`")  # noqa: E501
        allowed_values = ["ipv4", "ipv6"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and address_family not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `address_family` ({0}), must be one of {1}"  # noqa: E501
                .format(address_family, allowed_values)
            )

        self._address_family = address_family

    @property
    def device(self):
        """Gets the device of this BgpSession.  # noqa: E501


        :return: The device of this BgpSession.  # noqa: E501
        :rtype: Href
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this BgpSession.


        :param device: The device of this BgpSession.  # noqa: E501
        :type device: Href
        """

        self._device = device

    @property
    def href(self):
        """Gets the href of this BgpSession.  # noqa: E501


        :return: The href of this BgpSession.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this BgpSession.


        :param href: The href of this BgpSession.  # noqa: E501
        :type href: str
        """

        self._href = href

    @property
    def default_route(self):
        """Gets the default_route of this BgpSession.  # noqa: E501


        :return: The default_route of this BgpSession.  # noqa: E501
        :rtype: bool
        """
        return self._default_route

    @default_route.setter
    def default_route(self, default_route):
        """Sets the default_route of this BgpSession.


        :param default_route: The default_route of this BgpSession.  # noqa: E501
        :type default_route: bool
        """

        self._default_route = default_route

    @property
    def created_at(self):
        """Gets the created_at of this BgpSession.  # noqa: E501


        :return: The created_at of this BgpSession.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this BgpSession.


        :param created_at: The created_at of this BgpSession.  # noqa: E501
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this BgpSession.  # noqa: E501


        :return: The updated_at of this BgpSession.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this BgpSession.


        :param updated_at: The updated_at of this BgpSession.  # noqa: E501
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BgpSession):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BgpSession):
            return True

        return self.to_dict() != other.to_dict()
