# coding: utf-8

"""
    Metal API

    This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>.   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@equinixmetal.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from metal.configuration import Configuration


class MetalGatewayInput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'virtual_network_id': 'str',
        'ip_reservation_id': 'str',
        'private_ipv4_subnet_size': 'int'
    }

    attribute_map = {
        'virtual_network_id': 'virtual_network_id',
        'ip_reservation_id': 'ip_reservation_id',
        'private_ipv4_subnet_size': 'private_ipv4_subnet_size'
    }

    def __init__(self, virtual_network_id=None, ip_reservation_id=None, private_ipv4_subnet_size=None, local_vars_configuration=None):  # noqa: E501
        """MetalGatewayInput - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._virtual_network_id = None
        self._ip_reservation_id = None
        self._private_ipv4_subnet_size = None
        self.discriminator = None

        self.virtual_network_id = virtual_network_id
        if ip_reservation_id is not None:
            self.ip_reservation_id = ip_reservation_id
        if private_ipv4_subnet_size is not None:
            self.private_ipv4_subnet_size = private_ipv4_subnet_size

    @property
    def virtual_network_id(self):
        """Gets the virtual_network_id of this MetalGatewayInput.  # noqa: E501

        The UUID of a metro virtual network that belongs to the same project as where the metal gateway will be created in.  # noqa: E501

        :return: The virtual_network_id of this MetalGatewayInput.  # noqa: E501
        :rtype: str
        """
        return self._virtual_network_id

    @virtual_network_id.setter
    def virtual_network_id(self, virtual_network_id):
        """Sets the virtual_network_id of this MetalGatewayInput.

        The UUID of a metro virtual network that belongs to the same project as where the metal gateway will be created in.  # noqa: E501

        :param virtual_network_id: The virtual_network_id of this MetalGatewayInput.  # noqa: E501
        :type virtual_network_id: str
        """
        if self.local_vars_configuration.client_side_validation and virtual_network_id is None:  # noqa: E501
            raise ValueError("Invalid value for `virtual_network_id`, must not be `None`")  # noqa: E501

        self._virtual_network_id = virtual_network_id

    @property
    def ip_reservation_id(self):
        """Gets the ip_reservation_id of this MetalGatewayInput.  # noqa: E501

        The UUID of an IP reservation that belongs to the same project as where the metal gateway will be created in. This field is required unless the private IPv4 subnet size is specified.  # noqa: E501

        :return: The ip_reservation_id of this MetalGatewayInput.  # noqa: E501
        :rtype: str
        """
        return self._ip_reservation_id

    @ip_reservation_id.setter
    def ip_reservation_id(self, ip_reservation_id):
        """Sets the ip_reservation_id of this MetalGatewayInput.

        The UUID of an IP reservation that belongs to the same project as where the metal gateway will be created in. This field is required unless the private IPv4 subnet size is specified.  # noqa: E501

        :param ip_reservation_id: The ip_reservation_id of this MetalGatewayInput.  # noqa: E501
        :type ip_reservation_id: str
        """

        self._ip_reservation_id = ip_reservation_id

    @property
    def private_ipv4_subnet_size(self):
        """Gets the private_ipv4_subnet_size of this MetalGatewayInput.  # noqa: E501

        The subnet size (8, 16, 32, 64, or 128) of the private IPv4 reservation that will be created for the metal gateway. This field is required unless a project IP reservation was specified.           Please keep in mind that the number of private metal gateway ranges are limited per project. If you would like to increase the limit per project, please contact support for assistance.  # noqa: E501

        :return: The private_ipv4_subnet_size of this MetalGatewayInput.  # noqa: E501
        :rtype: int
        """
        return self._private_ipv4_subnet_size

    @private_ipv4_subnet_size.setter
    def private_ipv4_subnet_size(self, private_ipv4_subnet_size):
        """Sets the private_ipv4_subnet_size of this MetalGatewayInput.

        The subnet size (8, 16, 32, 64, or 128) of the private IPv4 reservation that will be created for the metal gateway. This field is required unless a project IP reservation was specified.           Please keep in mind that the number of private metal gateway ranges are limited per project. If you would like to increase the limit per project, please contact support for assistance.  # noqa: E501

        :param private_ipv4_subnet_size: The private_ipv4_subnet_size of this MetalGatewayInput.  # noqa: E501
        :type private_ipv4_subnet_size: int
        """

        self._private_ipv4_subnet_size = private_ipv4_subnet_size

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MetalGatewayInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MetalGatewayInput):
            return True

        return self.to_dict() != other.to_dict()
