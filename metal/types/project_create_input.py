# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from metal.types.base_model_ import Model
from metal import util


class ProjectCreateInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, customdata: object=None, name: str=None, payment_method_id: str=None):
        """ProjectCreateInput - a model defined in OpenAPI

        :param customdata: The customdata of this ProjectCreateInput.
        :param name: The name of this ProjectCreateInput.
        :param payment_method_id: The payment_method_id of this ProjectCreateInput.
        """
        self.openapi_types = {
            'customdata': object,
            'name': str,
            'payment_method_id': str
        }

        self.attribute_map = {
            'customdata': 'customdata',
            'name': 'name',
            'payment_method_id': 'payment_method_id'
        }

        self._customdata = customdata
        self._name = name
        self._payment_method_id = payment_method_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProjectCreateInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProjectCreateInput of this ProjectCreateInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def customdata(self):
        """Gets the customdata of this ProjectCreateInput.


        :return: The customdata of this ProjectCreateInput.
        :rtype: object
        """
        return self._customdata

    @customdata.setter
    def customdata(self, customdata):
        """Sets the customdata of this ProjectCreateInput.


        :param customdata: The customdata of this ProjectCreateInput.
        :type customdata: object
        """

        self._customdata = customdata

    @property
    def name(self):
        """Gets the name of this ProjectCreateInput.


        :return: The name of this ProjectCreateInput.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProjectCreateInput.


        :param name: The name of this ProjectCreateInput.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def payment_method_id(self):
        """Gets the payment_method_id of this ProjectCreateInput.


        :return: The payment_method_id of this ProjectCreateInput.
        :rtype: str
        """
        return self._payment_method_id

    @payment_method_id.setter
    def payment_method_id(self, payment_method_id):
        """Sets the payment_method_id of this ProjectCreateInput.


        :param payment_method_id: The payment_method_id of this ProjectCreateInput.
        :type payment_method_id: str
        """

        self._payment_method_id = payment_method_id
