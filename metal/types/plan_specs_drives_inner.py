# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from metal.types.base_model_ import Model
from metal import util


class PlanSpecsDrivesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: int=None, type: str=None, size: str=None, category: str=None):
        """PlanSpecsDrivesInner - a model defined in OpenAPI

        :param count: The count of this PlanSpecsDrivesInner.
        :param type: The type of this PlanSpecsDrivesInner.
        :param size: The size of this PlanSpecsDrivesInner.
        :param category: The category of this PlanSpecsDrivesInner.
        """
        self.openapi_types = {
            'count': int,
            'type': str,
            'size': str,
            'category': str
        }

        self.attribute_map = {
            'count': 'count',
            'type': 'type',
            'size': 'size',
            'category': 'category'
        }

        self._count = count
        self._type = type
        self._size = size
        self._category = category

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PlanSpecsDrivesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Plan_specs_drives_inner of this PlanSpecsDrivesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this PlanSpecsDrivesInner.


        :return: The count of this PlanSpecsDrivesInner.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this PlanSpecsDrivesInner.


        :param count: The count of this PlanSpecsDrivesInner.
        :type count: int
        """

        self._count = count

    @property
    def type(self):
        """Gets the type of this PlanSpecsDrivesInner.


        :return: The type of this PlanSpecsDrivesInner.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PlanSpecsDrivesInner.


        :param type: The type of this PlanSpecsDrivesInner.
        :type type: str
        """
        allowed_values = ["HDD", "SSD", "NVME"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def size(self):
        """Gets the size of this PlanSpecsDrivesInner.


        :return: The size of this PlanSpecsDrivesInner.
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this PlanSpecsDrivesInner.


        :param size: The size of this PlanSpecsDrivesInner.
        :type size: str
        """

        self._size = size

    @property
    def category(self):
        """Gets the category of this PlanSpecsDrivesInner.


        :return: The category of this PlanSpecsDrivesInner.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this PlanSpecsDrivesInner.


        :param category: The category of this PlanSpecsDrivesInner.
        :type category: str
        """
        allowed_values = ["boot", "cache", "storage"]  # noqa: E501
        if category not in allowed_values:
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"
                .format(category, allowed_values)
            )

        self._category = category
