# coding: utf-8

"""
    Metal API

    This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>.   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@equinixmetal.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from metal.configuration import Configuration


class CapacityPerFacility(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'baremetal_2a': 'CapacityLevelPerBaremetal',
        'baremetal_2a2': 'CapacityLevelPerBaremetal',
        'baremetal_1': 'CapacityLevelPerBaremetal',
        'baremetal_3': 'CapacityLevelPerBaremetal',
        'c2_medium_x86': 'CapacityLevelPerBaremetal',
        'baremetal_2': 'CapacityLevelPerBaremetal',
        'm2_xlarge_x86': 'CapacityLevelPerBaremetal',
        'baremetal_s': 'CapacityLevelPerBaremetal',
        'baremetal_0': 'CapacityLevelPerBaremetal'
    }

    attribute_map = {
        'baremetal_2a': 'baremetal_2a',
        'baremetal_2a2': 'baremetal_2a2',
        'baremetal_1': 'baremetal_1',
        'baremetal_3': 'baremetal_3',
        'c2_medium_x86': 'c2.medium.x86',
        'baremetal_2': 'baremetal_2',
        'm2_xlarge_x86': 'm2.xlarge.x86',
        'baremetal_s': 'baremetal_s',
        'baremetal_0': 'baremetal_0'
    }

    def __init__(self, baremetal_2a=None, baremetal_2a2=None, baremetal_1=None, baremetal_3=None, c2_medium_x86=None, baremetal_2=None, m2_xlarge_x86=None, baremetal_s=None, baremetal_0=None, local_vars_configuration=None):  # noqa: E501
        """CapacityPerFacility - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._baremetal_2a = None
        self._baremetal_2a2 = None
        self._baremetal_1 = None
        self._baremetal_3 = None
        self._c2_medium_x86 = None
        self._baremetal_2 = None
        self._m2_xlarge_x86 = None
        self._baremetal_s = None
        self._baremetal_0 = None
        self.discriminator = None

        if baremetal_2a is not None:
            self.baremetal_2a = baremetal_2a
        if baremetal_2a2 is not None:
            self.baremetal_2a2 = baremetal_2a2
        if baremetal_1 is not None:
            self.baremetal_1 = baremetal_1
        if baremetal_3 is not None:
            self.baremetal_3 = baremetal_3
        if c2_medium_x86 is not None:
            self.c2_medium_x86 = c2_medium_x86
        if baremetal_2 is not None:
            self.baremetal_2 = baremetal_2
        if m2_xlarge_x86 is not None:
            self.m2_xlarge_x86 = m2_xlarge_x86
        if baremetal_s is not None:
            self.baremetal_s = baremetal_s
        if baremetal_0 is not None:
            self.baremetal_0 = baremetal_0

    @property
    def baremetal_2a(self):
        """Gets the baremetal_2a of this CapacityPerFacility.  # noqa: E501


        :return: The baremetal_2a of this CapacityPerFacility.  # noqa: E501
        :rtype: CapacityLevelPerBaremetal
        """
        return self._baremetal_2a

    @baremetal_2a.setter
    def baremetal_2a(self, baremetal_2a):
        """Sets the baremetal_2a of this CapacityPerFacility.


        :param baremetal_2a: The baremetal_2a of this CapacityPerFacility.  # noqa: E501
        :type baremetal_2a: CapacityLevelPerBaremetal
        """

        self._baremetal_2a = baremetal_2a

    @property
    def baremetal_2a2(self):
        """Gets the baremetal_2a2 of this CapacityPerFacility.  # noqa: E501


        :return: The baremetal_2a2 of this CapacityPerFacility.  # noqa: E501
        :rtype: CapacityLevelPerBaremetal
        """
        return self._baremetal_2a2

    @baremetal_2a2.setter
    def baremetal_2a2(self, baremetal_2a2):
        """Sets the baremetal_2a2 of this CapacityPerFacility.


        :param baremetal_2a2: The baremetal_2a2 of this CapacityPerFacility.  # noqa: E501
        :type baremetal_2a2: CapacityLevelPerBaremetal
        """

        self._baremetal_2a2 = baremetal_2a2

    @property
    def baremetal_1(self):
        """Gets the baremetal_1 of this CapacityPerFacility.  # noqa: E501


        :return: The baremetal_1 of this CapacityPerFacility.  # noqa: E501
        :rtype: CapacityLevelPerBaremetal
        """
        return self._baremetal_1

    @baremetal_1.setter
    def baremetal_1(self, baremetal_1):
        """Sets the baremetal_1 of this CapacityPerFacility.


        :param baremetal_1: The baremetal_1 of this CapacityPerFacility.  # noqa: E501
        :type baremetal_1: CapacityLevelPerBaremetal
        """

        self._baremetal_1 = baremetal_1

    @property
    def baremetal_3(self):
        """Gets the baremetal_3 of this CapacityPerFacility.  # noqa: E501


        :return: The baremetal_3 of this CapacityPerFacility.  # noqa: E501
        :rtype: CapacityLevelPerBaremetal
        """
        return self._baremetal_3

    @baremetal_3.setter
    def baremetal_3(self, baremetal_3):
        """Sets the baremetal_3 of this CapacityPerFacility.


        :param baremetal_3: The baremetal_3 of this CapacityPerFacility.  # noqa: E501
        :type baremetal_3: CapacityLevelPerBaremetal
        """

        self._baremetal_3 = baremetal_3

    @property
    def c2_medium_x86(self):
        """Gets the c2_medium_x86 of this CapacityPerFacility.  # noqa: E501


        :return: The c2_medium_x86 of this CapacityPerFacility.  # noqa: E501
        :rtype: CapacityLevelPerBaremetal
        """
        return self._c2_medium_x86

    @c2_medium_x86.setter
    def c2_medium_x86(self, c2_medium_x86):
        """Sets the c2_medium_x86 of this CapacityPerFacility.


        :param c2_medium_x86: The c2_medium_x86 of this CapacityPerFacility.  # noqa: E501
        :type c2_medium_x86: CapacityLevelPerBaremetal
        """

        self._c2_medium_x86 = c2_medium_x86

    @property
    def baremetal_2(self):
        """Gets the baremetal_2 of this CapacityPerFacility.  # noqa: E501


        :return: The baremetal_2 of this CapacityPerFacility.  # noqa: E501
        :rtype: CapacityLevelPerBaremetal
        """
        return self._baremetal_2

    @baremetal_2.setter
    def baremetal_2(self, baremetal_2):
        """Sets the baremetal_2 of this CapacityPerFacility.


        :param baremetal_2: The baremetal_2 of this CapacityPerFacility.  # noqa: E501
        :type baremetal_2: CapacityLevelPerBaremetal
        """

        self._baremetal_2 = baremetal_2

    @property
    def m2_xlarge_x86(self):
        """Gets the m2_xlarge_x86 of this CapacityPerFacility.  # noqa: E501


        :return: The m2_xlarge_x86 of this CapacityPerFacility.  # noqa: E501
        :rtype: CapacityLevelPerBaremetal
        """
        return self._m2_xlarge_x86

    @m2_xlarge_x86.setter
    def m2_xlarge_x86(self, m2_xlarge_x86):
        """Sets the m2_xlarge_x86 of this CapacityPerFacility.


        :param m2_xlarge_x86: The m2_xlarge_x86 of this CapacityPerFacility.  # noqa: E501
        :type m2_xlarge_x86: CapacityLevelPerBaremetal
        """

        self._m2_xlarge_x86 = m2_xlarge_x86

    @property
    def baremetal_s(self):
        """Gets the baremetal_s of this CapacityPerFacility.  # noqa: E501


        :return: The baremetal_s of this CapacityPerFacility.  # noqa: E501
        :rtype: CapacityLevelPerBaremetal
        """
        return self._baremetal_s

    @baremetal_s.setter
    def baremetal_s(self, baremetal_s):
        """Sets the baremetal_s of this CapacityPerFacility.


        :param baremetal_s: The baremetal_s of this CapacityPerFacility.  # noqa: E501
        :type baremetal_s: CapacityLevelPerBaremetal
        """

        self._baremetal_s = baremetal_s

    @property
    def baremetal_0(self):
        """Gets the baremetal_0 of this CapacityPerFacility.  # noqa: E501


        :return: The baremetal_0 of this CapacityPerFacility.  # noqa: E501
        :rtype: CapacityLevelPerBaremetal
        """
        return self._baremetal_0

    @baremetal_0.setter
    def baremetal_0(self, baremetal_0):
        """Sets the baremetal_0 of this CapacityPerFacility.


        :param baremetal_0: The baremetal_0 of this CapacityPerFacility.  # noqa: E501
        :type baremetal_0: CapacityLevelPerBaremetal
        """

        self._baremetal_0 = baremetal_0

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CapacityPerFacility):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CapacityPerFacility):
            return True

        return self.to_dict() != other.to_dict()
