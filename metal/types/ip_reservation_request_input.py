# coding: utf-8

"""
    Metal API

    This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>.   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@equinixmetal.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from metal.configuration import Configuration


class IPReservationRequestInput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'quantity': 'int',
        'comments': 'str',
        'facility': 'str',
        'metro': 'str',
        'customdata': 'object',
        'tags': 'list[str]',
        'details': 'str',
        'fail_on_approval_required': 'bool'
    }

    attribute_map = {
        'type': 'type',
        'quantity': 'quantity',
        'comments': 'comments',
        'facility': 'facility',
        'metro': 'metro',
        'customdata': 'customdata',
        'tags': 'tags',
        'details': 'details',
        'fail_on_approval_required': 'fail_on_approval_required'
    }

    def __init__(self, type=None, quantity=None, comments=None, facility=None, metro=None, customdata=None, tags=None, details=None, fail_on_approval_required=None, local_vars_configuration=None):  # noqa: E501
        """IPReservationRequestInput - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._quantity = None
        self._comments = None
        self._facility = None
        self._metro = None
        self._customdata = None
        self._tags = None
        self._details = None
        self._fail_on_approval_required = None
        self.discriminator = None

        self.type = type
        self.quantity = quantity
        if comments is not None:
            self.comments = comments
        if facility is not None:
            self.facility = facility
        if metro is not None:
            self.metro = metro
        if customdata is not None:
            self.customdata = customdata
        if tags is not None:
            self.tags = tags
        if details is not None:
            self.details = details
        if fail_on_approval_required is not None:
            self.fail_on_approval_required = fail_on_approval_required

    @property
    def type(self):
        """Gets the type of this IPReservationRequestInput.  # noqa: E501


        :return: The type of this IPReservationRequestInput.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this IPReservationRequestInput.


        :param type: The type of this IPReservationRequestInput.  # noqa: E501
        :type type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def quantity(self):
        """Gets the quantity of this IPReservationRequestInput.  # noqa: E501


        :return: The quantity of this IPReservationRequestInput.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this IPReservationRequestInput.


        :param quantity: The quantity of this IPReservationRequestInput.  # noqa: E501
        :type quantity: int
        """
        if self.local_vars_configuration.client_side_validation and quantity is None:  # noqa: E501
            raise ValueError("Invalid value for `quantity`, must not be `None`")  # noqa: E501

        self._quantity = quantity

    @property
    def comments(self):
        """Gets the comments of this IPReservationRequestInput.  # noqa: E501


        :return: The comments of this IPReservationRequestInput.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this IPReservationRequestInput.


        :param comments: The comments of this IPReservationRequestInput.  # noqa: E501
        :type comments: str
        """

        self._comments = comments

    @property
    def facility(self):
        """Gets the facility of this IPReservationRequestInput.  # noqa: E501


        :return: The facility of this IPReservationRequestInput.  # noqa: E501
        :rtype: str
        """
        return self._facility

    @facility.setter
    def facility(self, facility):
        """Sets the facility of this IPReservationRequestInput.


        :param facility: The facility of this IPReservationRequestInput.  # noqa: E501
        :type facility: str
        """

        self._facility = facility

    @property
    def metro(self):
        """Gets the metro of this IPReservationRequestInput.  # noqa: E501

        The code of the metro you are requesting the IP reservation in.  # noqa: E501

        :return: The metro of this IPReservationRequestInput.  # noqa: E501
        :rtype: str
        """
        return self._metro

    @metro.setter
    def metro(self, metro):
        """Sets the metro of this IPReservationRequestInput.

        The code of the metro you are requesting the IP reservation in.  # noqa: E501

        :param metro: The metro of this IPReservationRequestInput.  # noqa: E501
        :type metro: str
        """

        self._metro = metro

    @property
    def customdata(self):
        """Gets the customdata of this IPReservationRequestInput.  # noqa: E501


        :return: The customdata of this IPReservationRequestInput.  # noqa: E501
        :rtype: object
        """
        return self._customdata

    @customdata.setter
    def customdata(self, customdata):
        """Sets the customdata of this IPReservationRequestInput.


        :param customdata: The customdata of this IPReservationRequestInput.  # noqa: E501
        :type customdata: object
        """

        self._customdata = customdata

    @property
    def tags(self):
        """Gets the tags of this IPReservationRequestInput.  # noqa: E501


        :return: The tags of this IPReservationRequestInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this IPReservationRequestInput.


        :param tags: The tags of this IPReservationRequestInput.  # noqa: E501
        :type tags: list[str]
        """

        self._tags = tags

    @property
    def details(self):
        """Gets the details of this IPReservationRequestInput.  # noqa: E501


        :return: The details of this IPReservationRequestInput.  # noqa: E501
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this IPReservationRequestInput.


        :param details: The details of this IPReservationRequestInput.  # noqa: E501
        :type details: str
        """

        self._details = details

    @property
    def fail_on_approval_required(self):
        """Gets the fail_on_approval_required of this IPReservationRequestInput.  # noqa: E501


        :return: The fail_on_approval_required of this IPReservationRequestInput.  # noqa: E501
        :rtype: bool
        """
        return self._fail_on_approval_required

    @fail_on_approval_required.setter
    def fail_on_approval_required(self, fail_on_approval_required):
        """Sets the fail_on_approval_required of this IPReservationRequestInput.


        :param fail_on_approval_required: The fail_on_approval_required of this IPReservationRequestInput.  # noqa: E501
        :type fail_on_approval_required: bool
        """

        self._fail_on_approval_required = fail_on_approval_required

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IPReservationRequestInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IPReservationRequestInput):
            return True

        return self.to_dict() != other.to_dict()
