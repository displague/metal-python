# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from metal.types.base_model_ import Model
from metal import util


class IPReservationRequestInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, comments: str=None, customdata: object=None, details: str=None, facility: str=None, fail_on_approval_required: bool=None, metro: str=None, quantity: int=None, tags: List[str]=None, type: str=None):
        """IPReservationRequestInput - a model defined in OpenAPI

        :param comments: The comments of this IPReservationRequestInput.
        :param customdata: The customdata of this IPReservationRequestInput.
        :param details: The details of this IPReservationRequestInput.
        :param facility: The facility of this IPReservationRequestInput.
        :param fail_on_approval_required: The fail_on_approval_required of this IPReservationRequestInput.
        :param metro: The metro of this IPReservationRequestInput.
        :param quantity: The quantity of this IPReservationRequestInput.
        :param tags: The tags of this IPReservationRequestInput.
        :param type: The type of this IPReservationRequestInput.
        """
        self.openapi_types = {
            'comments': str,
            'customdata': object,
            'details': str,
            'facility': str,
            'fail_on_approval_required': bool,
            'metro': str,
            'quantity': int,
            'tags': List[str],
            'type': str
        }

        self.attribute_map = {
            'comments': 'comments',
            'customdata': 'customdata',
            'details': 'details',
            'facility': 'facility',
            'fail_on_approval_required': 'fail_on_approval_required',
            'metro': 'metro',
            'quantity': 'quantity',
            'tags': 'tags',
            'type': 'type'
        }

        self._comments = comments
        self._customdata = customdata
        self._details = details
        self._facility = facility
        self._fail_on_approval_required = fail_on_approval_required
        self._metro = metro
        self._quantity = quantity
        self._tags = tags
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IPReservationRequestInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IPReservationRequestInput of this IPReservationRequestInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def comments(self):
        """Gets the comments of this IPReservationRequestInput.


        :return: The comments of this IPReservationRequestInput.
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this IPReservationRequestInput.


        :param comments: The comments of this IPReservationRequestInput.
        :type comments: str
        """

        self._comments = comments

    @property
    def customdata(self):
        """Gets the customdata of this IPReservationRequestInput.


        :return: The customdata of this IPReservationRequestInput.
        :rtype: object
        """
        return self._customdata

    @customdata.setter
    def customdata(self, customdata):
        """Sets the customdata of this IPReservationRequestInput.


        :param customdata: The customdata of this IPReservationRequestInput.
        :type customdata: object
        """

        self._customdata = customdata

    @property
    def details(self):
        """Gets the details of this IPReservationRequestInput.


        :return: The details of this IPReservationRequestInput.
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this IPReservationRequestInput.


        :param details: The details of this IPReservationRequestInput.
        :type details: str
        """

        self._details = details

    @property
    def facility(self):
        """Gets the facility of this IPReservationRequestInput.


        :return: The facility of this IPReservationRequestInput.
        :rtype: str
        """
        return self._facility

    @facility.setter
    def facility(self, facility):
        """Sets the facility of this IPReservationRequestInput.


        :param facility: The facility of this IPReservationRequestInput.
        :type facility: str
        """

        self._facility = facility

    @property
    def fail_on_approval_required(self):
        """Gets the fail_on_approval_required of this IPReservationRequestInput.


        :return: The fail_on_approval_required of this IPReservationRequestInput.
        :rtype: bool
        """
        return self._fail_on_approval_required

    @fail_on_approval_required.setter
    def fail_on_approval_required(self, fail_on_approval_required):
        """Sets the fail_on_approval_required of this IPReservationRequestInput.


        :param fail_on_approval_required: The fail_on_approval_required of this IPReservationRequestInput.
        :type fail_on_approval_required: bool
        """

        self._fail_on_approval_required = fail_on_approval_required

    @property
    def metro(self):
        """Gets the metro of this IPReservationRequestInput.

        The code of the metro you are requesting the IP reservation in.

        :return: The metro of this IPReservationRequestInput.
        :rtype: str
        """
        return self._metro

    @metro.setter
    def metro(self, metro):
        """Sets the metro of this IPReservationRequestInput.

        The code of the metro you are requesting the IP reservation in.

        :param metro: The metro of this IPReservationRequestInput.
        :type metro: str
        """

        self._metro = metro

    @property
    def quantity(self):
        """Gets the quantity of this IPReservationRequestInput.


        :return: The quantity of this IPReservationRequestInput.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this IPReservationRequestInput.


        :param quantity: The quantity of this IPReservationRequestInput.
        :type quantity: int
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")

        self._quantity = quantity

    @property
    def tags(self):
        """Gets the tags of this IPReservationRequestInput.


        :return: The tags of this IPReservationRequestInput.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this IPReservationRequestInput.


        :param tags: The tags of this IPReservationRequestInput.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def type(self):
        """Gets the type of this IPReservationRequestInput.


        :return: The type of this IPReservationRequestInput.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this IPReservationRequestInput.


        :param type: The type of this IPReservationRequestInput.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
