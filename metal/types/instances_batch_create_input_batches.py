# coding: utf-8

"""
    Metal API

    This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>.   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@equinixmetal.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from metal.configuration import Configuration


class InstancesBatchCreateInputBatches(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'plan': 'str',
        'hostname': 'str',
        'hostnames': 'list[str]',
        'facility': 'list[str]',
        'metro': 'str',
        'description': 'str',
        'billing_cycle': 'str',
        'operating_system': 'str',
        'always_pxe': 'bool',
        'userdata': 'str',
        'locked': 'bool',
        'termination_time': 'datetime',
        'tags': 'list[str]',
        'project_ssh_keys': 'list[str]',
        'user_ssh_keys': 'list[str]',
        'no_ssh_keys': 'bool',
        'features': 'list[str]',
        'customdata': 'object',
        'ip_addresses': 'list[InstancesBatchCreateInputIpAddresses]'
    }

    attribute_map = {
        'plan': 'plan',
        'hostname': 'hostname',
        'hostnames': 'hostnames',
        'facility': 'facility',
        'metro': 'metro',
        'description': 'description',
        'billing_cycle': 'billing_cycle',
        'operating_system': 'operating_system',
        'always_pxe': 'always_pxe',
        'userdata': 'userdata',
        'locked': 'locked',
        'termination_time': 'termination_time',
        'tags': 'tags',
        'project_ssh_keys': 'project_ssh_keys',
        'user_ssh_keys': 'user_ssh_keys',
        'no_ssh_keys': 'no_ssh_keys',
        'features': 'features',
        'customdata': 'customdata',
        'ip_addresses': 'ip_addresses'
    }

    def __init__(self, plan=None, hostname=None, hostnames=None, facility=None, metro=None, description=None, billing_cycle=None, operating_system=None, always_pxe=None, userdata=None, locked=None, termination_time=None, tags=None, project_ssh_keys=None, user_ssh_keys=None, no_ssh_keys=None, features=None, customdata=None, ip_addresses=None, local_vars_configuration=None):  # noqa: E501
        """InstancesBatchCreateInputBatches - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._plan = None
        self._hostname = None
        self._hostnames = None
        self._facility = None
        self._metro = None
        self._description = None
        self._billing_cycle = None
        self._operating_system = None
        self._always_pxe = None
        self._userdata = None
        self._locked = None
        self._termination_time = None
        self._tags = None
        self._project_ssh_keys = None
        self._user_ssh_keys = None
        self._no_ssh_keys = None
        self._features = None
        self._customdata = None
        self._ip_addresses = None
        self.discriminator = None

        if plan is not None:
            self.plan = plan
        if hostname is not None:
            self.hostname = hostname
        if hostnames is not None:
            self.hostnames = hostnames
        if facility is not None:
            self.facility = facility
        if metro is not None:
            self.metro = metro
        if description is not None:
            self.description = description
        if billing_cycle is not None:
            self.billing_cycle = billing_cycle
        if operating_system is not None:
            self.operating_system = operating_system
        if always_pxe is not None:
            self.always_pxe = always_pxe
        if userdata is not None:
            self.userdata = userdata
        if locked is not None:
            self.locked = locked
        if termination_time is not None:
            self.termination_time = termination_time
        if tags is not None:
            self.tags = tags
        if project_ssh_keys is not None:
            self.project_ssh_keys = project_ssh_keys
        if user_ssh_keys is not None:
            self.user_ssh_keys = user_ssh_keys
        if no_ssh_keys is not None:
            self.no_ssh_keys = no_ssh_keys
        if features is not None:
            self.features = features
        if customdata is not None:
            self.customdata = customdata
        if ip_addresses is not None:
            self.ip_addresses = ip_addresses

    @property
    def plan(self):
        """Gets the plan of this InstancesBatchCreateInputBatches.  # noqa: E501


        :return: The plan of this InstancesBatchCreateInputBatches.  # noqa: E501
        :rtype: str
        """
        return self._plan

    @plan.setter
    def plan(self, plan):
        """Sets the plan of this InstancesBatchCreateInputBatches.


        :param plan: The plan of this InstancesBatchCreateInputBatches.  # noqa: E501
        :type plan: str
        """

        self._plan = plan

    @property
    def hostname(self):
        """Gets the hostname of this InstancesBatchCreateInputBatches.  # noqa: E501


        :return: The hostname of this InstancesBatchCreateInputBatches.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this InstancesBatchCreateInputBatches.


        :param hostname: The hostname of this InstancesBatchCreateInputBatches.  # noqa: E501
        :type hostname: str
        """

        self._hostname = hostname

    @property
    def hostnames(self):
        """Gets the hostnames of this InstancesBatchCreateInputBatches.  # noqa: E501


        :return: The hostnames of this InstancesBatchCreateInputBatches.  # noqa: E501
        :rtype: list[str]
        """
        return self._hostnames

    @hostnames.setter
    def hostnames(self, hostnames):
        """Sets the hostnames of this InstancesBatchCreateInputBatches.


        :param hostnames: The hostnames of this InstancesBatchCreateInputBatches.  # noqa: E501
        :type hostnames: list[str]
        """

        self._hostnames = hostnames

    @property
    def facility(self):
        """Gets the facility of this InstancesBatchCreateInputBatches.  # noqa: E501

        Array of facility codes the batch can use for provisioning. This param also takes a string if you want the batch to be fulfilled in only one facility. Cannot be set if the metro is already set.  # noqa: E501

        :return: The facility of this InstancesBatchCreateInputBatches.  # noqa: E501
        :rtype: list[str]
        """
        return self._facility

    @facility.setter
    def facility(self, facility):
        """Sets the facility of this InstancesBatchCreateInputBatches.

        Array of facility codes the batch can use for provisioning. This param also takes a string if you want the batch to be fulfilled in only one facility. Cannot be set if the metro is already set.  # noqa: E501

        :param facility: The facility of this InstancesBatchCreateInputBatches.  # noqa: E501
        :type facility: list[str]
        """

        self._facility = facility

    @property
    def metro(self):
        """Gets the metro of this InstancesBatchCreateInputBatches.  # noqa: E501

        The metro ID or code the batch can use for provisioning. Cannot be set if the facility is already set.  # noqa: E501

        :return: The metro of this InstancesBatchCreateInputBatches.  # noqa: E501
        :rtype: str
        """
        return self._metro

    @metro.setter
    def metro(self, metro):
        """Sets the metro of this InstancesBatchCreateInputBatches.

        The metro ID or code the batch can use for provisioning. Cannot be set if the facility is already set.  # noqa: E501

        :param metro: The metro of this InstancesBatchCreateInputBatches.  # noqa: E501
        :type metro: str
        """

        self._metro = metro

    @property
    def description(self):
        """Gets the description of this InstancesBatchCreateInputBatches.  # noqa: E501


        :return: The description of this InstancesBatchCreateInputBatches.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this InstancesBatchCreateInputBatches.


        :param description: The description of this InstancesBatchCreateInputBatches.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def billing_cycle(self):
        """Gets the billing_cycle of this InstancesBatchCreateInputBatches.  # noqa: E501


        :return: The billing_cycle of this InstancesBatchCreateInputBatches.  # noqa: E501
        :rtype: str
        """
        return self._billing_cycle

    @billing_cycle.setter
    def billing_cycle(self, billing_cycle):
        """Sets the billing_cycle of this InstancesBatchCreateInputBatches.


        :param billing_cycle: The billing_cycle of this InstancesBatchCreateInputBatches.  # noqa: E501
        :type billing_cycle: str
        """

        self._billing_cycle = billing_cycle

    @property
    def operating_system(self):
        """Gets the operating_system of this InstancesBatchCreateInputBatches.  # noqa: E501


        :return: The operating_system of this InstancesBatchCreateInputBatches.  # noqa: E501
        :rtype: str
        """
        return self._operating_system

    @operating_system.setter
    def operating_system(self, operating_system):
        """Sets the operating_system of this InstancesBatchCreateInputBatches.


        :param operating_system: The operating_system of this InstancesBatchCreateInputBatches.  # noqa: E501
        :type operating_system: str
        """

        self._operating_system = operating_system

    @property
    def always_pxe(self):
        """Gets the always_pxe of this InstancesBatchCreateInputBatches.  # noqa: E501


        :return: The always_pxe of this InstancesBatchCreateInputBatches.  # noqa: E501
        :rtype: bool
        """
        return self._always_pxe

    @always_pxe.setter
    def always_pxe(self, always_pxe):
        """Sets the always_pxe of this InstancesBatchCreateInputBatches.


        :param always_pxe: The always_pxe of this InstancesBatchCreateInputBatches.  # noqa: E501
        :type always_pxe: bool
        """

        self._always_pxe = always_pxe

    @property
    def userdata(self):
        """Gets the userdata of this InstancesBatchCreateInputBatches.  # noqa: E501


        :return: The userdata of this InstancesBatchCreateInputBatches.  # noqa: E501
        :rtype: str
        """
        return self._userdata

    @userdata.setter
    def userdata(self, userdata):
        """Sets the userdata of this InstancesBatchCreateInputBatches.


        :param userdata: The userdata of this InstancesBatchCreateInputBatches.  # noqa: E501
        :type userdata: str
        """

        self._userdata = userdata

    @property
    def locked(self):
        """Gets the locked of this InstancesBatchCreateInputBatches.  # noqa: E501


        :return: The locked of this InstancesBatchCreateInputBatches.  # noqa: E501
        :rtype: bool
        """
        return self._locked

    @locked.setter
    def locked(self, locked):
        """Sets the locked of this InstancesBatchCreateInputBatches.


        :param locked: The locked of this InstancesBatchCreateInputBatches.  # noqa: E501
        :type locked: bool
        """

        self._locked = locked

    @property
    def termination_time(self):
        """Gets the termination_time of this InstancesBatchCreateInputBatches.  # noqa: E501


        :return: The termination_time of this InstancesBatchCreateInputBatches.  # noqa: E501
        :rtype: datetime
        """
        return self._termination_time

    @termination_time.setter
    def termination_time(self, termination_time):
        """Sets the termination_time of this InstancesBatchCreateInputBatches.


        :param termination_time: The termination_time of this InstancesBatchCreateInputBatches.  # noqa: E501
        :type termination_time: datetime
        """

        self._termination_time = termination_time

    @property
    def tags(self):
        """Gets the tags of this InstancesBatchCreateInputBatches.  # noqa: E501


        :return: The tags of this InstancesBatchCreateInputBatches.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this InstancesBatchCreateInputBatches.


        :param tags: The tags of this InstancesBatchCreateInputBatches.  # noqa: E501
        :type tags: list[str]
        """

        self._tags = tags

    @property
    def project_ssh_keys(self):
        """Gets the project_ssh_keys of this InstancesBatchCreateInputBatches.  # noqa: E501


        :return: The project_ssh_keys of this InstancesBatchCreateInputBatches.  # noqa: E501
        :rtype: list[str]
        """
        return self._project_ssh_keys

    @project_ssh_keys.setter
    def project_ssh_keys(self, project_ssh_keys):
        """Sets the project_ssh_keys of this InstancesBatchCreateInputBatches.


        :param project_ssh_keys: The project_ssh_keys of this InstancesBatchCreateInputBatches.  # noqa: E501
        :type project_ssh_keys: list[str]
        """

        self._project_ssh_keys = project_ssh_keys

    @property
    def user_ssh_keys(self):
        """Gets the user_ssh_keys of this InstancesBatchCreateInputBatches.  # noqa: E501

        The UUIDs of users whose SSH keys should be included on the provisioned device.  # noqa: E501

        :return: The user_ssh_keys of this InstancesBatchCreateInputBatches.  # noqa: E501
        :rtype: list[str]
        """
        return self._user_ssh_keys

    @user_ssh_keys.setter
    def user_ssh_keys(self, user_ssh_keys):
        """Sets the user_ssh_keys of this InstancesBatchCreateInputBatches.

        The UUIDs of users whose SSH keys should be included on the provisioned device.  # noqa: E501

        :param user_ssh_keys: The user_ssh_keys of this InstancesBatchCreateInputBatches.  # noqa: E501
        :type user_ssh_keys: list[str]
        """

        self._user_ssh_keys = user_ssh_keys

    @property
    def no_ssh_keys(self):
        """Gets the no_ssh_keys of this InstancesBatchCreateInputBatches.  # noqa: E501


        :return: The no_ssh_keys of this InstancesBatchCreateInputBatches.  # noqa: E501
        :rtype: bool
        """
        return self._no_ssh_keys

    @no_ssh_keys.setter
    def no_ssh_keys(self, no_ssh_keys):
        """Sets the no_ssh_keys of this InstancesBatchCreateInputBatches.


        :param no_ssh_keys: The no_ssh_keys of this InstancesBatchCreateInputBatches.  # noqa: E501
        :type no_ssh_keys: bool
        """

        self._no_ssh_keys = no_ssh_keys

    @property
    def features(self):
        """Gets the features of this InstancesBatchCreateInputBatches.  # noqa: E501


        :return: The features of this InstancesBatchCreateInputBatches.  # noqa: E501
        :rtype: list[str]
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this InstancesBatchCreateInputBatches.


        :param features: The features of this InstancesBatchCreateInputBatches.  # noqa: E501
        :type features: list[str]
        """

        self._features = features

    @property
    def customdata(self):
        """Gets the customdata of this InstancesBatchCreateInputBatches.  # noqa: E501


        :return: The customdata of this InstancesBatchCreateInputBatches.  # noqa: E501
        :rtype: object
        """
        return self._customdata

    @customdata.setter
    def customdata(self, customdata):
        """Sets the customdata of this InstancesBatchCreateInputBatches.


        :param customdata: The customdata of this InstancesBatchCreateInputBatches.  # noqa: E501
        :type customdata: object
        """

        self._customdata = customdata

    @property
    def ip_addresses(self):
        """Gets the ip_addresses of this InstancesBatchCreateInputBatches.  # noqa: E501


        :return: The ip_addresses of this InstancesBatchCreateInputBatches.  # noqa: E501
        :rtype: list[InstancesBatchCreateInputIpAddresses]
        """
        return self._ip_addresses

    @ip_addresses.setter
    def ip_addresses(self, ip_addresses):
        """Sets the ip_addresses of this InstancesBatchCreateInputBatches.


        :param ip_addresses: The ip_addresses of this InstancesBatchCreateInputBatches.  # noqa: E501
        :type ip_addresses: list[InstancesBatchCreateInputIpAddresses]
        """

        self._ip_addresses = ip_addresses

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InstancesBatchCreateInputBatches):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InstancesBatchCreateInputBatches):
            return True

        return self.to_dict() != other.to_dict()
