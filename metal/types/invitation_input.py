# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from metal.types.base_model_ import Model
from metal import util


class InvitationInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, invitee: str=None, message: str=None, organization_id: str=None, projects_ids: List[str]=None, roles: List[str]=None):
        """InvitationInput - a model defined in OpenAPI

        :param invitee: The invitee of this InvitationInput.
        :param message: The message of this InvitationInput.
        :param organization_id: The organization_id of this InvitationInput.
        :param projects_ids: The projects_ids of this InvitationInput.
        :param roles: The roles of this InvitationInput.
        """
        self.openapi_types = {
            'invitee': str,
            'message': str,
            'organization_id': str,
            'projects_ids': List[str],
            'roles': List[str]
        }

        self.attribute_map = {
            'invitee': 'invitee',
            'message': 'message',
            'organization_id': 'organization_id',
            'projects_ids': 'projects_ids',
            'roles': 'roles'
        }

        self._invitee = invitee
        self._message = message
        self._organization_id = organization_id
        self._projects_ids = projects_ids
        self._roles = roles

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InvitationInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InvitationInput of this InvitationInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def invitee(self):
        """Gets the invitee of this InvitationInput.


        :return: The invitee of this InvitationInput.
        :rtype: str
        """
        return self._invitee

    @invitee.setter
    def invitee(self, invitee):
        """Sets the invitee of this InvitationInput.


        :param invitee: The invitee of this InvitationInput.
        :type invitee: str
        """
        if invitee is None:
            raise ValueError("Invalid value for `invitee`, must not be `None`")

        self._invitee = invitee

    @property
    def message(self):
        """Gets the message of this InvitationInput.


        :return: The message of this InvitationInput.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this InvitationInput.


        :param message: The message of this InvitationInput.
        :type message: str
        """

        self._message = message

    @property
    def organization_id(self):
        """Gets the organization_id of this InvitationInput.


        :return: The organization_id of this InvitationInput.
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this InvitationInput.


        :param organization_id: The organization_id of this InvitationInput.
        :type organization_id: str
        """

        self._organization_id = organization_id

    @property
    def projects_ids(self):
        """Gets the projects_ids of this InvitationInput.


        :return: The projects_ids of this InvitationInput.
        :rtype: List[str]
        """
        return self._projects_ids

    @projects_ids.setter
    def projects_ids(self, projects_ids):
        """Sets the projects_ids of this InvitationInput.


        :param projects_ids: The projects_ids of this InvitationInput.
        :type projects_ids: List[str]
        """

        self._projects_ids = projects_ids

    @property
    def roles(self):
        """Gets the roles of this InvitationInput.


        :return: The roles of this InvitationInput.
        :rtype: List[str]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this InvitationInput.


        :param roles: The roles of this InvitationInput.
        :type roles: List[str]
        """
        allowed_values = ["admin", "billing", "collaborator", "limited_collaborator"]  # noqa: E501
        if not set(roles).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `roles` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(roles) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._roles = roles
