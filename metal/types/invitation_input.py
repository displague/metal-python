# coding: utf-8

"""
    Metal API

    This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>.   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@equinixmetal.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from metal.configuration import Configuration


class InvitationInput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'invitee': 'str',
        'message': 'str',
        'roles': 'list[str]',
        'projects_ids': 'list[str]'
    }

    attribute_map = {
        'invitee': 'invitee',
        'message': 'message',
        'roles': 'roles',
        'projects_ids': 'projects_ids'
    }

    def __init__(self, invitee=None, message=None, roles=None, projects_ids=None, local_vars_configuration=None):  # noqa: E501
        """InvitationInput - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._invitee = None
        self._message = None
        self._roles = None
        self._projects_ids = None
        self.discriminator = None

        self.invitee = invitee
        if message is not None:
            self.message = message
        if roles is not None:
            self.roles = roles
        if projects_ids is not None:
            self.projects_ids = projects_ids

    @property
    def invitee(self):
        """Gets the invitee of this InvitationInput.  # noqa: E501


        :return: The invitee of this InvitationInput.  # noqa: E501
        :rtype: str
        """
        return self._invitee

    @invitee.setter
    def invitee(self, invitee):
        """Sets the invitee of this InvitationInput.


        :param invitee: The invitee of this InvitationInput.  # noqa: E501
        :type invitee: str
        """
        if self.local_vars_configuration.client_side_validation and invitee is None:  # noqa: E501
            raise ValueError("Invalid value for `invitee`, must not be `None`")  # noqa: E501

        self._invitee = invitee

    @property
    def message(self):
        """Gets the message of this InvitationInput.  # noqa: E501


        :return: The message of this InvitationInput.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this InvitationInput.


        :param message: The message of this InvitationInput.  # noqa: E501
        :type message: str
        """

        self._message = message

    @property
    def roles(self):
        """Gets the roles of this InvitationInput.  # noqa: E501


        :return: The roles of this InvitationInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this InvitationInput.


        :param roles: The roles of this InvitationInput.  # noqa: E501
        :type roles: list[str]
        """

        self._roles = roles

    @property
    def projects_ids(self):
        """Gets the projects_ids of this InvitationInput.  # noqa: E501


        :return: The projects_ids of this InvitationInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._projects_ids

    @projects_ids.setter
    def projects_ids(self, projects_ids):
        """Sets the projects_ids of this InvitationInput.


        :param projects_ids: The projects_ids of this InvitationInput.  # noqa: E501
        :type projects_ids: list[str]
        """

        self._projects_ids = projects_ids

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InvitationInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InvitationInput):
            return True

        return self.to_dict() != other.to_dict()
