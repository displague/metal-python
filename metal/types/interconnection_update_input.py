# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from metal.types.base_model_ import Model
from metal import util


class InterconnectionUpdateInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contact_email: str=None, description: str=None, mode: str=None, name: str=None, redundancy: str=None, tags: List[str]=None):
        """InterconnectionUpdateInput - a model defined in OpenAPI

        :param contact_email: The contact_email of this InterconnectionUpdateInput.
        :param description: The description of this InterconnectionUpdateInput.
        :param mode: The mode of this InterconnectionUpdateInput.
        :param name: The name of this InterconnectionUpdateInput.
        :param redundancy: The redundancy of this InterconnectionUpdateInput.
        :param tags: The tags of this InterconnectionUpdateInput.
        """
        self.openapi_types = {
            'contact_email': str,
            'description': str,
            'mode': str,
            'name': str,
            'redundancy': str,
            'tags': List[str]
        }

        self.attribute_map = {
            'contact_email': 'contact_email',
            'description': 'description',
            'mode': 'mode',
            'name': 'name',
            'redundancy': 'redundancy',
            'tags': 'tags'
        }

        self._contact_email = contact_email
        self._description = description
        self._mode = mode
        self._name = name
        self._redundancy = redundancy
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InterconnectionUpdateInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InterconnectionUpdateInput of this InterconnectionUpdateInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contact_email(self):
        """Gets the contact_email of this InterconnectionUpdateInput.


        :return: The contact_email of this InterconnectionUpdateInput.
        :rtype: str
        """
        return self._contact_email

    @contact_email.setter
    def contact_email(self, contact_email):
        """Sets the contact_email of this InterconnectionUpdateInput.


        :param contact_email: The contact_email of this InterconnectionUpdateInput.
        :type contact_email: str
        """

        self._contact_email = contact_email

    @property
    def description(self):
        """Gets the description of this InterconnectionUpdateInput.


        :return: The description of this InterconnectionUpdateInput.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this InterconnectionUpdateInput.


        :param description: The description of this InterconnectionUpdateInput.
        :type description: str
        """

        self._description = description

    @property
    def mode(self):
        """Gets the mode of this InterconnectionUpdateInput.

        The mode of the interconnection (only relevant to Dedicated Ports). Shared connections won't have this field. Can be either 'standard' or 'tunnel'.   The default mode of an interconnection on a Dedicated Port is 'standard'. The mode can only be changed when there are no associated virtual circuits on the interconnection.   In tunnel mode, an 802.1q tunnel is added to a port to send/receive double tagged packets from server instances.

        :return: The mode of this InterconnectionUpdateInput.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this InterconnectionUpdateInput.

        The mode of the interconnection (only relevant to Dedicated Ports). Shared connections won't have this field. Can be either 'standard' or 'tunnel'.   The default mode of an interconnection on a Dedicated Port is 'standard'. The mode can only be changed when there are no associated virtual circuits on the interconnection.   In tunnel mode, an 802.1q tunnel is added to a port to send/receive double tagged packets from server instances.

        :param mode: The mode of this InterconnectionUpdateInput.
        :type mode: str
        """
        allowed_values = ["standard", "tunnel"]  # noqa: E501
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"
                .format(mode, allowed_values)
            )

        self._mode = mode

    @property
    def name(self):
        """Gets the name of this InterconnectionUpdateInput.


        :return: The name of this InterconnectionUpdateInput.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InterconnectionUpdateInput.


        :param name: The name of this InterconnectionUpdateInput.
        :type name: str
        """

        self._name = name

    @property
    def redundancy(self):
        """Gets the redundancy of this InterconnectionUpdateInput.

        Updating from 'redundant' to 'primary' will remove a secondary port, while updating from 'primary' to 'redundant' will add one.

        :return: The redundancy of this InterconnectionUpdateInput.
        :rtype: str
        """
        return self._redundancy

    @redundancy.setter
    def redundancy(self, redundancy):
        """Sets the redundancy of this InterconnectionUpdateInput.

        Updating from 'redundant' to 'primary' will remove a secondary port, while updating from 'primary' to 'redundant' will add one.

        :param redundancy: The redundancy of this InterconnectionUpdateInput.
        :type redundancy: str
        """

        self._redundancy = redundancy

    @property
    def tags(self):
        """Gets the tags of this InterconnectionUpdateInput.


        :return: The tags of this InterconnectionUpdateInput.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this InterconnectionUpdateInput.


        :param tags: The tags of this InterconnectionUpdateInput.
        :type tags: List[str]
        """

        self._tags = tags
