# coding: utf-8

"""
    Metal API

    This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>.   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@equinixmetal.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from metal.configuration import Configuration


class CapacityCheckPerMetroInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'metro': 'str',
        'plan': 'str',
        'quantity': 'str',
        'available': 'bool'
    }

    attribute_map = {
        'metro': 'metro',
        'plan': 'plan',
        'quantity': 'quantity',
        'available': 'available'
    }

    def __init__(self, metro=None, plan=None, quantity=None, available=None, local_vars_configuration=None):  # noqa: E501
        """CapacityCheckPerMetroInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._metro = None
        self._plan = None
        self._quantity = None
        self._available = None
        self.discriminator = None

        if metro is not None:
            self.metro = metro
        if plan is not None:
            self.plan = plan
        if quantity is not None:
            self.quantity = quantity
        if available is not None:
            self.available = available

    @property
    def metro(self):
        """Gets the metro of this CapacityCheckPerMetroInfo.  # noqa: E501

        The metro ID or code sent to check capacity.  # noqa: E501

        :return: The metro of this CapacityCheckPerMetroInfo.  # noqa: E501
        :rtype: str
        """
        return self._metro

    @metro.setter
    def metro(self, metro):
        """Sets the metro of this CapacityCheckPerMetroInfo.

        The metro ID or code sent to check capacity.  # noqa: E501

        :param metro: The metro of this CapacityCheckPerMetroInfo.  # noqa: E501
        :type metro: str
        """

        self._metro = metro

    @property
    def plan(self):
        """Gets the plan of this CapacityCheckPerMetroInfo.  # noqa: E501

        The plan ID or slug sent to check capacity.  # noqa: E501

        :return: The plan of this CapacityCheckPerMetroInfo.  # noqa: E501
        :rtype: str
        """
        return self._plan

    @plan.setter
    def plan(self, plan):
        """Sets the plan of this CapacityCheckPerMetroInfo.

        The plan ID or slug sent to check capacity.  # noqa: E501

        :param plan: The plan of this CapacityCheckPerMetroInfo.  # noqa: E501
        :type plan: str
        """

        self._plan = plan

    @property
    def quantity(self):
        """Gets the quantity of this CapacityCheckPerMetroInfo.  # noqa: E501

        The number of servers sent to check capacity.  # noqa: E501

        :return: The quantity of this CapacityCheckPerMetroInfo.  # noqa: E501
        :rtype: str
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this CapacityCheckPerMetroInfo.

        The number of servers sent to check capacity.  # noqa: E501

        :param quantity: The quantity of this CapacityCheckPerMetroInfo.  # noqa: E501
        :type quantity: str
        """

        self._quantity = quantity

    @property
    def available(self):
        """Gets the available of this CapacityCheckPerMetroInfo.  # noqa: E501

        Returns true if there is enough capacity in the metro to fulfill the quantity set. Returns false if there is not enough.  # noqa: E501

        :return: The available of this CapacityCheckPerMetroInfo.  # noqa: E501
        :rtype: bool
        """
        return self._available

    @available.setter
    def available(self, available):
        """Sets the available of this CapacityCheckPerMetroInfo.

        Returns true if there is enough capacity in the metro to fulfill the quantity set. Returns false if there is not enough.  # noqa: E501

        :param available: The available of this CapacityCheckPerMetroInfo.  # noqa: E501
        :type available: bool
        """

        self._available = available

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CapacityCheckPerMetroInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CapacityCheckPerMetroInfo):
            return True

        return self.to_dict() != other.to_dict()
