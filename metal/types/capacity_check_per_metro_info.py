# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from metal.types.base_model_ import Model
from metal import util


class CapacityCheckPerMetroInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, available: bool=None, metro: str=None, plan: str=None, quantity: str=None):
        """CapacityCheckPerMetroInfo - a model defined in OpenAPI

        :param available: The available of this CapacityCheckPerMetroInfo.
        :param metro: The metro of this CapacityCheckPerMetroInfo.
        :param plan: The plan of this CapacityCheckPerMetroInfo.
        :param quantity: The quantity of this CapacityCheckPerMetroInfo.
        """
        self.openapi_types = {
            'available': bool,
            'metro': str,
            'plan': str,
            'quantity': str
        }

        self.attribute_map = {
            'available': 'available',
            'metro': 'metro',
            'plan': 'plan',
            'quantity': 'quantity'
        }

        self._available = available
        self._metro = metro
        self._plan = plan
        self._quantity = quantity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CapacityCheckPerMetroInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CapacityCheckPerMetroInfo of this CapacityCheckPerMetroInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def available(self):
        """Gets the available of this CapacityCheckPerMetroInfo.

        Returns true if there is enough capacity in the metro to fulfill the quantity set. Returns false if there is not enough.

        :return: The available of this CapacityCheckPerMetroInfo.
        :rtype: bool
        """
        return self._available

    @available.setter
    def available(self, available):
        """Sets the available of this CapacityCheckPerMetroInfo.

        Returns true if there is enough capacity in the metro to fulfill the quantity set. Returns false if there is not enough.

        :param available: The available of this CapacityCheckPerMetroInfo.
        :type available: bool
        """

        self._available = available

    @property
    def metro(self):
        """Gets the metro of this CapacityCheckPerMetroInfo.

        The metro ID or code sent to check capacity.

        :return: The metro of this CapacityCheckPerMetroInfo.
        :rtype: str
        """
        return self._metro

    @metro.setter
    def metro(self, metro):
        """Sets the metro of this CapacityCheckPerMetroInfo.

        The metro ID or code sent to check capacity.

        :param metro: The metro of this CapacityCheckPerMetroInfo.
        :type metro: str
        """

        self._metro = metro

    @property
    def plan(self):
        """Gets the plan of this CapacityCheckPerMetroInfo.

        The plan ID or slug sent to check capacity.

        :return: The plan of this CapacityCheckPerMetroInfo.
        :rtype: str
        """
        return self._plan

    @plan.setter
    def plan(self, plan):
        """Sets the plan of this CapacityCheckPerMetroInfo.

        The plan ID or slug sent to check capacity.

        :param plan: The plan of this CapacityCheckPerMetroInfo.
        :type plan: str
        """

        self._plan = plan

    @property
    def quantity(self):
        """Gets the quantity of this CapacityCheckPerMetroInfo.

        The number of servers sent to check capacity.

        :return: The quantity of this CapacityCheckPerMetroInfo.
        :rtype: str
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this CapacityCheckPerMetroInfo.

        The number of servers sent to check capacity.

        :param quantity: The quantity of this CapacityCheckPerMetroInfo.
        :type quantity: str
        """

        self._quantity = quantity
