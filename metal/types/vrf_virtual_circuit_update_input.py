# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from metal.types.base_model_ import Model
from metal import util


class VrfVirtualCircuitUpdateInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, customer_ip: str=None, description: str=None, md5: str=None, metal_ip: str=None, name: str=None, peer_asn: int=None, speed: str=None, subnet: str=None, tags: List[str]=None):
        """VrfVirtualCircuitUpdateInput - a model defined in OpenAPI

        :param customer_ip: The customer_ip of this VrfVirtualCircuitUpdateInput.
        :param description: The description of this VrfVirtualCircuitUpdateInput.
        :param md5: The md5 of this VrfVirtualCircuitUpdateInput.
        :param metal_ip: The metal_ip of this VrfVirtualCircuitUpdateInput.
        :param name: The name of this VrfVirtualCircuitUpdateInput.
        :param peer_asn: The peer_asn of this VrfVirtualCircuitUpdateInput.
        :param speed: The speed of this VrfVirtualCircuitUpdateInput.
        :param subnet: The subnet of this VrfVirtualCircuitUpdateInput.
        :param tags: The tags of this VrfVirtualCircuitUpdateInput.
        """
        self.openapi_types = {
            'customer_ip': str,
            'description': str,
            'md5': str,
            'metal_ip': str,
            'name': str,
            'peer_asn': int,
            'speed': str,
            'subnet': str,
            'tags': List[str]
        }

        self.attribute_map = {
            'customer_ip': 'customer_ip',
            'description': 'description',
            'md5': 'md5',
            'metal_ip': 'metal_ip',
            'name': 'name',
            'peer_asn': 'peer_asn',
            'speed': 'speed',
            'subnet': 'subnet',
            'tags': 'tags'
        }

        self._customer_ip = customer_ip
        self._description = description
        self._md5 = md5
        self._metal_ip = metal_ip
        self._name = name
        self._peer_asn = peer_asn
        self._speed = speed
        self._subnet = subnet
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VrfVirtualCircuitUpdateInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VrfVirtualCircuitUpdateInput of this VrfVirtualCircuitUpdateInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def customer_ip(self):
        """Gets the customer_ip of this VrfVirtualCircuitUpdateInput.

        An IP address from the subnet that will be used on the Customer side. This parameter is optional, but if supplied, we will use the other usable IP address in the subnet as the Metal IP. By default, the last usable IP address in the subnet will be used.

        :return: The customer_ip of this VrfVirtualCircuitUpdateInput.
        :rtype: str
        """
        return self._customer_ip

    @customer_ip.setter
    def customer_ip(self, customer_ip):
        """Sets the customer_ip of this VrfVirtualCircuitUpdateInput.

        An IP address from the subnet that will be used on the Customer side. This parameter is optional, but if supplied, we will use the other usable IP address in the subnet as the Metal IP. By default, the last usable IP address in the subnet will be used.

        :param customer_ip: The customer_ip of this VrfVirtualCircuitUpdateInput.
        :type customer_ip: str
        """

        self._customer_ip = customer_ip

    @property
    def description(self):
        """Gets the description of this VrfVirtualCircuitUpdateInput.


        :return: The description of this VrfVirtualCircuitUpdateInput.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this VrfVirtualCircuitUpdateInput.


        :param description: The description of this VrfVirtualCircuitUpdateInput.
        :type description: str
        """

        self._description = description

    @property
    def md5(self):
        """Gets the md5 of this VrfVirtualCircuitUpdateInput.

        The MD5 password for the BGP peering in plaintext (not a checksum).

        :return: The md5 of this VrfVirtualCircuitUpdateInput.
        :rtype: str
        """
        return self._md5

    @md5.setter
    def md5(self, md5):
        """Sets the md5 of this VrfVirtualCircuitUpdateInput.

        The MD5 password for the BGP peering in plaintext (not a checksum).

        :param md5: The md5 of this VrfVirtualCircuitUpdateInput.
        :type md5: str
        """

        self._md5 = md5

    @property
    def metal_ip(self):
        """Gets the metal_ip of this VrfVirtualCircuitUpdateInput.

        An IP address from the subnet that will be used on the Metal side. This parameter is optional, but if supplied, we will use the other usable IP address in the subnet as the Customer IP. By default, the first usable IP address in the subnet will be used.

        :return: The metal_ip of this VrfVirtualCircuitUpdateInput.
        :rtype: str
        """
        return self._metal_ip

    @metal_ip.setter
    def metal_ip(self, metal_ip):
        """Sets the metal_ip of this VrfVirtualCircuitUpdateInput.

        An IP address from the subnet that will be used on the Metal side. This parameter is optional, but if supplied, we will use the other usable IP address in the subnet as the Customer IP. By default, the first usable IP address in the subnet will be used.

        :param metal_ip: The metal_ip of this VrfVirtualCircuitUpdateInput.
        :type metal_ip: str
        """

        self._metal_ip = metal_ip

    @property
    def name(self):
        """Gets the name of this VrfVirtualCircuitUpdateInput.


        :return: The name of this VrfVirtualCircuitUpdateInput.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VrfVirtualCircuitUpdateInput.


        :param name: The name of this VrfVirtualCircuitUpdateInput.
        :type name: str
        """

        self._name = name

    @property
    def peer_asn(self):
        """Gets the peer_asn of this VrfVirtualCircuitUpdateInput.

        The peer ASN that will be used with the VRF on the Virtual Circuit.

        :return: The peer_asn of this VrfVirtualCircuitUpdateInput.
        :rtype: int
        """
        return self._peer_asn

    @peer_asn.setter
    def peer_asn(self, peer_asn):
        """Sets the peer_asn of this VrfVirtualCircuitUpdateInput.

        The peer ASN that will be used with the VRF on the Virtual Circuit.

        :param peer_asn: The peer_asn of this VrfVirtualCircuitUpdateInput.
        :type peer_asn: int
        """

        self._peer_asn = peer_asn

    @property
    def speed(self):
        """Gets the speed of this VrfVirtualCircuitUpdateInput.

        Speed can be changed only if it is an interconnection on a Dedicated Port

        :return: The speed of this VrfVirtualCircuitUpdateInput.
        :rtype: str
        """
        return self._speed

    @speed.setter
    def speed(self, speed):
        """Sets the speed of this VrfVirtualCircuitUpdateInput.

        Speed can be changed only if it is an interconnection on a Dedicated Port

        :param speed: The speed of this VrfVirtualCircuitUpdateInput.
        :type speed: str
        """

        self._speed = speed

    @property
    def subnet(self):
        """Gets the subnet of this VrfVirtualCircuitUpdateInput.

        The /30 or /31 subnet of one of the VRF IP Blocks that will be used with the VRF for the Virtual Circuit. This subnet does not have to be an existing VRF IP reservation, as we will create the VRF IP reservation on creation if it does not exist. The Metal IP and Customer IP must be IPs from this subnet. For /30 subnets, the network and broadcast IPs cannot be used as the Metal or Customer IP.

        :return: The subnet of this VrfVirtualCircuitUpdateInput.
        :rtype: str
        """
        return self._subnet

    @subnet.setter
    def subnet(self, subnet):
        """Sets the subnet of this VrfVirtualCircuitUpdateInput.

        The /30 or /31 subnet of one of the VRF IP Blocks that will be used with the VRF for the Virtual Circuit. This subnet does not have to be an existing VRF IP reservation, as we will create the VRF IP reservation on creation if it does not exist. The Metal IP and Customer IP must be IPs from this subnet. For /30 subnets, the network and broadcast IPs cannot be used as the Metal or Customer IP.

        :param subnet: The subnet of this VrfVirtualCircuitUpdateInput.
        :type subnet: str
        """

        self._subnet = subnet

    @property
    def tags(self):
        """Gets the tags of this VrfVirtualCircuitUpdateInput.


        :return: The tags of this VrfVirtualCircuitUpdateInput.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this VrfVirtualCircuitUpdateInput.


        :param tags: The tags of this VrfVirtualCircuitUpdateInput.
        :type tags: List[str]
        """

        self._tags = tags
