# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from metal.types.base_model_ import Model
from metal import util


class DeviceUpdateInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, always_pxe: bool=None, billing_cycle: str=None, customdata: Dict[str, object]=None, description: str=None, hostname: str=None, ipxe_script_url: str=None, locked: bool=None, network_frozen: bool=None, spot_instance: bool=None, tags: List[str]=None, userdata: str=None):
        """DeviceUpdateInput - a model defined in OpenAPI

        :param always_pxe: The always_pxe of this DeviceUpdateInput.
        :param billing_cycle: The billing_cycle of this DeviceUpdateInput.
        :param customdata: The customdata of this DeviceUpdateInput.
        :param description: The description of this DeviceUpdateInput.
        :param hostname: The hostname of this DeviceUpdateInput.
        :param ipxe_script_url: The ipxe_script_url of this DeviceUpdateInput.
        :param locked: The locked of this DeviceUpdateInput.
        :param network_frozen: The network_frozen of this DeviceUpdateInput.
        :param spot_instance: The spot_instance of this DeviceUpdateInput.
        :param tags: The tags of this DeviceUpdateInput.
        :param userdata: The userdata of this DeviceUpdateInput.
        """
        self.openapi_types = {
            'always_pxe': bool,
            'billing_cycle': str,
            'customdata': Dict[str, object],
            'description': str,
            'hostname': str,
            'ipxe_script_url': str,
            'locked': bool,
            'network_frozen': bool,
            'spot_instance': bool,
            'tags': List[str],
            'userdata': str
        }

        self.attribute_map = {
            'always_pxe': 'always_pxe',
            'billing_cycle': 'billing_cycle',
            'customdata': 'customdata',
            'description': 'description',
            'hostname': 'hostname',
            'ipxe_script_url': 'ipxe_script_url',
            'locked': 'locked',
            'network_frozen': 'network_frozen',
            'spot_instance': 'spot_instance',
            'tags': 'tags',
            'userdata': 'userdata'
        }

        self._always_pxe = always_pxe
        self._billing_cycle = billing_cycle
        self._customdata = customdata
        self._description = description
        self._hostname = hostname
        self._ipxe_script_url = ipxe_script_url
        self._locked = locked
        self._network_frozen = network_frozen
        self._spot_instance = spot_instance
        self._tags = tags
        self._userdata = userdata

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeviceUpdateInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeviceUpdateInput of this DeviceUpdateInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def always_pxe(self):
        """Gets the always_pxe of this DeviceUpdateInput.


        :return: The always_pxe of this DeviceUpdateInput.
        :rtype: bool
        """
        return self._always_pxe

    @always_pxe.setter
    def always_pxe(self, always_pxe):
        """Sets the always_pxe of this DeviceUpdateInput.


        :param always_pxe: The always_pxe of this DeviceUpdateInput.
        :type always_pxe: bool
        """

        self._always_pxe = always_pxe

    @property
    def billing_cycle(self):
        """Gets the billing_cycle of this DeviceUpdateInput.


        :return: The billing_cycle of this DeviceUpdateInput.
        :rtype: str
        """
        return self._billing_cycle

    @billing_cycle.setter
    def billing_cycle(self, billing_cycle):
        """Sets the billing_cycle of this DeviceUpdateInput.


        :param billing_cycle: The billing_cycle of this DeviceUpdateInput.
        :type billing_cycle: str
        """

        self._billing_cycle = billing_cycle

    @property
    def customdata(self):
        """Gets the customdata of this DeviceUpdateInput.


        :return: The customdata of this DeviceUpdateInput.
        :rtype: Dict[str, object]
        """
        return self._customdata

    @customdata.setter
    def customdata(self, customdata):
        """Sets the customdata of this DeviceUpdateInput.


        :param customdata: The customdata of this DeviceUpdateInput.
        :type customdata: Dict[str, object]
        """

        self._customdata = customdata

    @property
    def description(self):
        """Gets the description of this DeviceUpdateInput.


        :return: The description of this DeviceUpdateInput.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DeviceUpdateInput.


        :param description: The description of this DeviceUpdateInput.
        :type description: str
        """

        self._description = description

    @property
    def hostname(self):
        """Gets the hostname of this DeviceUpdateInput.


        :return: The hostname of this DeviceUpdateInput.
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this DeviceUpdateInput.


        :param hostname: The hostname of this DeviceUpdateInput.
        :type hostname: str
        """

        self._hostname = hostname

    @property
    def ipxe_script_url(self):
        """Gets the ipxe_script_url of this DeviceUpdateInput.


        :return: The ipxe_script_url of this DeviceUpdateInput.
        :rtype: str
        """
        return self._ipxe_script_url

    @ipxe_script_url.setter
    def ipxe_script_url(self, ipxe_script_url):
        """Sets the ipxe_script_url of this DeviceUpdateInput.


        :param ipxe_script_url: The ipxe_script_url of this DeviceUpdateInput.
        :type ipxe_script_url: str
        """

        self._ipxe_script_url = ipxe_script_url

    @property
    def locked(self):
        """Gets the locked of this DeviceUpdateInput.


        :return: The locked of this DeviceUpdateInput.
        :rtype: bool
        """
        return self._locked

    @locked.setter
    def locked(self, locked):
        """Sets the locked of this DeviceUpdateInput.


        :param locked: The locked of this DeviceUpdateInput.
        :type locked: bool
        """

        self._locked = locked

    @property
    def network_frozen(self):
        """Gets the network_frozen of this DeviceUpdateInput.

        If true, this instance can not be converted to a different network type.

        :return: The network_frozen of this DeviceUpdateInput.
        :rtype: bool
        """
        return self._network_frozen

    @network_frozen.setter
    def network_frozen(self, network_frozen):
        """Sets the network_frozen of this DeviceUpdateInput.

        If true, this instance can not be converted to a different network type.

        :param network_frozen: The network_frozen of this DeviceUpdateInput.
        :type network_frozen: bool
        """

        self._network_frozen = network_frozen

    @property
    def spot_instance(self):
        """Gets the spot_instance of this DeviceUpdateInput.

        Can be set to false to convert a spot-market instance to on-demand.

        :return: The spot_instance of this DeviceUpdateInput.
        :rtype: bool
        """
        return self._spot_instance

    @spot_instance.setter
    def spot_instance(self, spot_instance):
        """Sets the spot_instance of this DeviceUpdateInput.

        Can be set to false to convert a spot-market instance to on-demand.

        :param spot_instance: The spot_instance of this DeviceUpdateInput.
        :type spot_instance: bool
        """

        self._spot_instance = spot_instance

    @property
    def tags(self):
        """Gets the tags of this DeviceUpdateInput.


        :return: The tags of this DeviceUpdateInput.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this DeviceUpdateInput.


        :param tags: The tags of this DeviceUpdateInput.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def userdata(self):
        """Gets the userdata of this DeviceUpdateInput.


        :return: The userdata of this DeviceUpdateInput.
        :rtype: str
        """
        return self._userdata

    @userdata.setter
    def userdata(self, userdata):
        """Sets the userdata of this DeviceUpdateInput.


        :param userdata: The userdata of this DeviceUpdateInput.
        :type userdata: str
        """

        self._userdata = userdata
