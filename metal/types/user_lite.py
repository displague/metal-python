# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from metal.types.base_model_ import Model
from metal import util


class UserLite(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, avatar_thumb_url: str=None, created_at: datetime=None, email: str=None, first_name: str=None, full_name: str=None, href: str=None, id: str=None, last_name: str=None, short_id: str=None, updated_at: datetime=None):
        """UserLite - a model defined in OpenAPI

        :param avatar_thumb_url: The avatar_thumb_url of this UserLite.
        :param created_at: The created_at of this UserLite.
        :param email: The email of this UserLite.
        :param first_name: The first_name of this UserLite.
        :param full_name: The full_name of this UserLite.
        :param href: The href of this UserLite.
        :param id: The id of this UserLite.
        :param last_name: The last_name of this UserLite.
        :param short_id: The short_id of this UserLite.
        :param updated_at: The updated_at of this UserLite.
        """
        self.openapi_types = {
            'avatar_thumb_url': str,
            'created_at': datetime,
            'email': str,
            'first_name': str,
            'full_name': str,
            'href': str,
            'id': str,
            'last_name': str,
            'short_id': str,
            'updated_at': datetime
        }

        self.attribute_map = {
            'avatar_thumb_url': 'avatar_thumb_url',
            'created_at': 'created_at',
            'email': 'email',
            'first_name': 'first_name',
            'full_name': 'full_name',
            'href': 'href',
            'id': 'id',
            'last_name': 'last_name',
            'short_id': 'short_id',
            'updated_at': 'updated_at'
        }

        self._avatar_thumb_url = avatar_thumb_url
        self._created_at = created_at
        self._email = email
        self._first_name = first_name
        self._full_name = full_name
        self._href = href
        self._id = id
        self._last_name = last_name
        self._short_id = short_id
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserLite':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserLite of this UserLite.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def avatar_thumb_url(self):
        """Gets the avatar_thumb_url of this UserLite.

        Avatar thumbnail URL of the User

        :return: The avatar_thumb_url of this UserLite.
        :rtype: str
        """
        return self._avatar_thumb_url

    @avatar_thumb_url.setter
    def avatar_thumb_url(self, avatar_thumb_url):
        """Sets the avatar_thumb_url of this UserLite.

        Avatar thumbnail URL of the User

        :param avatar_thumb_url: The avatar_thumb_url of this UserLite.
        :type avatar_thumb_url: str
        """

        self._avatar_thumb_url = avatar_thumb_url

    @property
    def created_at(self):
        """Gets the created_at of this UserLite.

        When the user was created

        :return: The created_at of this UserLite.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this UserLite.

        When the user was created

        :param created_at: The created_at of this UserLite.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def email(self):
        """Gets the email of this UserLite.

        Primary email address of the User

        :return: The email of this UserLite.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserLite.

        Primary email address of the User

        :param email: The email of this UserLite.
        :type email: str
        """

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this UserLite.

        First name of the User

        :return: The first_name of this UserLite.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this UserLite.

        First name of the User

        :param first_name: The first_name of this UserLite.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def full_name(self):
        """Gets the full_name of this UserLite.

        Full name of the User

        :return: The full_name of this UserLite.
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this UserLite.

        Full name of the User

        :param full_name: The full_name of this UserLite.
        :type full_name: str
        """

        self._full_name = full_name

    @property
    def href(self):
        """Gets the href of this UserLite.

        API URL uniquely representing the User

        :return: The href of this UserLite.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this UserLite.

        API URL uniquely representing the User

        :param href: The href of this UserLite.
        :type href: str
        """

        self._href = href

    @property
    def id(self):
        """Gets the id of this UserLite.

        ID of the User

        :return: The id of this UserLite.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserLite.

        ID of the User

        :param id: The id of this UserLite.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def last_name(self):
        """Gets the last_name of this UserLite.

        Last name of the User

        :return: The last_name of this UserLite.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this UserLite.

        Last name of the User

        :param last_name: The last_name of this UserLite.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def short_id(self):
        """Gets the short_id of this UserLite.

        Short ID of the User

        :return: The short_id of this UserLite.
        :rtype: str
        """
        return self._short_id

    @short_id.setter
    def short_id(self, short_id):
        """Sets the short_id of this UserLite.

        Short ID of the User

        :param short_id: The short_id of this UserLite.
        :type short_id: str
        """
        if short_id is None:
            raise ValueError("Invalid value for `short_id`, must not be `None`")

        self._short_id = short_id

    @property
    def updated_at(self):
        """Gets the updated_at of this UserLite.

        When the user details were last updated

        :return: The updated_at of this UserLite.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this UserLite.

        When the user details were last updated

        :param updated_at: The updated_at of this UserLite.
        :type updated_at: datetime
        """

        self._updated_at = updated_at
