# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from metal.types.base_model_ import Model
from metal.types.virtual_circuit_update_input import VirtualCircuitUpdateInput
from metal.types.vrf_virtual_circuit_update_input import VrfVirtualCircuitUpdateInput
from metal import util


class UpdateVirtualCircuitRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, name: str=None, speed: str=None, tags: List[str]=None, vnid: str=None, customer_ip: str=None, md5: str=None, metal_ip: str=None, peer_asn: int=None, subnet: str=None):
        """UpdateVirtualCircuitRequest - a model defined in OpenAPI

        :param description: The description of this UpdateVirtualCircuitRequest.
        :param name: The name of this UpdateVirtualCircuitRequest.
        :param speed: The speed of this UpdateVirtualCircuitRequest.
        :param tags: The tags of this UpdateVirtualCircuitRequest.
        :param vnid: The vnid of this UpdateVirtualCircuitRequest.
        :param customer_ip: The customer_ip of this UpdateVirtualCircuitRequest.
        :param md5: The md5 of this UpdateVirtualCircuitRequest.
        :param metal_ip: The metal_ip of this UpdateVirtualCircuitRequest.
        :param peer_asn: The peer_asn of this UpdateVirtualCircuitRequest.
        :param subnet: The subnet of this UpdateVirtualCircuitRequest.
        """
        self.openapi_types = {
            'description': str,
            'name': str,
            'speed': str,
            'tags': List[str],
            'vnid': str,
            'customer_ip': str,
            'md5': str,
            'metal_ip': str,
            'peer_asn': int,
            'subnet': str
        }

        self.attribute_map = {
            'description': 'description',
            'name': 'name',
            'speed': 'speed',
            'tags': 'tags',
            'vnid': 'vnid',
            'customer_ip': 'customer_ip',
            'md5': 'md5',
            'metal_ip': 'metal_ip',
            'peer_asn': 'peer_asn',
            'subnet': 'subnet'
        }

        self._description = description
        self._name = name
        self._speed = speed
        self._tags = tags
        self._vnid = vnid
        self._customer_ip = customer_ip
        self._md5 = md5
        self._metal_ip = metal_ip
        self._peer_asn = peer_asn
        self._subnet = subnet

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateVirtualCircuitRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The updateVirtualCircuit_request of this UpdateVirtualCircuitRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this UpdateVirtualCircuitRequest.


        :return: The description of this UpdateVirtualCircuitRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateVirtualCircuitRequest.


        :param description: The description of this UpdateVirtualCircuitRequest.
        :type description: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this UpdateVirtualCircuitRequest.


        :return: The name of this UpdateVirtualCircuitRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateVirtualCircuitRequest.


        :param name: The name of this UpdateVirtualCircuitRequest.
        :type name: str
        """

        self._name = name

    @property
    def speed(self):
        """Gets the speed of this UpdateVirtualCircuitRequest.

        Speed can be changed only if it is an interconnection on a Dedicated Port

        :return: The speed of this UpdateVirtualCircuitRequest.
        :rtype: str
        """
        return self._speed

    @speed.setter
    def speed(self, speed):
        """Sets the speed of this UpdateVirtualCircuitRequest.

        Speed can be changed only if it is an interconnection on a Dedicated Port

        :param speed: The speed of this UpdateVirtualCircuitRequest.
        :type speed: str
        """

        self._speed = speed

    @property
    def tags(self):
        """Gets the tags of this UpdateVirtualCircuitRequest.


        :return: The tags of this UpdateVirtualCircuitRequest.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this UpdateVirtualCircuitRequest.


        :param tags: The tags of this UpdateVirtualCircuitRequest.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def vnid(self):
        """Gets the vnid of this UpdateVirtualCircuitRequest.

        A Virtual Network record UUID or the VNID of a Metro Virtual Network in your project.

        :return: The vnid of this UpdateVirtualCircuitRequest.
        :rtype: str
        """
        return self._vnid

    @vnid.setter
    def vnid(self, vnid):
        """Sets the vnid of this UpdateVirtualCircuitRequest.

        A Virtual Network record UUID or the VNID of a Metro Virtual Network in your project.

        :param vnid: The vnid of this UpdateVirtualCircuitRequest.
        :type vnid: str
        """

        self._vnid = vnid

    @property
    def customer_ip(self):
        """Gets the customer_ip of this UpdateVirtualCircuitRequest.

        An IP address from the subnet that will be used on the Customer side. This parameter is optional, but if supplied, we will use the other usable IP address in the subnet as the Metal IP. By default, the last usable IP address in the subnet will be used.

        :return: The customer_ip of this UpdateVirtualCircuitRequest.
        :rtype: str
        """
        return self._customer_ip

    @customer_ip.setter
    def customer_ip(self, customer_ip):
        """Sets the customer_ip of this UpdateVirtualCircuitRequest.

        An IP address from the subnet that will be used on the Customer side. This parameter is optional, but if supplied, we will use the other usable IP address in the subnet as the Metal IP. By default, the last usable IP address in the subnet will be used.

        :param customer_ip: The customer_ip of this UpdateVirtualCircuitRequest.
        :type customer_ip: str
        """

        self._customer_ip = customer_ip

    @property
    def md5(self):
        """Gets the md5 of this UpdateVirtualCircuitRequest.

        The MD5 password for the BGP peering in plaintext (not a checksum).

        :return: The md5 of this UpdateVirtualCircuitRequest.
        :rtype: str
        """
        return self._md5

    @md5.setter
    def md5(self, md5):
        """Sets the md5 of this UpdateVirtualCircuitRequest.

        The MD5 password for the BGP peering in plaintext (not a checksum).

        :param md5: The md5 of this UpdateVirtualCircuitRequest.
        :type md5: str
        """

        self._md5 = md5

    @property
    def metal_ip(self):
        """Gets the metal_ip of this UpdateVirtualCircuitRequest.

        An IP address from the subnet that will be used on the Metal side. This parameter is optional, but if supplied, we will use the other usable IP address in the subnet as the Customer IP. By default, the first usable IP address in the subnet will be used.

        :return: The metal_ip of this UpdateVirtualCircuitRequest.
        :rtype: str
        """
        return self._metal_ip

    @metal_ip.setter
    def metal_ip(self, metal_ip):
        """Sets the metal_ip of this UpdateVirtualCircuitRequest.

        An IP address from the subnet that will be used on the Metal side. This parameter is optional, but if supplied, we will use the other usable IP address in the subnet as the Customer IP. By default, the first usable IP address in the subnet will be used.

        :param metal_ip: The metal_ip of this UpdateVirtualCircuitRequest.
        :type metal_ip: str
        """

        self._metal_ip = metal_ip

    @property
    def peer_asn(self):
        """Gets the peer_asn of this UpdateVirtualCircuitRequest.

        The peer ASN that will be used with the VRF on the Virtual Circuit.

        :return: The peer_asn of this UpdateVirtualCircuitRequest.
        :rtype: int
        """
        return self._peer_asn

    @peer_asn.setter
    def peer_asn(self, peer_asn):
        """Sets the peer_asn of this UpdateVirtualCircuitRequest.

        The peer ASN that will be used with the VRF on the Virtual Circuit.

        :param peer_asn: The peer_asn of this UpdateVirtualCircuitRequest.
        :type peer_asn: int
        """

        self._peer_asn = peer_asn

    @property
    def subnet(self):
        """Gets the subnet of this UpdateVirtualCircuitRequest.

        The /30 or /31 subnet of one of the VRF IP Blocks that will be used with the VRF for the Virtual Circuit. This subnet does not have to be an existing VRF IP reservation, as we will create the VRF IP reservation on creation if it does not exist. The Metal IP and Customer IP must be IPs from this subnet. For /30 subnets, the network and broadcast IPs cannot be used as the Metal or Customer IP.

        :return: The subnet of this UpdateVirtualCircuitRequest.
        :rtype: str
        """
        return self._subnet

    @subnet.setter
    def subnet(self, subnet):
        """Sets the subnet of this UpdateVirtualCircuitRequest.

        The /30 or /31 subnet of one of the VRF IP Blocks that will be used with the VRF for the Virtual Circuit. This subnet does not have to be an existing VRF IP reservation, as we will create the VRF IP reservation on creation if it does not exist. The Metal IP and Customer IP must be IPs from this subnet. For /30 subnets, the network and broadcast IPs cannot be used as the Metal or Customer IP.

        :param subnet: The subnet of this UpdateVirtualCircuitRequest.
        :type subnet: str
        """

        self._subnet = subnet
