# coding: utf-8

"""
    Metal API

    This is the API for Equinix Metal Product. Interact with your devices, user account, and projects.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@equinixmetal.com
    Generated by: https://openapi-generator.tech
"""


import inspect
import pprint
import re  # noqa: F401
import six

from metal.configuration import Configuration


class CapacityPerBaremetal(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'level': 'str',
        'available_servers': 'int',
        'total_servers': 'int',
        'market_buffer_percentage': 'int',
        'market_floor_price': 'float'
    }

    attribute_map = {
        'level': 'level',
        'available_servers': 'available_servers',
        'total_servers': 'total_servers',
        'market_buffer_percentage': 'market_buffer_percentage',
        'market_floor_price': 'market_floor_price'
    }

    def __init__(self, level=None, available_servers=None, total_servers=None, market_buffer_percentage=None, market_floor_price=None, local_vars_configuration=None):  # noqa: E501
        """CapacityPerBaremetal - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._level = None
        self._available_servers = None
        self._total_servers = None
        self._market_buffer_percentage = None
        self._market_floor_price = None
        self.discriminator = None

        if level is not None:
            self.level = level
        if available_servers is not None:
            self.available_servers = available_servers
        if total_servers is not None:
            self.total_servers = total_servers
        if market_buffer_percentage is not None:
            self.market_buffer_percentage = market_buffer_percentage
        if market_floor_price is not None:
            self.market_floor_price = market_floor_price

    @property
    def level(self):
        """Gets the level of this CapacityPerBaremetal.  # noqa: E501


        :return: The level of this CapacityPerBaremetal.  # noqa: E501
        :rtype: str
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this CapacityPerBaremetal.


        :param level: The level of this CapacityPerBaremetal.  # noqa: E501
        :type level: str
        """

        self._level = level

    @property
    def available_servers(self):
        """Gets the available_servers of this CapacityPerBaremetal.  # noqa: E501


        :return: The available_servers of this CapacityPerBaremetal.  # noqa: E501
        :rtype: int
        """
        return self._available_servers

    @available_servers.setter
    def available_servers(self, available_servers):
        """Sets the available_servers of this CapacityPerBaremetal.


        :param available_servers: The available_servers of this CapacityPerBaremetal.  # noqa: E501
        :type available_servers: int
        """

        self._available_servers = available_servers

    @property
    def total_servers(self):
        """Gets the total_servers of this CapacityPerBaremetal.  # noqa: E501


        :return: The total_servers of this CapacityPerBaremetal.  # noqa: E501
        :rtype: int
        """
        return self._total_servers

    @total_servers.setter
    def total_servers(self, total_servers):
        """Sets the total_servers of this CapacityPerBaremetal.


        :param total_servers: The total_servers of this CapacityPerBaremetal.  # noqa: E501
        :type total_servers: int
        """

        self._total_servers = total_servers

    @property
    def market_buffer_percentage(self):
        """Gets the market_buffer_percentage of this CapacityPerBaremetal.  # noqa: E501


        :return: The market_buffer_percentage of this CapacityPerBaremetal.  # noqa: E501
        :rtype: int
        """
        return self._market_buffer_percentage

    @market_buffer_percentage.setter
    def market_buffer_percentage(self, market_buffer_percentage):
        """Sets the market_buffer_percentage of this CapacityPerBaremetal.


        :param market_buffer_percentage: The market_buffer_percentage of this CapacityPerBaremetal.  # noqa: E501
        :type market_buffer_percentage: int
        """

        self._market_buffer_percentage = market_buffer_percentage

    @property
    def market_floor_price(self):
        """Gets the market_floor_price of this CapacityPerBaremetal.  # noqa: E501


        :return: The market_floor_price of this CapacityPerBaremetal.  # noqa: E501
        :rtype: float
        """
        return self._market_floor_price

    @market_floor_price.setter
    def market_floor_price(self, market_floor_price):
        """Sets the market_floor_price of this CapacityPerBaremetal.


        :param market_floor_price: The market_floor_price of this CapacityPerBaremetal.  # noqa: E501
        :type market_floor_price: float
        """

        self._market_floor_price = market_floor_price

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = inspect.getargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CapacityPerBaremetal):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CapacityPerBaremetal):
            return True

        return self.to_dict() != other.to_dict()
