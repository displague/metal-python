# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from metal.types.base_model_ import Model
from metal.types.href import Href
from metal import util


class Invitation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: datetime=None, href: str=None, id: str=None, invitation: Href=None, invited_by: Href=None, invitee: str=None, nonce: str=None, organization: Href=None, projects: List[Href]=None, roles: List[str]=None, updated_at: datetime=None):
        """Invitation - a model defined in OpenAPI

        :param created_at: The created_at of this Invitation.
        :param href: The href of this Invitation.
        :param id: The id of this Invitation.
        :param invitation: The invitation of this Invitation.
        :param invited_by: The invited_by of this Invitation.
        :param invitee: The invitee of this Invitation.
        :param nonce: The nonce of this Invitation.
        :param organization: The organization of this Invitation.
        :param projects: The projects of this Invitation.
        :param roles: The roles of this Invitation.
        :param updated_at: The updated_at of this Invitation.
        """
        self.openapi_types = {
            'created_at': datetime,
            'href': str,
            'id': str,
            'invitation': Href,
            'invited_by': Href,
            'invitee': str,
            'nonce': str,
            'organization': Href,
            'projects': List[Href],
            'roles': List[str],
            'updated_at': datetime
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'href': 'href',
            'id': 'id',
            'invitation': 'invitation',
            'invited_by': 'invited_by',
            'invitee': 'invitee',
            'nonce': 'nonce',
            'organization': 'organization',
            'projects': 'projects',
            'roles': 'roles',
            'updated_at': 'updated_at'
        }

        self._created_at = created_at
        self._href = href
        self._id = id
        self._invitation = invitation
        self._invited_by = invited_by
        self._invitee = invitee
        self._nonce = nonce
        self._organization = organization
        self._projects = projects
        self._roles = roles
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Invitation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Invitation of this Invitation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this Invitation.


        :return: The created_at of this Invitation.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Invitation.


        :param created_at: The created_at of this Invitation.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def href(self):
        """Gets the href of this Invitation.


        :return: The href of this Invitation.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this Invitation.


        :param href: The href of this Invitation.
        :type href: str
        """

        self._href = href

    @property
    def id(self):
        """Gets the id of this Invitation.


        :return: The id of this Invitation.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Invitation.


        :param id: The id of this Invitation.
        :type id: str
        """

        self._id = id

    @property
    def invitation(self):
        """Gets the invitation of this Invitation.


        :return: The invitation of this Invitation.
        :rtype: Href
        """
        return self._invitation

    @invitation.setter
    def invitation(self, invitation):
        """Sets the invitation of this Invitation.


        :param invitation: The invitation of this Invitation.
        :type invitation: Href
        """

        self._invitation = invitation

    @property
    def invited_by(self):
        """Gets the invited_by of this Invitation.


        :return: The invited_by of this Invitation.
        :rtype: Href
        """
        return self._invited_by

    @invited_by.setter
    def invited_by(self, invited_by):
        """Sets the invited_by of this Invitation.


        :param invited_by: The invited_by of this Invitation.
        :type invited_by: Href
        """

        self._invited_by = invited_by

    @property
    def invitee(self):
        """Gets the invitee of this Invitation.


        :return: The invitee of this Invitation.
        :rtype: str
        """
        return self._invitee

    @invitee.setter
    def invitee(self, invitee):
        """Sets the invitee of this Invitation.


        :param invitee: The invitee of this Invitation.
        :type invitee: str
        """

        self._invitee = invitee

    @property
    def nonce(self):
        """Gets the nonce of this Invitation.


        :return: The nonce of this Invitation.
        :rtype: str
        """
        return self._nonce

    @nonce.setter
    def nonce(self, nonce):
        """Sets the nonce of this Invitation.


        :param nonce: The nonce of this Invitation.
        :type nonce: str
        """

        self._nonce = nonce

    @property
    def organization(self):
        """Gets the organization of this Invitation.


        :return: The organization of this Invitation.
        :rtype: Href
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this Invitation.


        :param organization: The organization of this Invitation.
        :type organization: Href
        """

        self._organization = organization

    @property
    def projects(self):
        """Gets the projects of this Invitation.


        :return: The projects of this Invitation.
        :rtype: List[Href]
        """
        return self._projects

    @projects.setter
    def projects(self, projects):
        """Sets the projects of this Invitation.


        :param projects: The projects of this Invitation.
        :type projects: List[Href]
        """

        self._projects = projects

    @property
    def roles(self):
        """Gets the roles of this Invitation.


        :return: The roles of this Invitation.
        :rtype: List[str]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this Invitation.


        :param roles: The roles of this Invitation.
        :type roles: List[str]
        """
        allowed_values = ["admin", "billing", "collaborator", "limited_collaborator"]  # noqa: E501
        if not set(roles).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `roles` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(roles) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._roles = roles

    @property
    def updated_at(self):
        """Gets the updated_at of this Invitation.


        :return: The updated_at of this Invitation.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Invitation.


        :param updated_at: The updated_at of this Invitation.
        :type updated_at: datetime
        """

        self._updated_at = updated_at
