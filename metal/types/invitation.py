# coding: utf-8

"""
    Metal API

    This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>.   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@equinixmetal.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from metal.configuration import Configuration


class Invitation(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'roles': 'list[str]',
        'invitee': 'str',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'invited_by': 'Href',
        'organization': 'Href',
        'projects_ids': 'list[str]',
        'invitation': 'Href',
        'href': 'str'
    }

    attribute_map = {
        'id': 'id',
        'roles': 'roles',
        'invitee': 'invitee',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'invited_by': 'invited_by',
        'organization': 'organization',
        'projects_ids': 'projects_ids',
        'invitation': 'invitation',
        'href': 'href'
    }

    def __init__(self, id=None, roles=None, invitee=None, created_at=None, updated_at=None, invited_by=None, organization=None, projects_ids=None, invitation=None, href=None, local_vars_configuration=None):  # noqa: E501
        """Invitation - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._roles = None
        self._invitee = None
        self._created_at = None
        self._updated_at = None
        self._invited_by = None
        self._organization = None
        self._projects_ids = None
        self._invitation = None
        self._href = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if roles is not None:
            self.roles = roles
        if invitee is not None:
            self.invitee = invitee
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if invited_by is not None:
            self.invited_by = invited_by
        if organization is not None:
            self.organization = organization
        if projects_ids is not None:
            self.projects_ids = projects_ids
        if invitation is not None:
            self.invitation = invitation
        if href is not None:
            self.href = href

    @property
    def id(self):
        """Gets the id of this Invitation.  # noqa: E501


        :return: The id of this Invitation.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Invitation.


        :param id: The id of this Invitation.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def roles(self):
        """Gets the roles of this Invitation.  # noqa: E501


        :return: The roles of this Invitation.  # noqa: E501
        :rtype: list[str]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this Invitation.


        :param roles: The roles of this Invitation.  # noqa: E501
        :type roles: list[str]
        """

        self._roles = roles

    @property
    def invitee(self):
        """Gets the invitee of this Invitation.  # noqa: E501


        :return: The invitee of this Invitation.  # noqa: E501
        :rtype: str
        """
        return self._invitee

    @invitee.setter
    def invitee(self, invitee):
        """Sets the invitee of this Invitation.


        :param invitee: The invitee of this Invitation.  # noqa: E501
        :type invitee: str
        """

        self._invitee = invitee

    @property
    def created_at(self):
        """Gets the created_at of this Invitation.  # noqa: E501


        :return: The created_at of this Invitation.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Invitation.


        :param created_at: The created_at of this Invitation.  # noqa: E501
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Invitation.  # noqa: E501


        :return: The updated_at of this Invitation.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Invitation.


        :param updated_at: The updated_at of this Invitation.  # noqa: E501
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def invited_by(self):
        """Gets the invited_by of this Invitation.  # noqa: E501


        :return: The invited_by of this Invitation.  # noqa: E501
        :rtype: Href
        """
        return self._invited_by

    @invited_by.setter
    def invited_by(self, invited_by):
        """Sets the invited_by of this Invitation.


        :param invited_by: The invited_by of this Invitation.  # noqa: E501
        :type invited_by: Href
        """

        self._invited_by = invited_by

    @property
    def organization(self):
        """Gets the organization of this Invitation.  # noqa: E501


        :return: The organization of this Invitation.  # noqa: E501
        :rtype: Href
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this Invitation.


        :param organization: The organization of this Invitation.  # noqa: E501
        :type organization: Href
        """

        self._organization = organization

    @property
    def projects_ids(self):
        """Gets the projects_ids of this Invitation.  # noqa: E501


        :return: The projects_ids of this Invitation.  # noqa: E501
        :rtype: list[str]
        """
        return self._projects_ids

    @projects_ids.setter
    def projects_ids(self, projects_ids):
        """Sets the projects_ids of this Invitation.


        :param projects_ids: The projects_ids of this Invitation.  # noqa: E501
        :type projects_ids: list[str]
        """

        self._projects_ids = projects_ids

    @property
    def invitation(self):
        """Gets the invitation of this Invitation.  # noqa: E501


        :return: The invitation of this Invitation.  # noqa: E501
        :rtype: Href
        """
        return self._invitation

    @invitation.setter
    def invitation(self, invitation):
        """Sets the invitation of this Invitation.


        :param invitation: The invitation of this Invitation.  # noqa: E501
        :type invitation: Href
        """

        self._invitation = invitation

    @property
    def href(self):
        """Gets the href of this Invitation.  # noqa: E501


        :return: The href of this Invitation.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this Invitation.


        :param href: The href of this Invitation.  # noqa: E501
        :type href: str
        """

        self._href = href

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Invitation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Invitation):
            return True

        return self.to_dict() != other.to_dict()
