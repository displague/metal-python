# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from metal.types.base_model_ import Model
from metal.types.href import Href
from metal import util


class VirtualCircuit(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bill: bool=False, description: str=None, id: str=None, name: str=None, nni_vlan: int=None, port: Href=None, project: Href=None, speed: int=None, status: str=None, tags: List[str]=None, virtual_network: Href=None, vnid: int=None, created_at: datetime=None, updated_at: datetime=None):
        """VirtualCircuit - a model defined in OpenAPI

        :param bill: The bill of this VirtualCircuit.
        :param description: The description of this VirtualCircuit.
        :param id: The id of this VirtualCircuit.
        :param name: The name of this VirtualCircuit.
        :param nni_vlan: The nni_vlan of this VirtualCircuit.
        :param port: The port of this VirtualCircuit.
        :param project: The project of this VirtualCircuit.
        :param speed: The speed of this VirtualCircuit.
        :param status: The status of this VirtualCircuit.
        :param tags: The tags of this VirtualCircuit.
        :param virtual_network: The virtual_network of this VirtualCircuit.
        :param vnid: The vnid of this VirtualCircuit.
        :param created_at: The created_at of this VirtualCircuit.
        :param updated_at: The updated_at of this VirtualCircuit.
        """
        self.openapi_types = {
            'bill': bool,
            'description': str,
            'id': str,
            'name': str,
            'nni_vlan': int,
            'port': Href,
            'project': Href,
            'speed': int,
            'status': str,
            'tags': List[str],
            'virtual_network': Href,
            'vnid': int,
            'created_at': datetime,
            'updated_at': datetime
        }

        self.attribute_map = {
            'bill': 'bill',
            'description': 'description',
            'id': 'id',
            'name': 'name',
            'nni_vlan': 'nni_vlan',
            'port': 'port',
            'project': 'project',
            'speed': 'speed',
            'status': 'status',
            'tags': 'tags',
            'virtual_network': 'virtual_network',
            'vnid': 'vnid',
            'created_at': 'created_at',
            'updated_at': 'updated_at'
        }

        self._bill = bill
        self._description = description
        self._id = id
        self._name = name
        self._nni_vlan = nni_vlan
        self._port = port
        self._project = project
        self._speed = speed
        self._status = status
        self._tags = tags
        self._virtual_network = virtual_network
        self._vnid = vnid
        self._created_at = created_at
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VirtualCircuit':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VirtualCircuit of this VirtualCircuit.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bill(self):
        """Gets the bill of this VirtualCircuit.

        True if the Virtual Circuit is being billed. Currently, only Virtual Circuits of Fabric VCs (Metal Billed) will be billed. Usage will start the first time the Virtual Circuit becomes active, and will not stop until it is deleted from Metal.

        :return: The bill of this VirtualCircuit.
        :rtype: bool
        """
        return self._bill

    @bill.setter
    def bill(self, bill):
        """Sets the bill of this VirtualCircuit.

        True if the Virtual Circuit is being billed. Currently, only Virtual Circuits of Fabric VCs (Metal Billed) will be billed. Usage will start the first time the Virtual Circuit becomes active, and will not stop until it is deleted from Metal.

        :param bill: The bill of this VirtualCircuit.
        :type bill: bool
        """
        if bill is None:
            raise ValueError("Invalid value for `bill`, must not be `None`")

        self._bill = bill

    @property
    def description(self):
        """Gets the description of this VirtualCircuit.


        :return: The description of this VirtualCircuit.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this VirtualCircuit.


        :param description: The description of this VirtualCircuit.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def id(self):
        """Gets the id of this VirtualCircuit.


        :return: The id of this VirtualCircuit.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VirtualCircuit.


        :param id: The id of this VirtualCircuit.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this VirtualCircuit.


        :return: The name of this VirtualCircuit.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VirtualCircuit.


        :param name: The name of this VirtualCircuit.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def nni_vlan(self):
        """Gets the nni_vlan of this VirtualCircuit.


        :return: The nni_vlan of this VirtualCircuit.
        :rtype: int
        """
        return self._nni_vlan

    @nni_vlan.setter
    def nni_vlan(self, nni_vlan):
        """Sets the nni_vlan of this VirtualCircuit.


        :param nni_vlan: The nni_vlan of this VirtualCircuit.
        :type nni_vlan: int
        """
        if nni_vlan is None:
            raise ValueError("Invalid value for `nni_vlan`, must not be `None`")

        self._nni_vlan = nni_vlan

    @property
    def port(self):
        """Gets the port of this VirtualCircuit.


        :return: The port of this VirtualCircuit.
        :rtype: Href
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this VirtualCircuit.


        :param port: The port of this VirtualCircuit.
        :type port: Href
        """
        if port is None:
            raise ValueError("Invalid value for `port`, must not be `None`")

        self._port = port

    @property
    def project(self):
        """Gets the project of this VirtualCircuit.


        :return: The project of this VirtualCircuit.
        :rtype: Href
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this VirtualCircuit.


        :param project: The project of this VirtualCircuit.
        :type project: Href
        """
        if project is None:
            raise ValueError("Invalid value for `project`, must not be `None`")

        self._project = project

    @property
    def speed(self):
        """Gets the speed of this VirtualCircuit.

        For Virtual Circuits on shared and dedicated connections, this speed should match the one set on their Interconnection Ports. For Virtual Circuits on Fabric VCs (both Metal and Fabric Billed) that have found their corresponding Fabric connection, this is the actual speed of the interconnection that was configured when setting up the interconnection on the Fabric Portal. Details on Fabric VCs are included in the specification as a developer preview and is generally unavailable. Please contact our Support team for more details.

        :return: The speed of this VirtualCircuit.
        :rtype: int
        """
        return self._speed

    @speed.setter
    def speed(self, speed):
        """Sets the speed of this VirtualCircuit.

        For Virtual Circuits on shared and dedicated connections, this speed should match the one set on their Interconnection Ports. For Virtual Circuits on Fabric VCs (both Metal and Fabric Billed) that have found their corresponding Fabric connection, this is the actual speed of the interconnection that was configured when setting up the interconnection on the Fabric Portal. Details on Fabric VCs are included in the specification as a developer preview and is generally unavailable. Please contact our Support team for more details.

        :param speed: The speed of this VirtualCircuit.
        :type speed: int
        """

        self._speed = speed

    @property
    def status(self):
        """Gets the status of this VirtualCircuit.

        The status of a Virtual Circuit is always 'Pending' on creation. The status can turn to 'Waiting on Customer VLAN' if a Metro VLAN was not set yet on the Virtual Circuit and is the last step needed for full activation. For Dedicated interconnections, as long as the Dedicated Port has been associated to the Virtual Circuit and a NNI VNID has been set, it will turn to 'Waiting on Customer VLAN'. For Fabric VCs, it will only change to 'Waiting on Customer VLAN' once the corresponding Fabric connection has been found on the Fabric side. Once a Metro VLAN is set on the Virtual Circuit (which for Fabric VCs, can be set on creation) and the necessary set up is done, it will turn into 'Activating' status as it tries to activate the Virtual Circuit. Once the Virtual Circuit fully activates and is configured on the switch, it will turn to staus 'Active'. For Fabric VCs (Metal Billed), we will start billing the moment the status of the Virtual Circuit turns to 'Active'. If there are any changes to the VLAN after the Virtual Circuit is in an 'Active' status, the status will show 'Changing VLAN' if a new VLAN has been provided, or 'Deactivating' if we are removing the VLAN. When a deletion request is issued for the Virtual Circuit, it will move to a 'deleting' status until it is fully deleted. If the Virtual Circuit is on a Fabric VC, it can also change into an 'Expired' status if the associated service token has expired.

        :return: The status of this VirtualCircuit.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this VirtualCircuit.

        The status of a Virtual Circuit is always 'Pending' on creation. The status can turn to 'Waiting on Customer VLAN' if a Metro VLAN was not set yet on the Virtual Circuit and is the last step needed for full activation. For Dedicated interconnections, as long as the Dedicated Port has been associated to the Virtual Circuit and a NNI VNID has been set, it will turn to 'Waiting on Customer VLAN'. For Fabric VCs, it will only change to 'Waiting on Customer VLAN' once the corresponding Fabric connection has been found on the Fabric side. Once a Metro VLAN is set on the Virtual Circuit (which for Fabric VCs, can be set on creation) and the necessary set up is done, it will turn into 'Activating' status as it tries to activate the Virtual Circuit. Once the Virtual Circuit fully activates and is configured on the switch, it will turn to staus 'Active'. For Fabric VCs (Metal Billed), we will start billing the moment the status of the Virtual Circuit turns to 'Active'. If there are any changes to the VLAN after the Virtual Circuit is in an 'Active' status, the status will show 'Changing VLAN' if a new VLAN has been provided, or 'Deactivating' if we are removing the VLAN. When a deletion request is issued for the Virtual Circuit, it will move to a 'deleting' status until it is fully deleted. If the Virtual Circuit is on a Fabric VC, it can also change into an 'Expired' status if the associated service token has expired.

        :param status: The status of this VirtualCircuit.
        :type status: str
        """
        allowed_values = ["pending", "waiting_on_customer_vlan", "activating", "changing_vlan", "deactivating", "deleting", "active", "expired", "activation_failed", "changing_vlan_failed", "deactivation_failed", "delete_failed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def tags(self):
        """Gets the tags of this VirtualCircuit.


        :return: The tags of this VirtualCircuit.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this VirtualCircuit.


        :param tags: The tags of this VirtualCircuit.
        :type tags: List[str]
        """
        if tags is None:
            raise ValueError("Invalid value for `tags`, must not be `None`")

        self._tags = tags

    @property
    def virtual_network(self):
        """Gets the virtual_network of this VirtualCircuit.


        :return: The virtual_network of this VirtualCircuit.
        :rtype: Href
        """
        return self._virtual_network

    @virtual_network.setter
    def virtual_network(self, virtual_network):
        """Sets the virtual_network of this VirtualCircuit.


        :param virtual_network: The virtual_network of this VirtualCircuit.
        :type virtual_network: Href
        """
        if virtual_network is None:
            raise ValueError("Invalid value for `virtual_network`, must not be `None`")

        self._virtual_network = virtual_network

    @property
    def vnid(self):
        """Gets the vnid of this VirtualCircuit.


        :return: The vnid of this VirtualCircuit.
        :rtype: int
        """
        return self._vnid

    @vnid.setter
    def vnid(self, vnid):
        """Sets the vnid of this VirtualCircuit.


        :param vnid: The vnid of this VirtualCircuit.
        :type vnid: int
        """
        if vnid is None:
            raise ValueError("Invalid value for `vnid`, must not be `None`")

        self._vnid = vnid

    @property
    def created_at(self):
        """Gets the created_at of this VirtualCircuit.


        :return: The created_at of this VirtualCircuit.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this VirtualCircuit.


        :param created_at: The created_at of this VirtualCircuit.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this VirtualCircuit.


        :return: The updated_at of this VirtualCircuit.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this VirtualCircuit.


        :param updated_at: The updated_at of this VirtualCircuit.
        :type updated_at: datetime
        """

        self._updated_at = updated_at
