# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from metal.types.base_model_ import Model
from metal.types.ip_reservation_request_input import IPReservationRequestInput
from metal.types.vrf_ip_reservation_create_input import VrfIpReservationCreateInput
from metal import util


class RequestIPReservationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, comments: str=None, customdata: object=None, details: str=None, facility: str=None, fail_on_approval_required: bool=None, metro: str=None, quantity: int=None, tags: List[str]=None, type: str=None, cidr: int=None, network: str=None, vrf_id: str=None):
        """RequestIPReservationRequest - a model defined in OpenAPI

        :param comments: The comments of this RequestIPReservationRequest.
        :param customdata: The customdata of this RequestIPReservationRequest.
        :param details: The details of this RequestIPReservationRequest.
        :param facility: The facility of this RequestIPReservationRequest.
        :param fail_on_approval_required: The fail_on_approval_required of this RequestIPReservationRequest.
        :param metro: The metro of this RequestIPReservationRequest.
        :param quantity: The quantity of this RequestIPReservationRequest.
        :param tags: The tags of this RequestIPReservationRequest.
        :param type: The type of this RequestIPReservationRequest.
        :param cidr: The cidr of this RequestIPReservationRequest.
        :param network: The network of this RequestIPReservationRequest.
        :param vrf_id: The vrf_id of this RequestIPReservationRequest.
        """
        self.openapi_types = {
            'comments': str,
            'customdata': object,
            'details': str,
            'facility': str,
            'fail_on_approval_required': bool,
            'metro': str,
            'quantity': int,
            'tags': List[str],
            'type': str,
            'cidr': int,
            'network': str,
            'vrf_id': str
        }

        self.attribute_map = {
            'comments': 'comments',
            'customdata': 'customdata',
            'details': 'details',
            'facility': 'facility',
            'fail_on_approval_required': 'fail_on_approval_required',
            'metro': 'metro',
            'quantity': 'quantity',
            'tags': 'tags',
            'type': 'type',
            'cidr': 'cidr',
            'network': 'network',
            'vrf_id': 'vrf_id'
        }

        self._comments = comments
        self._customdata = customdata
        self._details = details
        self._facility = facility
        self._fail_on_approval_required = fail_on_approval_required
        self._metro = metro
        self._quantity = quantity
        self._tags = tags
        self._type = type
        self._cidr = cidr
        self._network = network
        self._vrf_id = vrf_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RequestIPReservationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The requestIPReservation_request of this RequestIPReservationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def comments(self):
        """Gets the comments of this RequestIPReservationRequest.


        :return: The comments of this RequestIPReservationRequest.
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this RequestIPReservationRequest.


        :param comments: The comments of this RequestIPReservationRequest.
        :type comments: str
        """

        self._comments = comments

    @property
    def customdata(self):
        """Gets the customdata of this RequestIPReservationRequest.


        :return: The customdata of this RequestIPReservationRequest.
        :rtype: object
        """
        return self._customdata

    @customdata.setter
    def customdata(self, customdata):
        """Sets the customdata of this RequestIPReservationRequest.


        :param customdata: The customdata of this RequestIPReservationRequest.
        :type customdata: object
        """

        self._customdata = customdata

    @property
    def details(self):
        """Gets the details of this RequestIPReservationRequest.


        :return: The details of this RequestIPReservationRequest.
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this RequestIPReservationRequest.


        :param details: The details of this RequestIPReservationRequest.
        :type details: str
        """

        self._details = details

    @property
    def facility(self):
        """Gets the facility of this RequestIPReservationRequest.


        :return: The facility of this RequestIPReservationRequest.
        :rtype: str
        """
        return self._facility

    @facility.setter
    def facility(self, facility):
        """Sets the facility of this RequestIPReservationRequest.


        :param facility: The facility of this RequestIPReservationRequest.
        :type facility: str
        """

        self._facility = facility

    @property
    def fail_on_approval_required(self):
        """Gets the fail_on_approval_required of this RequestIPReservationRequest.


        :return: The fail_on_approval_required of this RequestIPReservationRequest.
        :rtype: bool
        """
        return self._fail_on_approval_required

    @fail_on_approval_required.setter
    def fail_on_approval_required(self, fail_on_approval_required):
        """Sets the fail_on_approval_required of this RequestIPReservationRequest.


        :param fail_on_approval_required: The fail_on_approval_required of this RequestIPReservationRequest.
        :type fail_on_approval_required: bool
        """

        self._fail_on_approval_required = fail_on_approval_required

    @property
    def metro(self):
        """Gets the metro of this RequestIPReservationRequest.

        The code of the metro you are requesting the IP reservation in.

        :return: The metro of this RequestIPReservationRequest.
        :rtype: str
        """
        return self._metro

    @metro.setter
    def metro(self, metro):
        """Sets the metro of this RequestIPReservationRequest.

        The code of the metro you are requesting the IP reservation in.

        :param metro: The metro of this RequestIPReservationRequest.
        :type metro: str
        """

        self._metro = metro

    @property
    def quantity(self):
        """Gets the quantity of this RequestIPReservationRequest.


        :return: The quantity of this RequestIPReservationRequest.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this RequestIPReservationRequest.


        :param quantity: The quantity of this RequestIPReservationRequest.
        :type quantity: int
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")

        self._quantity = quantity

    @property
    def tags(self):
        """Gets the tags of this RequestIPReservationRequest.


        :return: The tags of this RequestIPReservationRequest.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this RequestIPReservationRequest.


        :param tags: The tags of this RequestIPReservationRequest.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def type(self):
        """Gets the type of this RequestIPReservationRequest.

        Must be set to 'vrf'

        :return: The type of this RequestIPReservationRequest.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RequestIPReservationRequest.

        Must be set to 'vrf'

        :param type: The type of this RequestIPReservationRequest.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def cidr(self):
        """Gets the cidr of this RequestIPReservationRequest.

        The size of the VRF IP Reservation's subnet

        :return: The cidr of this RequestIPReservationRequest.
        :rtype: int
        """
        return self._cidr

    @cidr.setter
    def cidr(self, cidr):
        """Sets the cidr of this RequestIPReservationRequest.

        The size of the VRF IP Reservation's subnet

        :param cidr: The cidr of this RequestIPReservationRequest.
        :type cidr: int
        """
        if cidr is None:
            raise ValueError("Invalid value for `cidr`, must not be `None`")

        self._cidr = cidr

    @property
    def network(self):
        """Gets the network of this RequestIPReservationRequest.

        The starting address for this VRF IP Reservation's subnet

        :return: The network of this RequestIPReservationRequest.
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this RequestIPReservationRequest.

        The starting address for this VRF IP Reservation's subnet

        :param network: The network of this RequestIPReservationRequest.
        :type network: str
        """
        if network is None:
            raise ValueError("Invalid value for `network`, must not be `None`")

        self._network = network

    @property
    def vrf_id(self):
        """Gets the vrf_id of this RequestIPReservationRequest.

        The ID of the VRF in which this VRF IP Reservation is created. The VRF must have an existing IP Range that contains the requested subnet. This field may be aliased as just 'vrf'.

        :return: The vrf_id of this RequestIPReservationRequest.
        :rtype: str
        """
        return self._vrf_id

    @vrf_id.setter
    def vrf_id(self, vrf_id):
        """Sets the vrf_id of this RequestIPReservationRequest.

        The ID of the VRF in which this VRF IP Reservation is created. The VRF must have an existing IP Range that contains the requested subnet. This field may be aliased as just 'vrf'.

        :param vrf_id: The vrf_id of this RequestIPReservationRequest.
        :type vrf_id: str
        """
        if vrf_id is None:
            raise ValueError("Invalid value for `vrf_id`, must not be `None`")

        self._vrf_id = vrf_id
