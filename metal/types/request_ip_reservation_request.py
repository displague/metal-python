# coding: utf-8

"""
    Metal API

    # Introduction Equinix Metal provides a RESTful HTTP API which can be reached at <https://api.equinix.com/metal/v1>. This document describes the API and how to use it.  The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account. Every feature of the Equinix Metal web interface is accessible through the API.  The API docs are generated from the Equinix Metal OpenAPI specification and are officially hosted at <https://metal.equinix.com/developers/api>.  # Common Parameters  The Equinix Metal API uses a few methods to minimize network traffic and improve throughput. These parameters are not used in all API calls, but are used often enough to warrant their own section. Look for these parameters in the documentation for the API calls that support them.  ## Pagination  Pagination is used to limit the number of results returned in a single request. The API will return a maximum of 100 results per page. To retrieve additional results, you can use the `page` and `per_page` query parameters.  The `page` parameter is used to specify the page number. The first page is `1`. The `per_page` parameter is used to specify the number of results per page. The maximum number of results differs by resource type.  ## Sorting  Where offered, the API allows you to sort results by a specific field. To sort results use the `sort_by` query parameter with the root level field name as the value. The `sort_direction` parameter is used to specify the sort direction, either either `asc` (ascending) or `desc` (descending).  ## Filtering  Filtering is used to limit the results returned in a single request. The API supports filtering by certain fields in the response. To filter results, you can use the field as a query parameter.  For example, to filter the IP list to only return public IPv4 addresses, you can filter by the `type` field, as in the following request:  ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/projects/id/ips?type=public_ipv4 ```  Only IP addresses with the `type` field set to `public_ipv4` will be returned.  ## Searching  Searching is used to find matching resources using multiple field comparissons. The API supports searching in resources that define this behavior. The fields available for search differ by resource, as does the search strategy.  To search resources you can use the `search` query parameter.  ## Include and Exclude  For resources that contain references to other resources, sucha as a Device that refers to the Project it resides in, the Equinix Metal API will returns `href` values (API links) to the associated resource.  ```json {   ...   \"project\": {     \"href\": \"/metal/v1/projects/f3f131c8-f302-49ef-8c44-9405022dc6dd\"   } } ```  If you're going need the project details, you can avoid a second API request.  Specify the contained `href` resources and collections that you'd like to have included in the response using the `include` query parameter.  For example:  ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/user?include=projects ```  The `include` parameter is generally accepted in `GET`, `POST`, `PUT`, and `PATCH` requests where `href` resources are presented.  To have multiple resources include, use a comma-separated list (e.g. `?include=emails,projects,memberships`).  ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/user?include=emails,projects,memberships ```  You may also include nested associations up to three levels deep using dot notation (`?include=memberships.projects`):  ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/user?include=memberships.projects ```  To exclude resources, and optimize response delivery, use the `exclude` query parameter. The `exclude` parameter is generally accepted in `GET`, `POST`, `PUT`, and `PATCH` requests for fields with nested object responses. When excluded, these fields will be replaced with an object that contains only an `href` field.   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@equinixmetal.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from metal.configuration import Configuration


class RequestIPReservationRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'comments': 'str',
        'customdata': 'object',
        'details': 'str',
        'facility': 'str',
        'fail_on_approval_required': 'bool',
        'metro': 'str',
        'quantity': 'int',
        'tags': 'list[str]',
        'type': 'str',
        'cidr': 'int',
        'network': 'str',
        'vrf_id': 'str'
    }

    attribute_map = {
        'comments': 'comments',
        'customdata': 'customdata',
        'details': 'details',
        'facility': 'facility',
        'fail_on_approval_required': 'fail_on_approval_required',
        'metro': 'metro',
        'quantity': 'quantity',
        'tags': 'tags',
        'type': 'type',
        'cidr': 'cidr',
        'network': 'network',
        'vrf_id': 'vrf_id'
    }

    def __init__(self, comments=None, customdata=None, details=None, facility=None, fail_on_approval_required=None, metro=None, quantity=None, tags=None, type=None, cidr=None, network=None, vrf_id=None, local_vars_configuration=None):  # noqa: E501
        """RequestIPReservationRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._comments = None
        self._customdata = None
        self._details = None
        self._facility = None
        self._fail_on_approval_required = None
        self._metro = None
        self._quantity = None
        self._tags = None
        self._type = None
        self._cidr = None
        self._network = None
        self._vrf_id = None
        self.discriminator = None

        if comments is not None:
            self.comments = comments
        if customdata is not None:
            self.customdata = customdata
        if details is not None:
            self.details = details
        if facility is not None:
            self.facility = facility
        if fail_on_approval_required is not None:
            self.fail_on_approval_required = fail_on_approval_required
        if metro is not None:
            self.metro = metro
        self.quantity = quantity
        if tags is not None:
            self.tags = tags
        self.type = type
        self.cidr = cidr
        self.network = network
        self.vrf_id = vrf_id

    @property
    def comments(self):
        """Gets the comments of this RequestIPReservationRequest.  # noqa: E501


        :return: The comments of this RequestIPReservationRequest.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this RequestIPReservationRequest.


        :param comments: The comments of this RequestIPReservationRequest.  # noqa: E501
        :type comments: str
        """

        self._comments = comments

    @property
    def customdata(self):
        """Gets the customdata of this RequestIPReservationRequest.  # noqa: E501


        :return: The customdata of this RequestIPReservationRequest.  # noqa: E501
        :rtype: object
        """
        return self._customdata

    @customdata.setter
    def customdata(self, customdata):
        """Sets the customdata of this RequestIPReservationRequest.


        :param customdata: The customdata of this RequestIPReservationRequest.  # noqa: E501
        :type customdata: object
        """

        self._customdata = customdata

    @property
    def details(self):
        """Gets the details of this RequestIPReservationRequest.  # noqa: E501


        :return: The details of this RequestIPReservationRequest.  # noqa: E501
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this RequestIPReservationRequest.


        :param details: The details of this RequestIPReservationRequest.  # noqa: E501
        :type details: str
        """

        self._details = details

    @property
    def facility(self):
        """Gets the facility of this RequestIPReservationRequest.  # noqa: E501


        :return: The facility of this RequestIPReservationRequest.  # noqa: E501
        :rtype: str
        """
        return self._facility

    @facility.setter
    def facility(self, facility):
        """Sets the facility of this RequestIPReservationRequest.


        :param facility: The facility of this RequestIPReservationRequest.  # noqa: E501
        :type facility: str
        """

        self._facility = facility

    @property
    def fail_on_approval_required(self):
        """Gets the fail_on_approval_required of this RequestIPReservationRequest.  # noqa: E501


        :return: The fail_on_approval_required of this RequestIPReservationRequest.  # noqa: E501
        :rtype: bool
        """
        return self._fail_on_approval_required

    @fail_on_approval_required.setter
    def fail_on_approval_required(self, fail_on_approval_required):
        """Sets the fail_on_approval_required of this RequestIPReservationRequest.


        :param fail_on_approval_required: The fail_on_approval_required of this RequestIPReservationRequest.  # noqa: E501
        :type fail_on_approval_required: bool
        """

        self._fail_on_approval_required = fail_on_approval_required

    @property
    def metro(self):
        """Gets the metro of this RequestIPReservationRequest.  # noqa: E501

        The code of the metro you are requesting the IP reservation in.  # noqa: E501

        :return: The metro of this RequestIPReservationRequest.  # noqa: E501
        :rtype: str
        """
        return self._metro

    @metro.setter
    def metro(self, metro):
        """Sets the metro of this RequestIPReservationRequest.

        The code of the metro you are requesting the IP reservation in.  # noqa: E501

        :param metro: The metro of this RequestIPReservationRequest.  # noqa: E501
        :type metro: str
        """

        self._metro = metro

    @property
    def quantity(self):
        """Gets the quantity of this RequestIPReservationRequest.  # noqa: E501


        :return: The quantity of this RequestIPReservationRequest.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this RequestIPReservationRequest.


        :param quantity: The quantity of this RequestIPReservationRequest.  # noqa: E501
        :type quantity: int
        """
        if self.local_vars_configuration.client_side_validation and quantity is None:  # noqa: E501
            raise ValueError("Invalid value for `quantity`, must not be `None`")  # noqa: E501

        self._quantity = quantity

    @property
    def tags(self):
        """Gets the tags of this RequestIPReservationRequest.  # noqa: E501


        :return: The tags of this RequestIPReservationRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this RequestIPReservationRequest.


        :param tags: The tags of this RequestIPReservationRequest.  # noqa: E501
        :type tags: list[str]
        """

        self._tags = tags

    @property
    def type(self):
        """Gets the type of this RequestIPReservationRequest.  # noqa: E501

        Must be set to 'vrf'  # noqa: E501

        :return: The type of this RequestIPReservationRequest.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RequestIPReservationRequest.

        Must be set to 'vrf'  # noqa: E501

        :param type: The type of this RequestIPReservationRequest.  # noqa: E501
        :type type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def cidr(self):
        """Gets the cidr of this RequestIPReservationRequest.  # noqa: E501

        The size of the VRF IP Reservation's subnet  # noqa: E501

        :return: The cidr of this RequestIPReservationRequest.  # noqa: E501
        :rtype: int
        """
        return self._cidr

    @cidr.setter
    def cidr(self, cidr):
        """Sets the cidr of this RequestIPReservationRequest.

        The size of the VRF IP Reservation's subnet  # noqa: E501

        :param cidr: The cidr of this RequestIPReservationRequest.  # noqa: E501
        :type cidr: int
        """
        if self.local_vars_configuration.client_side_validation and cidr is None:  # noqa: E501
            raise ValueError("Invalid value for `cidr`, must not be `None`")  # noqa: E501

        self._cidr = cidr

    @property
    def network(self):
        """Gets the network of this RequestIPReservationRequest.  # noqa: E501

        The starting address for this VRF IP Reservation's subnet  # noqa: E501

        :return: The network of this RequestIPReservationRequest.  # noqa: E501
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this RequestIPReservationRequest.

        The starting address for this VRF IP Reservation's subnet  # noqa: E501

        :param network: The network of this RequestIPReservationRequest.  # noqa: E501
        :type network: str
        """
        if self.local_vars_configuration.client_side_validation and network is None:  # noqa: E501
            raise ValueError("Invalid value for `network`, must not be `None`")  # noqa: E501

        self._network = network

    @property
    def vrf_id(self):
        """Gets the vrf_id of this RequestIPReservationRequest.  # noqa: E501

        The ID of the VRF in which this VRF IP Reservation is created. The VRF must have an existing IP Range that contains the requested subnet. This field may be aliased as just 'vrf'.  # noqa: E501

        :return: The vrf_id of this RequestIPReservationRequest.  # noqa: E501
        :rtype: str
        """
        return self._vrf_id

    @vrf_id.setter
    def vrf_id(self, vrf_id):
        """Sets the vrf_id of this RequestIPReservationRequest.

        The ID of the VRF in which this VRF IP Reservation is created. The VRF must have an existing IP Range that contains the requested subnet. This field may be aliased as just 'vrf'.  # noqa: E501

        :param vrf_id: The vrf_id of this RequestIPReservationRequest.  # noqa: E501
        :type vrf_id: str
        """
        if self.local_vars_configuration.client_side_validation and vrf_id is None:  # noqa: E501
            raise ValueError("Invalid value for `vrf_id`, must not be `None`")  # noqa: E501

        self._vrf_id = vrf_id

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RequestIPReservationRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RequestIPReservationRequest):
            return True

        return self.to_dict() != other.to_dict()
