# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from metal.types.base_model_ import Model
from metal import util


class PaymentMethodCreateInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, default: bool=None, name: str=None, nonce: str=None):
        """PaymentMethodCreateInput - a model defined in OpenAPI

        :param default: The default of this PaymentMethodCreateInput.
        :param name: The name of this PaymentMethodCreateInput.
        :param nonce: The nonce of this PaymentMethodCreateInput.
        """
        self.openapi_types = {
            'default': bool,
            'name': str,
            'nonce': str
        }

        self.attribute_map = {
            'default': 'default',
            'name': 'name',
            'nonce': 'nonce'
        }

        self._default = default
        self._name = name
        self._nonce = nonce

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaymentMethodCreateInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PaymentMethodCreateInput of this PaymentMethodCreateInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def default(self):
        """Gets the default of this PaymentMethodCreateInput.


        :return: The default of this PaymentMethodCreateInput.
        :rtype: bool
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this PaymentMethodCreateInput.


        :param default: The default of this PaymentMethodCreateInput.
        :type default: bool
        """

        self._default = default

    @property
    def name(self):
        """Gets the name of this PaymentMethodCreateInput.


        :return: The name of this PaymentMethodCreateInput.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PaymentMethodCreateInput.


        :param name: The name of this PaymentMethodCreateInput.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def nonce(self):
        """Gets the nonce of this PaymentMethodCreateInput.


        :return: The nonce of this PaymentMethodCreateInput.
        :rtype: str
        """
        return self._nonce

    @nonce.setter
    def nonce(self, nonce):
        """Sets the nonce of this PaymentMethodCreateInput.


        :param nonce: The nonce of this PaymentMethodCreateInput.
        :type nonce: str
        """
        if nonce is None:
            raise ValueError("Invalid value for `nonce`, must not be `None`")

        self._nonce = nonce
