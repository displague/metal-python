# coding: utf-8

"""
    Metal API

    This is the API for Equinix Metal Product. Interact with your devices, user account, and projects.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@equinixmetal.com
    Generated by: https://openapi-generator.tech
"""


import inspect
import pprint
import re  # noqa: F401
import six

from metal.configuration import Configuration


class Event(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'state': 'str',
        'type': 'str',
        'body': 'str',
        'relationships': 'list[Href]',
        'interpolated': 'str',
        'created_at': 'datetime',
        'href': 'str'
    }

    attribute_map = {
        'id': 'id',
        'state': 'state',
        'type': 'type',
        'body': 'body',
        'relationships': 'relationships',
        'interpolated': 'interpolated',
        'created_at': 'created_at',
        'href': 'href'
    }

    def __init__(self, id=None, state=None, type=None, body=None, relationships=None, interpolated=None, created_at=None, href=None, local_vars_configuration=None):  # noqa: E501
        """Event - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._state = None
        self._type = None
        self._body = None
        self._relationships = None
        self._interpolated = None
        self._created_at = None
        self._href = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if state is not None:
            self.state = state
        if type is not None:
            self.type = type
        if body is not None:
            self.body = body
        if relationships is not None:
            self.relationships = relationships
        if interpolated is not None:
            self.interpolated = interpolated
        if created_at is not None:
            self.created_at = created_at
        if href is not None:
            self.href = href

    @property
    def id(self):
        """Gets the id of this Event.  # noqa: E501


        :return: The id of this Event.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Event.


        :param id: The id of this Event.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def state(self):
        """Gets the state of this Event.  # noqa: E501


        :return: The state of this Event.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Event.


        :param state: The state of this Event.  # noqa: E501
        :type state: str
        """

        self._state = state

    @property
    def type(self):
        """Gets the type of this Event.  # noqa: E501


        :return: The type of this Event.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Event.


        :param type: The type of this Event.  # noqa: E501
        :type type: str
        """

        self._type = type

    @property
    def body(self):
        """Gets the body of this Event.  # noqa: E501


        :return: The body of this Event.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this Event.


        :param body: The body of this Event.  # noqa: E501
        :type body: str
        """

        self._body = body

    @property
    def relationships(self):
        """Gets the relationships of this Event.  # noqa: E501


        :return: The relationships of this Event.  # noqa: E501
        :rtype: list[Href]
        """
        return self._relationships

    @relationships.setter
    def relationships(self, relationships):
        """Sets the relationships of this Event.


        :param relationships: The relationships of this Event.  # noqa: E501
        :type relationships: list[Href]
        """

        self._relationships = relationships

    @property
    def interpolated(self):
        """Gets the interpolated of this Event.  # noqa: E501


        :return: The interpolated of this Event.  # noqa: E501
        :rtype: str
        """
        return self._interpolated

    @interpolated.setter
    def interpolated(self, interpolated):
        """Sets the interpolated of this Event.


        :param interpolated: The interpolated of this Event.  # noqa: E501
        :type interpolated: str
        """

        self._interpolated = interpolated

    @property
    def created_at(self):
        """Gets the created_at of this Event.  # noqa: E501


        :return: The created_at of this Event.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Event.


        :param created_at: The created_at of this Event.  # noqa: E501
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def href(self):
        """Gets the href of this Event.  # noqa: E501


        :return: The href of this Event.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this Event.


        :param href: The href of this Event.  # noqa: E501
        :type href: str
        """

        self._href = href

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = inspect.getargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Event):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Event):
            return True

        return self.to_dict() != other.to_dict()
