# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from metal.types.base_model_ import Model
from metal.types.href import Href
from metal import util


class Event(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, body: str=None, created_at: datetime=None, href: str=None, id: str=None, interpolated: str=None, relationships: List[Href]=None, state: str=None, type: str=None, modified_by: object=None, ip: str=None):
        """Event - a model defined in OpenAPI

        :param body: The body of this Event.
        :param created_at: The created_at of this Event.
        :param href: The href of this Event.
        :param id: The id of this Event.
        :param interpolated: The interpolated of this Event.
        :param relationships: The relationships of this Event.
        :param state: The state of this Event.
        :param type: The type of this Event.
        :param modified_by: The modified_by of this Event.
        :param ip: The ip of this Event.
        """
        self.openapi_types = {
            'body': str,
            'created_at': datetime,
            'href': str,
            'id': str,
            'interpolated': str,
            'relationships': List[Href],
            'state': str,
            'type': str,
            'modified_by': object,
            'ip': str
        }

        self.attribute_map = {
            'body': 'body',
            'created_at': 'created_at',
            'href': 'href',
            'id': 'id',
            'interpolated': 'interpolated',
            'relationships': 'relationships',
            'state': 'state',
            'type': 'type',
            'modified_by': 'modified_by',
            'ip': 'ip'
        }

        self._body = body
        self._created_at = created_at
        self._href = href
        self._id = id
        self._interpolated = interpolated
        self._relationships = relationships
        self._state = state
        self._type = type
        self._modified_by = modified_by
        self._ip = ip

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Event':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Event of this Event.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def body(self):
        """Gets the body of this Event.


        :return: The body of this Event.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this Event.


        :param body: The body of this Event.
        :type body: str
        """

        self._body = body

    @property
    def created_at(self):
        """Gets the created_at of this Event.


        :return: The created_at of this Event.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Event.


        :param created_at: The created_at of this Event.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def href(self):
        """Gets the href of this Event.


        :return: The href of this Event.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this Event.


        :param href: The href of this Event.
        :type href: str
        """

        self._href = href

    @property
    def id(self):
        """Gets the id of this Event.


        :return: The id of this Event.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Event.


        :param id: The id of this Event.
        :type id: str
        """

        self._id = id

    @property
    def interpolated(self):
        """Gets the interpolated of this Event.


        :return: The interpolated of this Event.
        :rtype: str
        """
        return self._interpolated

    @interpolated.setter
    def interpolated(self, interpolated):
        """Sets the interpolated of this Event.


        :param interpolated: The interpolated of this Event.
        :type interpolated: str
        """

        self._interpolated = interpolated

    @property
    def relationships(self):
        """Gets the relationships of this Event.


        :return: The relationships of this Event.
        :rtype: List[Href]
        """
        return self._relationships

    @relationships.setter
    def relationships(self, relationships):
        """Sets the relationships of this Event.


        :param relationships: The relationships of this Event.
        :type relationships: List[Href]
        """

        self._relationships = relationships

    @property
    def state(self):
        """Gets the state of this Event.


        :return: The state of this Event.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Event.


        :param state: The state of this Event.
        :type state: str
        """

        self._state = state

    @property
    def type(self):
        """Gets the type of this Event.


        :return: The type of this Event.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Event.


        :param type: The type of this Event.
        :type type: str
        """

        self._type = type

    @property
    def modified_by(self):
        """Gets the modified_by of this Event.


        :return: The modified_by of this Event.
        :rtype: object
        """
        return self._modified_by

    @modified_by.setter
    def modified_by(self, modified_by):
        """Sets the modified_by of this Event.


        :param modified_by: The modified_by of this Event.
        :type modified_by: object
        """

        self._modified_by = modified_by

    @property
    def ip(self):
        """Gets the ip of this Event.


        :return: The ip of this Event.
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this Event.


        :param ip: The ip of this Event.
        :type ip: str
        """

        self._ip = ip
