# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from metal.types.base_model_ import Model
from metal.types.coordinates import Coordinates
from metal import util


class Address(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: str=None, address2: str=None, city: str=None, coordinates: Coordinates=None, country: str=None, state: str=None, zip_code: str=None):
        """Address - a model defined in OpenAPI

        :param address: The address of this Address.
        :param address2: The address2 of this Address.
        :param city: The city of this Address.
        :param coordinates: The coordinates of this Address.
        :param country: The country of this Address.
        :param state: The state of this Address.
        :param zip_code: The zip_code of this Address.
        """
        self.openapi_types = {
            'address': str,
            'address2': str,
            'city': str,
            'coordinates': Coordinates,
            'country': str,
            'state': str,
            'zip_code': str
        }

        self.attribute_map = {
            'address': 'address',
            'address2': 'address2',
            'city': 'city',
            'coordinates': 'coordinates',
            'country': 'country',
            'state': 'state',
            'zip_code': 'zip_code'
        }

        self._address = address
        self._address2 = address2
        self._city = city
        self._coordinates = coordinates
        self._country = country
        self._state = state
        self._zip_code = zip_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Address':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Address of this Address.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this Address.


        :return: The address of this Address.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Address.


        :param address: The address of this Address.
        :type address: str
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")

        self._address = address

    @property
    def address2(self):
        """Gets the address2 of this Address.


        :return: The address2 of this Address.
        :rtype: str
        """
        return self._address2

    @address2.setter
    def address2(self, address2):
        """Sets the address2 of this Address.


        :param address2: The address2 of this Address.
        :type address2: str
        """

        self._address2 = address2

    @property
    def city(self):
        """Gets the city of this Address.


        :return: The city of this Address.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Address.


        :param city: The city of this Address.
        :type city: str
        """

        self._city = city

    @property
    def coordinates(self):
        """Gets the coordinates of this Address.


        :return: The coordinates of this Address.
        :rtype: Coordinates
        """
        return self._coordinates

    @coordinates.setter
    def coordinates(self, coordinates):
        """Sets the coordinates of this Address.


        :param coordinates: The coordinates of this Address.
        :type coordinates: Coordinates
        """

        self._coordinates = coordinates

    @property
    def country(self):
        """Gets the country of this Address.


        :return: The country of this Address.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Address.


        :param country: The country of this Address.
        :type country: str
        """
        if country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")

        self._country = country

    @property
    def state(self):
        """Gets the state of this Address.


        :return: The state of this Address.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Address.


        :param state: The state of this Address.
        :type state: str
        """

        self._state = state

    @property
    def zip_code(self):
        """Gets the zip_code of this Address.


        :return: The zip_code of this Address.
        :rtype: str
        """
        return self._zip_code

    @zip_code.setter
    def zip_code(self, zip_code):
        """Sets the zip_code of this Address.


        :param zip_code: The zip_code of this Address.
        :type zip_code: str
        """
        if zip_code is None:
            raise ValueError("Invalid value for `zip_code`, must not be `None`")

        self._zip_code = zip_code
