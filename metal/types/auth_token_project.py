# coding: utf-8

"""
    Metal API

    This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>.   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@equinixmetal.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from metal.configuration import Configuration


class AuthTokenProject(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'name': 'str',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'max_devices': 'object',
        'members': 'list[Href]',
        'memberships': 'list[Href]',
        'network_status': 'object',
        'invitations': 'list[Href]',
        'payment_method': 'Href',
        'devices': 'list[Href]',
        'ssh_keys': 'list[Href]',
        'volumes': 'list[Href]',
        'bgp_config': 'Href',
        'customdata': 'object'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'max_devices': 'max_devices',
        'members': 'members',
        'memberships': 'memberships',
        'network_status': 'network_status',
        'invitations': 'invitations',
        'payment_method': 'payment_method',
        'devices': 'devices',
        'ssh_keys': 'ssh_keys',
        'volumes': 'volumes',
        'bgp_config': 'bgp_config',
        'customdata': 'customdata'
    }

    def __init__(self, id=None, name=None, created_at=None, updated_at=None, max_devices=None, members=None, memberships=None, network_status=None, invitations=None, payment_method=None, devices=None, ssh_keys=None, volumes=None, bgp_config=None, customdata=None, local_vars_configuration=None):  # noqa: E501
        """AuthTokenProject - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._created_at = None
        self._updated_at = None
        self._max_devices = None
        self._members = None
        self._memberships = None
        self._network_status = None
        self._invitations = None
        self._payment_method = None
        self._devices = None
        self._ssh_keys = None
        self._volumes = None
        self._bgp_config = None
        self._customdata = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if max_devices is not None:
            self.max_devices = max_devices
        if members is not None:
            self.members = members
        if memberships is not None:
            self.memberships = memberships
        if network_status is not None:
            self.network_status = network_status
        if invitations is not None:
            self.invitations = invitations
        if payment_method is not None:
            self.payment_method = payment_method
        if devices is not None:
            self.devices = devices
        if ssh_keys is not None:
            self.ssh_keys = ssh_keys
        if volumes is not None:
            self.volumes = volumes
        if bgp_config is not None:
            self.bgp_config = bgp_config
        if customdata is not None:
            self.customdata = customdata

    @property
    def id(self):
        """Gets the id of this AuthTokenProject.  # noqa: E501


        :return: The id of this AuthTokenProject.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AuthTokenProject.


        :param id: The id of this AuthTokenProject.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this AuthTokenProject.  # noqa: E501


        :return: The name of this AuthTokenProject.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AuthTokenProject.


        :param name: The name of this AuthTokenProject.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def created_at(self):
        """Gets the created_at of this AuthTokenProject.  # noqa: E501


        :return: The created_at of this AuthTokenProject.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this AuthTokenProject.


        :param created_at: The created_at of this AuthTokenProject.  # noqa: E501
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this AuthTokenProject.  # noqa: E501


        :return: The updated_at of this AuthTokenProject.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this AuthTokenProject.


        :param updated_at: The updated_at of this AuthTokenProject.  # noqa: E501
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def max_devices(self):
        """Gets the max_devices of this AuthTokenProject.  # noqa: E501


        :return: The max_devices of this AuthTokenProject.  # noqa: E501
        :rtype: object
        """
        return self._max_devices

    @max_devices.setter
    def max_devices(self, max_devices):
        """Sets the max_devices of this AuthTokenProject.


        :param max_devices: The max_devices of this AuthTokenProject.  # noqa: E501
        :type max_devices: object
        """

        self._max_devices = max_devices

    @property
    def members(self):
        """Gets the members of this AuthTokenProject.  # noqa: E501


        :return: The members of this AuthTokenProject.  # noqa: E501
        :rtype: list[Href]
        """
        return self._members

    @members.setter
    def members(self, members):
        """Sets the members of this AuthTokenProject.


        :param members: The members of this AuthTokenProject.  # noqa: E501
        :type members: list[Href]
        """

        self._members = members

    @property
    def memberships(self):
        """Gets the memberships of this AuthTokenProject.  # noqa: E501


        :return: The memberships of this AuthTokenProject.  # noqa: E501
        :rtype: list[Href]
        """
        return self._memberships

    @memberships.setter
    def memberships(self, memberships):
        """Sets the memberships of this AuthTokenProject.


        :param memberships: The memberships of this AuthTokenProject.  # noqa: E501
        :type memberships: list[Href]
        """

        self._memberships = memberships

    @property
    def network_status(self):
        """Gets the network_status of this AuthTokenProject.  # noqa: E501


        :return: The network_status of this AuthTokenProject.  # noqa: E501
        :rtype: object
        """
        return self._network_status

    @network_status.setter
    def network_status(self, network_status):
        """Sets the network_status of this AuthTokenProject.


        :param network_status: The network_status of this AuthTokenProject.  # noqa: E501
        :type network_status: object
        """

        self._network_status = network_status

    @property
    def invitations(self):
        """Gets the invitations of this AuthTokenProject.  # noqa: E501


        :return: The invitations of this AuthTokenProject.  # noqa: E501
        :rtype: list[Href]
        """
        return self._invitations

    @invitations.setter
    def invitations(self, invitations):
        """Sets the invitations of this AuthTokenProject.


        :param invitations: The invitations of this AuthTokenProject.  # noqa: E501
        :type invitations: list[Href]
        """

        self._invitations = invitations

    @property
    def payment_method(self):
        """Gets the payment_method of this AuthTokenProject.  # noqa: E501


        :return: The payment_method of this AuthTokenProject.  # noqa: E501
        :rtype: Href
        """
        return self._payment_method

    @payment_method.setter
    def payment_method(self, payment_method):
        """Sets the payment_method of this AuthTokenProject.


        :param payment_method: The payment_method of this AuthTokenProject.  # noqa: E501
        :type payment_method: Href
        """

        self._payment_method = payment_method

    @property
    def devices(self):
        """Gets the devices of this AuthTokenProject.  # noqa: E501


        :return: The devices of this AuthTokenProject.  # noqa: E501
        :rtype: list[Href]
        """
        return self._devices

    @devices.setter
    def devices(self, devices):
        """Sets the devices of this AuthTokenProject.


        :param devices: The devices of this AuthTokenProject.  # noqa: E501
        :type devices: list[Href]
        """

        self._devices = devices

    @property
    def ssh_keys(self):
        """Gets the ssh_keys of this AuthTokenProject.  # noqa: E501


        :return: The ssh_keys of this AuthTokenProject.  # noqa: E501
        :rtype: list[Href]
        """
        return self._ssh_keys

    @ssh_keys.setter
    def ssh_keys(self, ssh_keys):
        """Sets the ssh_keys of this AuthTokenProject.


        :param ssh_keys: The ssh_keys of this AuthTokenProject.  # noqa: E501
        :type ssh_keys: list[Href]
        """

        self._ssh_keys = ssh_keys

    @property
    def volumes(self):
        """Gets the volumes of this AuthTokenProject.  # noqa: E501


        :return: The volumes of this AuthTokenProject.  # noqa: E501
        :rtype: list[Href]
        """
        return self._volumes

    @volumes.setter
    def volumes(self, volumes):
        """Sets the volumes of this AuthTokenProject.


        :param volumes: The volumes of this AuthTokenProject.  # noqa: E501
        :type volumes: list[Href]
        """

        self._volumes = volumes

    @property
    def bgp_config(self):
        """Gets the bgp_config of this AuthTokenProject.  # noqa: E501


        :return: The bgp_config of this AuthTokenProject.  # noqa: E501
        :rtype: Href
        """
        return self._bgp_config

    @bgp_config.setter
    def bgp_config(self, bgp_config):
        """Sets the bgp_config of this AuthTokenProject.


        :param bgp_config: The bgp_config of this AuthTokenProject.  # noqa: E501
        :type bgp_config: Href
        """

        self._bgp_config = bgp_config

    @property
    def customdata(self):
        """Gets the customdata of this AuthTokenProject.  # noqa: E501


        :return: The customdata of this AuthTokenProject.  # noqa: E501
        :rtype: object
        """
        return self._customdata

    @customdata.setter
    def customdata(self, customdata):
        """Sets the customdata of this AuthTokenProject.


        :param customdata: The customdata of this AuthTokenProject.  # noqa: E501
        :type customdata: object
        """

        self._customdata = customdata

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuthTokenProject):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AuthTokenProject):
            return True

        return self.to_dict() != other.to_dict()
