# coding: utf-8

"""
    Metal API

    # Introduction Equinix Metal provides a RESTful HTTP API which can be reached at <https://api.equinix.com/metal/v1>. This document describes the API and how to use it.  The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account. Every feature of the Equinix Metal web interface is accessible through the API.  The API docs are generated from the Equinix Metal OpenAPI specification and are officially hosted at <https://metal.equinix.com/developers/api>.  # Common Parameters  The Equinix Metal API uses a few methods to minimize network traffic and improve throughput. These parameters are not used in all API calls, but are used often enough to warrant their own section. Look for these parameters in the documentation for the API calls that support them.  ## Pagination  Pagination is used to limit the number of results returned in a single request. The API will return a maximum of 100 results per page. To retrieve additional results, you can use the `page` and `per_page` query parameters.  The `page` parameter is used to specify the page number. The first page is `1`. The `per_page` parameter is used to specify the number of results per page. The maximum number of results differs by resource type.  ## Sorting  Where offered, the API allows you to sort results by a specific field. To sort results use the `sort_by` query parameter with the root level field name as the value. The `sort_direction` parameter is used to specify the sort direction, either either `asc` (ascending) or `desc` (descending).  ## Filtering  Filtering is used to limit the results returned in a single request. The API supports filtering by certain fields in the response. To filter results, you can use the field as a query parameter.  For example, to filter the IP list to only return public IPv4 addresses, you can filter by the `type` field, as in the following request:  ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/projects/id/ips?type=public_ipv4 ```  Only IP addresses with the `type` field set to `public_ipv4` will be returned.  ## Searching  Searching is used to find matching resources using multiple field comparissons. The API supports searching in resources that define this behavior. The fields available for search differ by resource, as does the search strategy.  To search resources you can use the `search` query parameter.  ## Include and Exclude  For resources that contain references to other resources, sucha as a Device that refers to the Project it resides in, the Equinix Metal API will returns `href` values (API links) to the associated resource.  ```json {   ...   \"project\": {     \"href\": \"/metal/v1/projects/f3f131c8-f302-49ef-8c44-9405022dc6dd\"   } } ```  If you're going need the project details, you can avoid a second API request.  Specify the contained `href` resources and collections that you'd like to have included in the response using the `include` query parameter.  For example:  ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/user?include=projects ```  The `include` parameter is generally accepted in `GET`, `POST`, `PUT`, and `PATCH` requests where `href` resources are presented.  To have multiple resources include, use a comma-separated list (e.g. `?include=emails,projects,memberships`).  ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/user?include=emails,projects,memberships ```  You may also include nested associations up to three levels deep using dot notation (`?include=memberships.projects`):  ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/user?include=memberships.projects ```  To exclude resources, and optimize response delivery, use the `exclude` query parameter. The `exclude` parameter is generally accepted in `GET`, `POST`, `PUT`, and `PATCH` requests for fields with nested object responses. When excluded, these fields will be replaced with an object that contains only an `href` field.   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@equinixmetal.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from metal.configuration import Configuration


class AuthTokenProject(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'bgp_config': 'Href',
        'created_at': 'datetime',
        'customdata': 'object',
        'devices': 'list[Href]',
        'id': 'str',
        'invitations': 'list[Href]',
        'max_devices': 'object',
        'members': 'list[Href]',
        'memberships': 'list[Href]',
        'name': 'str',
        'network_status': 'object',
        'payment_method': 'Href',
        'ssh_keys': 'list[Href]',
        'updated_at': 'datetime',
        'volumes': 'list[Href]'
    }

    attribute_map = {
        'bgp_config': 'bgp_config',
        'created_at': 'created_at',
        'customdata': 'customdata',
        'devices': 'devices',
        'id': 'id',
        'invitations': 'invitations',
        'max_devices': 'max_devices',
        'members': 'members',
        'memberships': 'memberships',
        'name': 'name',
        'network_status': 'network_status',
        'payment_method': 'payment_method',
        'ssh_keys': 'ssh_keys',
        'updated_at': 'updated_at',
        'volumes': 'volumes'
    }

    def __init__(self, bgp_config=None, created_at=None, customdata=None, devices=None, id=None, invitations=None, max_devices=None, members=None, memberships=None, name=None, network_status=None, payment_method=None, ssh_keys=None, updated_at=None, volumes=None, local_vars_configuration=None):  # noqa: E501
        """AuthTokenProject - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._bgp_config = None
        self._created_at = None
        self._customdata = None
        self._devices = None
        self._id = None
        self._invitations = None
        self._max_devices = None
        self._members = None
        self._memberships = None
        self._name = None
        self._network_status = None
        self._payment_method = None
        self._ssh_keys = None
        self._updated_at = None
        self._volumes = None
        self.discriminator = None

        if bgp_config is not None:
            self.bgp_config = bgp_config
        if created_at is not None:
            self.created_at = created_at
        if customdata is not None:
            self.customdata = customdata
        if devices is not None:
            self.devices = devices
        if id is not None:
            self.id = id
        if invitations is not None:
            self.invitations = invitations
        if max_devices is not None:
            self.max_devices = max_devices
        if members is not None:
            self.members = members
        if memberships is not None:
            self.memberships = memberships
        if name is not None:
            self.name = name
        if network_status is not None:
            self.network_status = network_status
        if payment_method is not None:
            self.payment_method = payment_method
        if ssh_keys is not None:
            self.ssh_keys = ssh_keys
        if updated_at is not None:
            self.updated_at = updated_at
        if volumes is not None:
            self.volumes = volumes

    @property
    def bgp_config(self):
        """Gets the bgp_config of this AuthTokenProject.  # noqa: E501


        :return: The bgp_config of this AuthTokenProject.  # noqa: E501
        :rtype: Href
        """
        return self._bgp_config

    @bgp_config.setter
    def bgp_config(self, bgp_config):
        """Sets the bgp_config of this AuthTokenProject.


        :param bgp_config: The bgp_config of this AuthTokenProject.  # noqa: E501
        :type bgp_config: Href
        """

        self._bgp_config = bgp_config

    @property
    def created_at(self):
        """Gets the created_at of this AuthTokenProject.  # noqa: E501


        :return: The created_at of this AuthTokenProject.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this AuthTokenProject.


        :param created_at: The created_at of this AuthTokenProject.  # noqa: E501
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def customdata(self):
        """Gets the customdata of this AuthTokenProject.  # noqa: E501


        :return: The customdata of this AuthTokenProject.  # noqa: E501
        :rtype: object
        """
        return self._customdata

    @customdata.setter
    def customdata(self, customdata):
        """Sets the customdata of this AuthTokenProject.


        :param customdata: The customdata of this AuthTokenProject.  # noqa: E501
        :type customdata: object
        """

        self._customdata = customdata

    @property
    def devices(self):
        """Gets the devices of this AuthTokenProject.  # noqa: E501


        :return: The devices of this AuthTokenProject.  # noqa: E501
        :rtype: list[Href]
        """
        return self._devices

    @devices.setter
    def devices(self, devices):
        """Sets the devices of this AuthTokenProject.


        :param devices: The devices of this AuthTokenProject.  # noqa: E501
        :type devices: list[Href]
        """

        self._devices = devices

    @property
    def id(self):
        """Gets the id of this AuthTokenProject.  # noqa: E501


        :return: The id of this AuthTokenProject.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AuthTokenProject.


        :param id: The id of this AuthTokenProject.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def invitations(self):
        """Gets the invitations of this AuthTokenProject.  # noqa: E501


        :return: The invitations of this AuthTokenProject.  # noqa: E501
        :rtype: list[Href]
        """
        return self._invitations

    @invitations.setter
    def invitations(self, invitations):
        """Sets the invitations of this AuthTokenProject.


        :param invitations: The invitations of this AuthTokenProject.  # noqa: E501
        :type invitations: list[Href]
        """

        self._invitations = invitations

    @property
    def max_devices(self):
        """Gets the max_devices of this AuthTokenProject.  # noqa: E501


        :return: The max_devices of this AuthTokenProject.  # noqa: E501
        :rtype: object
        """
        return self._max_devices

    @max_devices.setter
    def max_devices(self, max_devices):
        """Sets the max_devices of this AuthTokenProject.


        :param max_devices: The max_devices of this AuthTokenProject.  # noqa: E501
        :type max_devices: object
        """

        self._max_devices = max_devices

    @property
    def members(self):
        """Gets the members of this AuthTokenProject.  # noqa: E501


        :return: The members of this AuthTokenProject.  # noqa: E501
        :rtype: list[Href]
        """
        return self._members

    @members.setter
    def members(self, members):
        """Sets the members of this AuthTokenProject.


        :param members: The members of this AuthTokenProject.  # noqa: E501
        :type members: list[Href]
        """

        self._members = members

    @property
    def memberships(self):
        """Gets the memberships of this AuthTokenProject.  # noqa: E501


        :return: The memberships of this AuthTokenProject.  # noqa: E501
        :rtype: list[Href]
        """
        return self._memberships

    @memberships.setter
    def memberships(self, memberships):
        """Sets the memberships of this AuthTokenProject.


        :param memberships: The memberships of this AuthTokenProject.  # noqa: E501
        :type memberships: list[Href]
        """

        self._memberships = memberships

    @property
    def name(self):
        """Gets the name of this AuthTokenProject.  # noqa: E501


        :return: The name of this AuthTokenProject.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AuthTokenProject.


        :param name: The name of this AuthTokenProject.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def network_status(self):
        """Gets the network_status of this AuthTokenProject.  # noqa: E501


        :return: The network_status of this AuthTokenProject.  # noqa: E501
        :rtype: object
        """
        return self._network_status

    @network_status.setter
    def network_status(self, network_status):
        """Sets the network_status of this AuthTokenProject.


        :param network_status: The network_status of this AuthTokenProject.  # noqa: E501
        :type network_status: object
        """

        self._network_status = network_status

    @property
    def payment_method(self):
        """Gets the payment_method of this AuthTokenProject.  # noqa: E501


        :return: The payment_method of this AuthTokenProject.  # noqa: E501
        :rtype: Href
        """
        return self._payment_method

    @payment_method.setter
    def payment_method(self, payment_method):
        """Sets the payment_method of this AuthTokenProject.


        :param payment_method: The payment_method of this AuthTokenProject.  # noqa: E501
        :type payment_method: Href
        """

        self._payment_method = payment_method

    @property
    def ssh_keys(self):
        """Gets the ssh_keys of this AuthTokenProject.  # noqa: E501


        :return: The ssh_keys of this AuthTokenProject.  # noqa: E501
        :rtype: list[Href]
        """
        return self._ssh_keys

    @ssh_keys.setter
    def ssh_keys(self, ssh_keys):
        """Sets the ssh_keys of this AuthTokenProject.


        :param ssh_keys: The ssh_keys of this AuthTokenProject.  # noqa: E501
        :type ssh_keys: list[Href]
        """

        self._ssh_keys = ssh_keys

    @property
    def updated_at(self):
        """Gets the updated_at of this AuthTokenProject.  # noqa: E501


        :return: The updated_at of this AuthTokenProject.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this AuthTokenProject.


        :param updated_at: The updated_at of this AuthTokenProject.  # noqa: E501
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def volumes(self):
        """Gets the volumes of this AuthTokenProject.  # noqa: E501


        :return: The volumes of this AuthTokenProject.  # noqa: E501
        :rtype: list[Href]
        """
        return self._volumes

    @volumes.setter
    def volumes(self, volumes):
        """Sets the volumes of this AuthTokenProject.


        :param volumes: The volumes of this AuthTokenProject.  # noqa: E501
        :type volumes: list[Href]
        """

        self._volumes = volumes

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuthTokenProject):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AuthTokenProject):
            return True

        return self.to_dict() != other.to_dict()
