# coding: utf-8

"""
    Metal API

    This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>.   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@equinixmetal.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from metal.configuration import Configuration


class PaymentMethod(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'name': 'str',
        'type': 'str',
        'default': 'bool',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'card_type': 'str',
        'expiration_month': 'str',
        'expiration_year': 'str',
        'cardholder_name': 'str',
        'billing_address': 'PaymentMethodBillingAddress',
        'email': 'str',
        'created_by_user': 'Href',
        'organization': 'Href',
        'projects': 'list[Href]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'type': 'type',
        'default': 'default',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'card_type': 'card_type',
        'expiration_month': 'expiration_month',
        'expiration_year': 'expiration_year',
        'cardholder_name': 'cardholder_name',
        'billing_address': 'billing_address',
        'email': 'email',
        'created_by_user': 'created_by_user',
        'organization': 'organization',
        'projects': 'projects'
    }

    def __init__(self, id=None, name=None, type=None, default=None, created_at=None, updated_at=None, card_type=None, expiration_month=None, expiration_year=None, cardholder_name=None, billing_address=None, email=None, created_by_user=None, organization=None, projects=None, local_vars_configuration=None):  # noqa: E501
        """PaymentMethod - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._type = None
        self._default = None
        self._created_at = None
        self._updated_at = None
        self._card_type = None
        self._expiration_month = None
        self._expiration_year = None
        self._cardholder_name = None
        self._billing_address = None
        self._email = None
        self._created_by_user = None
        self._organization = None
        self._projects = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if type is not None:
            self.type = type
        if default is not None:
            self.default = default
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if card_type is not None:
            self.card_type = card_type
        if expiration_month is not None:
            self.expiration_month = expiration_month
        if expiration_year is not None:
            self.expiration_year = expiration_year
        if cardholder_name is not None:
            self.cardholder_name = cardholder_name
        if billing_address is not None:
            self.billing_address = billing_address
        if email is not None:
            self.email = email
        if created_by_user is not None:
            self.created_by_user = created_by_user
        if organization is not None:
            self.organization = organization
        if projects is not None:
            self.projects = projects

    @property
    def id(self):
        """Gets the id of this PaymentMethod.  # noqa: E501


        :return: The id of this PaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PaymentMethod.


        :param id: The id of this PaymentMethod.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this PaymentMethod.  # noqa: E501


        :return: The name of this PaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PaymentMethod.


        :param name: The name of this PaymentMethod.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this PaymentMethod.  # noqa: E501


        :return: The type of this PaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PaymentMethod.


        :param type: The type of this PaymentMethod.  # noqa: E501
        :type type: str
        """

        self._type = type

    @property
    def default(self):
        """Gets the default of this PaymentMethod.  # noqa: E501


        :return: The default of this PaymentMethod.  # noqa: E501
        :rtype: bool
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this PaymentMethod.


        :param default: The default of this PaymentMethod.  # noqa: E501
        :type default: bool
        """

        self._default = default

    @property
    def created_at(self):
        """Gets the created_at of this PaymentMethod.  # noqa: E501


        :return: The created_at of this PaymentMethod.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this PaymentMethod.


        :param created_at: The created_at of this PaymentMethod.  # noqa: E501
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this PaymentMethod.  # noqa: E501


        :return: The updated_at of this PaymentMethod.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this PaymentMethod.


        :param updated_at: The updated_at of this PaymentMethod.  # noqa: E501
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def card_type(self):
        """Gets the card_type of this PaymentMethod.  # noqa: E501


        :return: The card_type of this PaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._card_type

    @card_type.setter
    def card_type(self, card_type):
        """Sets the card_type of this PaymentMethod.


        :param card_type: The card_type of this PaymentMethod.  # noqa: E501
        :type card_type: str
        """

        self._card_type = card_type

    @property
    def expiration_month(self):
        """Gets the expiration_month of this PaymentMethod.  # noqa: E501


        :return: The expiration_month of this PaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._expiration_month

    @expiration_month.setter
    def expiration_month(self, expiration_month):
        """Sets the expiration_month of this PaymentMethod.


        :param expiration_month: The expiration_month of this PaymentMethod.  # noqa: E501
        :type expiration_month: str
        """

        self._expiration_month = expiration_month

    @property
    def expiration_year(self):
        """Gets the expiration_year of this PaymentMethod.  # noqa: E501


        :return: The expiration_year of this PaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._expiration_year

    @expiration_year.setter
    def expiration_year(self, expiration_year):
        """Sets the expiration_year of this PaymentMethod.


        :param expiration_year: The expiration_year of this PaymentMethod.  # noqa: E501
        :type expiration_year: str
        """

        self._expiration_year = expiration_year

    @property
    def cardholder_name(self):
        """Gets the cardholder_name of this PaymentMethod.  # noqa: E501


        :return: The cardholder_name of this PaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._cardholder_name

    @cardholder_name.setter
    def cardholder_name(self, cardholder_name):
        """Sets the cardholder_name of this PaymentMethod.


        :param cardholder_name: The cardholder_name of this PaymentMethod.  # noqa: E501
        :type cardholder_name: str
        """

        self._cardholder_name = cardholder_name

    @property
    def billing_address(self):
        """Gets the billing_address of this PaymentMethod.  # noqa: E501


        :return: The billing_address of this PaymentMethod.  # noqa: E501
        :rtype: PaymentMethodBillingAddress
        """
        return self._billing_address

    @billing_address.setter
    def billing_address(self, billing_address):
        """Sets the billing_address of this PaymentMethod.


        :param billing_address: The billing_address of this PaymentMethod.  # noqa: E501
        :type billing_address: PaymentMethodBillingAddress
        """

        self._billing_address = billing_address

    @property
    def email(self):
        """Gets the email of this PaymentMethod.  # noqa: E501


        :return: The email of this PaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this PaymentMethod.


        :param email: The email of this PaymentMethod.  # noqa: E501
        :type email: str
        """

        self._email = email

    @property
    def created_by_user(self):
        """Gets the created_by_user of this PaymentMethod.  # noqa: E501


        :return: The created_by_user of this PaymentMethod.  # noqa: E501
        :rtype: Href
        """
        return self._created_by_user

    @created_by_user.setter
    def created_by_user(self, created_by_user):
        """Sets the created_by_user of this PaymentMethod.


        :param created_by_user: The created_by_user of this PaymentMethod.  # noqa: E501
        :type created_by_user: Href
        """

        self._created_by_user = created_by_user

    @property
    def organization(self):
        """Gets the organization of this PaymentMethod.  # noqa: E501


        :return: The organization of this PaymentMethod.  # noqa: E501
        :rtype: Href
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this PaymentMethod.


        :param organization: The organization of this PaymentMethod.  # noqa: E501
        :type organization: Href
        """

        self._organization = organization

    @property
    def projects(self):
        """Gets the projects of this PaymentMethod.  # noqa: E501


        :return: The projects of this PaymentMethod.  # noqa: E501
        :rtype: list[Href]
        """
        return self._projects

    @projects.setter
    def projects(self, projects):
        """Sets the projects of this PaymentMethod.


        :param projects: The projects of this PaymentMethod.  # noqa: E501
        :type projects: list[Href]
        """

        self._projects = projects

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentMethod):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PaymentMethod):
            return True

        return self.to_dict() != other.to_dict()
