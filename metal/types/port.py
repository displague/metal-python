# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from metal.types.base_model_ import Model
from metal.types.bond_port_data import BondPortData
from metal.types.href import Href
from metal.types.port_data import PortData
from metal.types.virtual_network import VirtualNetwork
from metal import util


class Port(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bond: BondPortData=None, data: PortData=None, disbond_operation_supported: bool=None, href: str=None, id: str=None, name: str=None, type: str=None, network_type: str=None, native_virtual_network: VirtualNetwork=None, virtual_networks: List[Href]=None):
        """Port - a model defined in OpenAPI

        :param bond: The bond of this Port.
        :param data: The data of this Port.
        :param disbond_operation_supported: The disbond_operation_supported of this Port.
        :param href: The href of this Port.
        :param id: The id of this Port.
        :param name: The name of this Port.
        :param type: The type of this Port.
        :param network_type: The network_type of this Port.
        :param native_virtual_network: The native_virtual_network of this Port.
        :param virtual_networks: The virtual_networks of this Port.
        """
        self.openapi_types = {
            'bond': BondPortData,
            'data': PortData,
            'disbond_operation_supported': bool,
            'href': str,
            'id': str,
            'name': str,
            'type': str,
            'network_type': str,
            'native_virtual_network': VirtualNetwork,
            'virtual_networks': List[Href]
        }

        self.attribute_map = {
            'bond': 'bond',
            'data': 'data',
            'disbond_operation_supported': 'disbond_operation_supported',
            'href': 'href',
            'id': 'id',
            'name': 'name',
            'type': 'type',
            'network_type': 'network_type',
            'native_virtual_network': 'native_virtual_network',
            'virtual_networks': 'virtual_networks'
        }

        self._bond = bond
        self._data = data
        self._disbond_operation_supported = disbond_operation_supported
        self._href = href
        self._id = id
        self._name = name
        self._type = type
        self._network_type = network_type
        self._native_virtual_network = native_virtual_network
        self._virtual_networks = virtual_networks

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Port':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Port of this Port.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bond(self):
        """Gets the bond of this Port.


        :return: The bond of this Port.
        :rtype: BondPortData
        """
        return self._bond

    @bond.setter
    def bond(self, bond):
        """Sets the bond of this Port.


        :param bond: The bond of this Port.
        :type bond: BondPortData
        """

        self._bond = bond

    @property
    def data(self):
        """Gets the data of this Port.


        :return: The data of this Port.
        :rtype: PortData
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this Port.


        :param data: The data of this Port.
        :type data: PortData
        """

        self._data = data

    @property
    def disbond_operation_supported(self):
        """Gets the disbond_operation_supported of this Port.

        Indicates whether or not the bond can be broken on the port (when applicable).

        :return: The disbond_operation_supported of this Port.
        :rtype: bool
        """
        return self._disbond_operation_supported

    @disbond_operation_supported.setter
    def disbond_operation_supported(self, disbond_operation_supported):
        """Sets the disbond_operation_supported of this Port.

        Indicates whether or not the bond can be broken on the port (when applicable).

        :param disbond_operation_supported: The disbond_operation_supported of this Port.
        :type disbond_operation_supported: bool
        """

        self._disbond_operation_supported = disbond_operation_supported

    @property
    def href(self):
        """Gets the href of this Port.


        :return: The href of this Port.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this Port.


        :param href: The href of this Port.
        :type href: str
        """

        self._href = href

    @property
    def id(self):
        """Gets the id of this Port.


        :return: The id of this Port.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Port.


        :param id: The id of this Port.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Port.


        :return: The name of this Port.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Port.


        :param name: The name of this Port.
        :type name: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this Port.

        Type is either \"NetworkBondPort\" for bond ports or \"NetworkPort\" for bondable ethernet ports

        :return: The type of this Port.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Port.

        Type is either \"NetworkBondPort\" for bond ports or \"NetworkPort\" for bondable ethernet ports

        :param type: The type of this Port.
        :type type: str
        """
        allowed_values = ["NetworkPort", "NetworkBondPort"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def network_type(self):
        """Gets the network_type of this Port.

        Composite network type of the bond

        :return: The network_type of this Port.
        :rtype: str
        """
        return self._network_type

    @network_type.setter
    def network_type(self, network_type):
        """Sets the network_type of this Port.

        Composite network type of the bond

        :param network_type: The network_type of this Port.
        :type network_type: str
        """
        allowed_values = ["layer2-bonded", "layer2-individual", "layer3", "hybrid", "hybrid-bonded"]  # noqa: E501
        if network_type not in allowed_values:
            raise ValueError(
                "Invalid value for `network_type` ({0}), must be one of {1}"
                .format(network_type, allowed_values)
            )

        self._network_type = network_type

    @property
    def native_virtual_network(self):
        """Gets the native_virtual_network of this Port.


        :return: The native_virtual_network of this Port.
        :rtype: VirtualNetwork
        """
        return self._native_virtual_network

    @native_virtual_network.setter
    def native_virtual_network(self, native_virtual_network):
        """Sets the native_virtual_network of this Port.


        :param native_virtual_network: The native_virtual_network of this Port.
        :type native_virtual_network: VirtualNetwork
        """

        self._native_virtual_network = native_virtual_network

    @property
    def virtual_networks(self):
        """Gets the virtual_networks of this Port.


        :return: The virtual_networks of this Port.
        :rtype: List[Href]
        """
        return self._virtual_networks

    @virtual_networks.setter
    def virtual_networks(self, virtual_networks):
        """Sets the virtual_networks of this Port.


        :param virtual_networks: The virtual_networks of this Port.
        :type virtual_networks: List[Href]
        """

        self._virtual_networks = virtual_networks
