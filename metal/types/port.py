# coding: utf-8

"""
    Metal API

    This is the API for Equinix Metal Product. Interact with your devices, user account, and projects.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@equinixmetal.com
    Generated by: https://openapi-generator.tech
"""


import inspect
import pprint
import re  # noqa: F401
import six

from metal.configuration import Configuration


class Port(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'type': 'str',
        'name': 'str',
        'data': 'object',
        'disbond_operation_supported': 'bool',
        'hardware': 'Href',
        'virtual_networks': 'list[Href]',
        'connected_port': 'Href',
        'href': 'str'
    }

    attribute_map = {
        'id': 'id',
        'type': 'type',
        'name': 'name',
        'data': 'data',
        'disbond_operation_supported': 'disbond_operation_supported',
        'hardware': 'hardware',
        'virtual_networks': 'virtual_networks',
        'connected_port': 'connected_port',
        'href': 'href'
    }

    def __init__(self, id=None, type=None, name=None, data=None, disbond_operation_supported=None, hardware=None, virtual_networks=None, connected_port=None, href=None, local_vars_configuration=None):  # noqa: E501
        """Port - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._type = None
        self._name = None
        self._data = None
        self._disbond_operation_supported = None
        self._hardware = None
        self._virtual_networks = None
        self._connected_port = None
        self._href = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if type is not None:
            self.type = type
        if name is not None:
            self.name = name
        if data is not None:
            self.data = data
        if disbond_operation_supported is not None:
            self.disbond_operation_supported = disbond_operation_supported
        if hardware is not None:
            self.hardware = hardware
        if virtual_networks is not None:
            self.virtual_networks = virtual_networks
        if connected_port is not None:
            self.connected_port = connected_port
        if href is not None:
            self.href = href

    @property
    def id(self):
        """Gets the id of this Port.  # noqa: E501


        :return: The id of this Port.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Port.


        :param id: The id of this Port.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this Port.  # noqa: E501


        :return: The type of this Port.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Port.


        :param type: The type of this Port.  # noqa: E501
        :type type: str
        """

        self._type = type

    @property
    def name(self):
        """Gets the name of this Port.  # noqa: E501


        :return: The name of this Port.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Port.


        :param name: The name of this Port.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def data(self):
        """Gets the data of this Port.  # noqa: E501


        :return: The data of this Port.  # noqa: E501
        :rtype: object
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this Port.


        :param data: The data of this Port.  # noqa: E501
        :type data: object
        """

        self._data = data

    @property
    def disbond_operation_supported(self):
        """Gets the disbond_operation_supported of this Port.  # noqa: E501

        Indicates whether or not the bond can be broken on the port (when applicable).  # noqa: E501

        :return: The disbond_operation_supported of this Port.  # noqa: E501
        :rtype: bool
        """
        return self._disbond_operation_supported

    @disbond_operation_supported.setter
    def disbond_operation_supported(self, disbond_operation_supported):
        """Sets the disbond_operation_supported of this Port.

        Indicates whether or not the bond can be broken on the port (when applicable).  # noqa: E501

        :param disbond_operation_supported: The disbond_operation_supported of this Port.  # noqa: E501
        :type disbond_operation_supported: bool
        """

        self._disbond_operation_supported = disbond_operation_supported

    @property
    def hardware(self):
        """Gets the hardware of this Port.  # noqa: E501


        :return: The hardware of this Port.  # noqa: E501
        :rtype: Href
        """
        return self._hardware

    @hardware.setter
    def hardware(self, hardware):
        """Sets the hardware of this Port.


        :param hardware: The hardware of this Port.  # noqa: E501
        :type hardware: Href
        """

        self._hardware = hardware

    @property
    def virtual_networks(self):
        """Gets the virtual_networks of this Port.  # noqa: E501


        :return: The virtual_networks of this Port.  # noqa: E501
        :rtype: list[Href]
        """
        return self._virtual_networks

    @virtual_networks.setter
    def virtual_networks(self, virtual_networks):
        """Sets the virtual_networks of this Port.


        :param virtual_networks: The virtual_networks of this Port.  # noqa: E501
        :type virtual_networks: list[Href]
        """

        self._virtual_networks = virtual_networks

    @property
    def connected_port(self):
        """Gets the connected_port of this Port.  # noqa: E501


        :return: The connected_port of this Port.  # noqa: E501
        :rtype: Href
        """
        return self._connected_port

    @connected_port.setter
    def connected_port(self, connected_port):
        """Sets the connected_port of this Port.


        :param connected_port: The connected_port of this Port.  # noqa: E501
        :type connected_port: Href
        """

        self._connected_port = connected_port

    @property
    def href(self):
        """Gets the href of this Port.  # noqa: E501


        :return: The href of this Port.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this Port.


        :param href: The href of this Port.  # noqa: E501
        :type href: str
        """

        self._href = href

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = inspect.getargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Port):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Port):
            return True

        return self.to_dict() != other.to_dict()
