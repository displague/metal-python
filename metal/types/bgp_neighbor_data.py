# coding: utf-8

"""
    Metal API

    This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>.   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@equinixmetal.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from metal.configuration import Configuration


class BgpNeighborData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'address_family': 'float',
        'customer_as': 'float',
        'customer_ip': 'str',
        'md5_enabled': 'bool',
        'md5_password': 'str',
        'multihop': 'bool',
        'peer_as': 'float',
        'peer_ips': 'list[str]',
        'routes_in': 'list[BgpNeighborDataRoutesInInner]',
        'routes_out': 'list[BgpNeighborDataRoutesOutInner]'
    }

    attribute_map = {
        'address_family': 'address_family',
        'customer_as': 'customer_as',
        'customer_ip': 'customer_ip',
        'md5_enabled': 'md5_enabled',
        'md5_password': 'md5_password',
        'multihop': 'multihop',
        'peer_as': 'peer_as',
        'peer_ips': 'peer_ips',
        'routes_in': 'routes_in',
        'routes_out': 'routes_out'
    }

    def __init__(self, address_family=None, customer_as=None, customer_ip=None, md5_enabled=None, md5_password=None, multihop=None, peer_as=None, peer_ips=None, routes_in=None, routes_out=None, local_vars_configuration=None):  # noqa: E501
        """BgpNeighborData - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._address_family = None
        self._customer_as = None
        self._customer_ip = None
        self._md5_enabled = None
        self._md5_password = None
        self._multihop = None
        self._peer_as = None
        self._peer_ips = None
        self._routes_in = None
        self._routes_out = None
        self.discriminator = None

        if address_family is not None:
            self.address_family = address_family
        if customer_as is not None:
            self.customer_as = customer_as
        if customer_ip is not None:
            self.customer_ip = customer_ip
        if md5_enabled is not None:
            self.md5_enabled = md5_enabled
        if md5_password is not None:
            self.md5_password = md5_password
        if multihop is not None:
            self.multihop = multihop
        if peer_as is not None:
            self.peer_as = peer_as
        if peer_ips is not None:
            self.peer_ips = peer_ips
        if routes_in is not None:
            self.routes_in = routes_in
        if routes_out is not None:
            self.routes_out = routes_out

    @property
    def address_family(self):
        """Gets the address_family of this BgpNeighborData.  # noqa: E501

        Address Family for IP Address. Accepted values are 4 or 6  # noqa: E501

        :return: The address_family of this BgpNeighborData.  # noqa: E501
        :rtype: float
        """
        return self._address_family

    @address_family.setter
    def address_family(self, address_family):
        """Sets the address_family of this BgpNeighborData.

        Address Family for IP Address. Accepted values are 4 or 6  # noqa: E501

        :param address_family: The address_family of this BgpNeighborData.  # noqa: E501
        :type address_family: float
        """

        self._address_family = address_family

    @property
    def customer_as(self):
        """Gets the customer_as of this BgpNeighborData.  # noqa: E501

        The customer's ASN. In a local BGP deployment, this will be an internal ASN used to route within the data center. For a global BGP deployment, this will be the your own ASN, configured when you set up BGP for your project.  # noqa: E501

        :return: The customer_as of this BgpNeighborData.  # noqa: E501
        :rtype: float
        """
        return self._customer_as

    @customer_as.setter
    def customer_as(self, customer_as):
        """Sets the customer_as of this BgpNeighborData.

        The customer's ASN. In a local BGP deployment, this will be an internal ASN used to route within the data center. For a global BGP deployment, this will be the your own ASN, configured when you set up BGP for your project.  # noqa: E501

        :param customer_as: The customer_as of this BgpNeighborData.  # noqa: E501
        :type customer_as: float
        """

        self._customer_as = customer_as

    @property
    def customer_ip(self):
        """Gets the customer_ip of this BgpNeighborData.  # noqa: E501

        The device's IP address. For an IPv4 BGP session, this is typically the private bond0 address for the device.  # noqa: E501

        :return: The customer_ip of this BgpNeighborData.  # noqa: E501
        :rtype: str
        """
        return self._customer_ip

    @customer_ip.setter
    def customer_ip(self, customer_ip):
        """Sets the customer_ip of this BgpNeighborData.

        The device's IP address. For an IPv4 BGP session, this is typically the private bond0 address for the device.  # noqa: E501

        :param customer_ip: The customer_ip of this BgpNeighborData.  # noqa: E501
        :type customer_ip: str
        """

        self._customer_ip = customer_ip

    @property
    def md5_enabled(self):
        """Gets the md5_enabled of this BgpNeighborData.  # noqa: E501

        True if an MD5 password is configured for the project.  # noqa: E501

        :return: The md5_enabled of this BgpNeighborData.  # noqa: E501
        :rtype: bool
        """
        return self._md5_enabled

    @md5_enabled.setter
    def md5_enabled(self, md5_enabled):
        """Sets the md5_enabled of this BgpNeighborData.

        True if an MD5 password is configured for the project.  # noqa: E501

        :param md5_enabled: The md5_enabled of this BgpNeighborData.  # noqa: E501
        :type md5_enabled: bool
        """

        self._md5_enabled = md5_enabled

    @property
    def md5_password(self):
        """Gets the md5_password of this BgpNeighborData.  # noqa: E501

        The MD5 password configured for the project, if set.  # noqa: E501

        :return: The md5_password of this BgpNeighborData.  # noqa: E501
        :rtype: str
        """
        return self._md5_password

    @md5_password.setter
    def md5_password(self, md5_password):
        """Sets the md5_password of this BgpNeighborData.

        The MD5 password configured for the project, if set.  # noqa: E501

        :param md5_password: The md5_password of this BgpNeighborData.  # noqa: E501
        :type md5_password: str
        """

        self._md5_password = md5_password

    @property
    def multihop(self):
        """Gets the multihop of this BgpNeighborData.  # noqa: E501

        True when the BGP session should be configured as multihop.  # noqa: E501

        :return: The multihop of this BgpNeighborData.  # noqa: E501
        :rtype: bool
        """
        return self._multihop

    @multihop.setter
    def multihop(self, multihop):
        """Sets the multihop of this BgpNeighborData.

        True when the BGP session should be configured as multihop.  # noqa: E501

        :param multihop: The multihop of this BgpNeighborData.  # noqa: E501
        :type multihop: bool
        """

        self._multihop = multihop

    @property
    def peer_as(self):
        """Gets the peer_as of this BgpNeighborData.  # noqa: E501

        The Peer ASN to use when configuring BGP on your device.  # noqa: E501

        :return: The peer_as of this BgpNeighborData.  # noqa: E501
        :rtype: float
        """
        return self._peer_as

    @peer_as.setter
    def peer_as(self, peer_as):
        """Sets the peer_as of this BgpNeighborData.

        The Peer ASN to use when configuring BGP on your device.  # noqa: E501

        :param peer_as: The peer_as of this BgpNeighborData.  # noqa: E501
        :type peer_as: float
        """

        self._peer_as = peer_as

    @property
    def peer_ips(self):
        """Gets the peer_ips of this BgpNeighborData.  # noqa: E501

        A list of one or more IP addresses to use for the Peer IP section of your BGP configuration. For non-multihop sessions, this will typically be a single gateway address for the device. For multihop sessions, it will be a list of IPs.  # noqa: E501

        :return: The peer_ips of this BgpNeighborData.  # noqa: E501
        :rtype: list[str]
        """
        return self._peer_ips

    @peer_ips.setter
    def peer_ips(self, peer_ips):
        """Sets the peer_ips of this BgpNeighborData.

        A list of one or more IP addresses to use for the Peer IP section of your BGP configuration. For non-multihop sessions, this will typically be a single gateway address for the device. For multihop sessions, it will be a list of IPs.  # noqa: E501

        :param peer_ips: The peer_ips of this BgpNeighborData.  # noqa: E501
        :type peer_ips: list[str]
        """

        self._peer_ips = peer_ips

    @property
    def routes_in(self):
        """Gets the routes_in of this BgpNeighborData.  # noqa: E501

        A list of project subnets  # noqa: E501

        :return: The routes_in of this BgpNeighborData.  # noqa: E501
        :rtype: list[BgpNeighborDataRoutesInInner]
        """
        return self._routes_in

    @routes_in.setter
    def routes_in(self, routes_in):
        """Sets the routes_in of this BgpNeighborData.

        A list of project subnets  # noqa: E501

        :param routes_in: The routes_in of this BgpNeighborData.  # noqa: E501
        :type routes_in: list[BgpNeighborDataRoutesInInner]
        """

        self._routes_in = routes_in

    @property
    def routes_out(self):
        """Gets the routes_out of this BgpNeighborData.  # noqa: E501

        A list of outgoing routes. Only populated if the BGP session has default route enabled.  # noqa: E501

        :return: The routes_out of this BgpNeighborData.  # noqa: E501
        :rtype: list[BgpNeighborDataRoutesOutInner]
        """
        return self._routes_out

    @routes_out.setter
    def routes_out(self, routes_out):
        """Sets the routes_out of this BgpNeighborData.

        A list of outgoing routes. Only populated if the BGP session has default route enabled.  # noqa: E501

        :param routes_out: The routes_out of this BgpNeighborData.  # noqa: E501
        :type routes_out: list[BgpNeighborDataRoutesOutInner]
        """

        self._routes_out = routes_out

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BgpNeighborData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BgpNeighborData):
            return True

        return self.to_dict() != other.to_dict()
