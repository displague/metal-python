# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from metal.types.base_model_ import Model
from metal.types.device_create_input_ip_addresses_inner import DeviceCreateInputIpAddressesInner
from metal.types.facility_input_facility import FacilityInputFacility
from metal.types.ssh_key_input import SSHKeyInput
from metal import util


class DeviceCreateInFacilityInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, facility: FacilityInputFacility=None, always_pxe: bool=False, billing_cycle: str=None, customdata: Dict[str, object]=None, description: str=None, features: List[str]=None, hardware_reservation_id: str='', hostname: str=None, ip_addresses: List[DeviceCreateInputIpAddressesInner]=[{"address_family":4,"public":true},{"address_family":4,"public":false},{"address_family":6,"public":true}], ipxe_script_url: str=None, locked: bool=False, no_ssh_keys: bool=False, operating_system: str=None, plan: str=None, private_ipv4_subnet_size: float=28, project_ssh_keys: List[str]=None, public_ipv4_subnet_size: float=31, spot_instance: bool=None, spot_price_max: float=None, ssh_keys: List[SSHKeyInput]=None, tags: List[str]=None, termination_time: datetime=None, user_ssh_keys: List[str]=None, userdata: str=None):
        """DeviceCreateInFacilityInput - a model defined in OpenAPI

        :param facility: The facility of this DeviceCreateInFacilityInput.
        :param always_pxe: The always_pxe of this DeviceCreateInFacilityInput.
        :param billing_cycle: The billing_cycle of this DeviceCreateInFacilityInput.
        :param customdata: The customdata of this DeviceCreateInFacilityInput.
        :param description: The description of this DeviceCreateInFacilityInput.
        :param features: The features of this DeviceCreateInFacilityInput.
        :param hardware_reservation_id: The hardware_reservation_id of this DeviceCreateInFacilityInput.
        :param hostname: The hostname of this DeviceCreateInFacilityInput.
        :param ip_addresses: The ip_addresses of this DeviceCreateInFacilityInput.
        :param ipxe_script_url: The ipxe_script_url of this DeviceCreateInFacilityInput.
        :param locked: The locked of this DeviceCreateInFacilityInput.
        :param no_ssh_keys: The no_ssh_keys of this DeviceCreateInFacilityInput.
        :param operating_system: The operating_system of this DeviceCreateInFacilityInput.
        :param plan: The plan of this DeviceCreateInFacilityInput.
        :param private_ipv4_subnet_size: The private_ipv4_subnet_size of this DeviceCreateInFacilityInput.
        :param project_ssh_keys: The project_ssh_keys of this DeviceCreateInFacilityInput.
        :param public_ipv4_subnet_size: The public_ipv4_subnet_size of this DeviceCreateInFacilityInput.
        :param spot_instance: The spot_instance of this DeviceCreateInFacilityInput.
        :param spot_price_max: The spot_price_max of this DeviceCreateInFacilityInput.
        :param ssh_keys: The ssh_keys of this DeviceCreateInFacilityInput.
        :param tags: The tags of this DeviceCreateInFacilityInput.
        :param termination_time: The termination_time of this DeviceCreateInFacilityInput.
        :param user_ssh_keys: The user_ssh_keys of this DeviceCreateInFacilityInput.
        :param userdata: The userdata of this DeviceCreateInFacilityInput.
        """
        self.openapi_types = {
            'facility': FacilityInputFacility,
            'always_pxe': bool,
            'billing_cycle': str,
            'customdata': Dict[str, object],
            'description': str,
            'features': List[str],
            'hardware_reservation_id': str,
            'hostname': str,
            'ip_addresses': List[DeviceCreateInputIpAddressesInner],
            'ipxe_script_url': str,
            'locked': bool,
            'no_ssh_keys': bool,
            'operating_system': str,
            'plan': str,
            'private_ipv4_subnet_size': float,
            'project_ssh_keys': List[str],
            'public_ipv4_subnet_size': float,
            'spot_instance': bool,
            'spot_price_max': float,
            'ssh_keys': List[SSHKeyInput],
            'tags': List[str],
            'termination_time': datetime,
            'user_ssh_keys': List[str],
            'userdata': str
        }

        self.attribute_map = {
            'facility': 'facility',
            'always_pxe': 'always_pxe',
            'billing_cycle': 'billing_cycle',
            'customdata': 'customdata',
            'description': 'description',
            'features': 'features',
            'hardware_reservation_id': 'hardware_reservation_id',
            'hostname': 'hostname',
            'ip_addresses': 'ip_addresses',
            'ipxe_script_url': 'ipxe_script_url',
            'locked': 'locked',
            'no_ssh_keys': 'no_ssh_keys',
            'operating_system': 'operating_system',
            'plan': 'plan',
            'private_ipv4_subnet_size': 'private_ipv4_subnet_size',
            'project_ssh_keys': 'project_ssh_keys',
            'public_ipv4_subnet_size': 'public_ipv4_subnet_size',
            'spot_instance': 'spot_instance',
            'spot_price_max': 'spot_price_max',
            'ssh_keys': 'ssh_keys',
            'tags': 'tags',
            'termination_time': 'termination_time',
            'user_ssh_keys': 'user_ssh_keys',
            'userdata': 'userdata'
        }

        self._facility = facility
        self._always_pxe = always_pxe
        self._billing_cycle = billing_cycle
        self._customdata = customdata
        self._description = description
        self._features = features
        self._hardware_reservation_id = hardware_reservation_id
        self._hostname = hostname
        self._ip_addresses = ip_addresses
        self._ipxe_script_url = ipxe_script_url
        self._locked = locked
        self._no_ssh_keys = no_ssh_keys
        self._operating_system = operating_system
        self._plan = plan
        self._private_ipv4_subnet_size = private_ipv4_subnet_size
        self._project_ssh_keys = project_ssh_keys
        self._public_ipv4_subnet_size = public_ipv4_subnet_size
        self._spot_instance = spot_instance
        self._spot_price_max = spot_price_max
        self._ssh_keys = ssh_keys
        self._tags = tags
        self._termination_time = termination_time
        self._user_ssh_keys = user_ssh_keys
        self._userdata = userdata

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeviceCreateInFacilityInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeviceCreateInFacilityInput of this DeviceCreateInFacilityInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def facility(self):
        """Gets the facility of this DeviceCreateInFacilityInput.


        :return: The facility of this DeviceCreateInFacilityInput.
        :rtype: FacilityInputFacility
        """
        return self._facility

    @facility.setter
    def facility(self, facility):
        """Sets the facility of this DeviceCreateInFacilityInput.


        :param facility: The facility of this DeviceCreateInFacilityInput.
        :type facility: FacilityInputFacility
        """
        if facility is None:
            raise ValueError("Invalid value for `facility`, must not be `None`")

        self._facility = facility

    @property
    def always_pxe(self):
        """Gets the always_pxe of this DeviceCreateInFacilityInput.

        When true, devices with a `custom_ipxe` OS will always boot to iPXE. The default setting of false ensures that iPXE will be used on only the first boot.

        :return: The always_pxe of this DeviceCreateInFacilityInput.
        :rtype: bool
        """
        return self._always_pxe

    @always_pxe.setter
    def always_pxe(self, always_pxe):
        """Sets the always_pxe of this DeviceCreateInFacilityInput.

        When true, devices with a `custom_ipxe` OS will always boot to iPXE. The default setting of false ensures that iPXE will be used on only the first boot.

        :param always_pxe: The always_pxe of this DeviceCreateInFacilityInput.
        :type always_pxe: bool
        """

        self._always_pxe = always_pxe

    @property
    def billing_cycle(self):
        """Gets the billing_cycle of this DeviceCreateInFacilityInput.

        The billing cycle of the device.

        :return: The billing_cycle of this DeviceCreateInFacilityInput.
        :rtype: str
        """
        return self._billing_cycle

    @billing_cycle.setter
    def billing_cycle(self, billing_cycle):
        """Sets the billing_cycle of this DeviceCreateInFacilityInput.

        The billing cycle of the device.

        :param billing_cycle: The billing_cycle of this DeviceCreateInFacilityInput.
        :type billing_cycle: str
        """
        allowed_values = ["hourly", "daily", "monthly", "yearly"]  # noqa: E501
        if billing_cycle not in allowed_values:
            raise ValueError(
                "Invalid value for `billing_cycle` ({0}), must be one of {1}"
                .format(billing_cycle, allowed_values)
            )

        self._billing_cycle = billing_cycle

    @property
    def customdata(self):
        """Gets the customdata of this DeviceCreateInFacilityInput.

        Customdata is an arbitrary JSON value that can be accessed via the metadata service.

        :return: The customdata of this DeviceCreateInFacilityInput.
        :rtype: Dict[str, object]
        """
        return self._customdata

    @customdata.setter
    def customdata(self, customdata):
        """Sets the customdata of this DeviceCreateInFacilityInput.

        Customdata is an arbitrary JSON value that can be accessed via the metadata service.

        :param customdata: The customdata of this DeviceCreateInFacilityInput.
        :type customdata: Dict[str, object]
        """

        self._customdata = customdata

    @property
    def description(self):
        """Gets the description of this DeviceCreateInFacilityInput.

        Any description of the device or how it will be used. This may be used to inform other API consumers with project access.

        :return: The description of this DeviceCreateInFacilityInput.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DeviceCreateInFacilityInput.

        Any description of the device or how it will be used. This may be used to inform other API consumers with project access.

        :param description: The description of this DeviceCreateInFacilityInput.
        :type description: str
        """

        self._description = description

    @property
    def features(self):
        """Gets the features of this DeviceCreateInFacilityInput.

        The features attribute allows you to optionally specify what features your server should have.  In the API shorthand syntax, all features listed are `required`:  ``` { \"features\": [\"tpm\"] } ```  Alternatively, if you do not require a certain feature, but would prefer to be assigned a server with that feature if there are any available, you may specify that feature with a `preferred` value. The request will not fail if we have no servers with that feature in our inventory. The API offers an alternative syntax for mixing preferred and required features:  ``` { \"features\": { \"tpm\": \"required\", \"raid\": \"preferred\" } } ```  The request will only fail if there are no available servers matching the required `tpm` criteria.

        :return: The features of this DeviceCreateInFacilityInput.
        :rtype: List[str]
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this DeviceCreateInFacilityInput.

        The features attribute allows you to optionally specify what features your server should have.  In the API shorthand syntax, all features listed are `required`:  ``` { \"features\": [\"tpm\"] } ```  Alternatively, if you do not require a certain feature, but would prefer to be assigned a server with that feature if there are any available, you may specify that feature with a `preferred` value. The request will not fail if we have no servers with that feature in our inventory. The API offers an alternative syntax for mixing preferred and required features:  ``` { \"features\": { \"tpm\": \"required\", \"raid\": \"preferred\" } } ```  The request will only fail if there are no available servers matching the required `tpm` criteria.

        :param features: The features of this DeviceCreateInFacilityInput.
        :type features: List[str]
        """

        self._features = features

    @property
    def hardware_reservation_id(self):
        """Gets the hardware_reservation_id of this DeviceCreateInFacilityInput.

        The Hardware Reservation UUID to provision. Alternatively, `next-available` can be specified to select from any of the available hardware reservations. An error will be returned if the requested reservation option is not available.  See [Reserved Hardware](https://metal.equinix.com/developers/docs/deploy/reserved/) for more details.

        :return: The hardware_reservation_id of this DeviceCreateInFacilityInput.
        :rtype: str
        """
        return self._hardware_reservation_id

    @hardware_reservation_id.setter
    def hardware_reservation_id(self, hardware_reservation_id):
        """Sets the hardware_reservation_id of this DeviceCreateInFacilityInput.

        The Hardware Reservation UUID to provision. Alternatively, `next-available` can be specified to select from any of the available hardware reservations. An error will be returned if the requested reservation option is not available.  See [Reserved Hardware](https://metal.equinix.com/developers/docs/deploy/reserved/) for more details.

        :param hardware_reservation_id: The hardware_reservation_id of this DeviceCreateInFacilityInput.
        :type hardware_reservation_id: str
        """

        self._hardware_reservation_id = hardware_reservation_id

    @property
    def hostname(self):
        """Gets the hostname of this DeviceCreateInFacilityInput.

        The hostname to use within the operating system. The same hostname may be used on multiple devices within a project.

        :return: The hostname of this DeviceCreateInFacilityInput.
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this DeviceCreateInFacilityInput.

        The hostname to use within the operating system. The same hostname may be used on multiple devices within a project.

        :param hostname: The hostname of this DeviceCreateInFacilityInput.
        :type hostname: str
        """

        self._hostname = hostname

    @property
    def ip_addresses(self):
        """Gets the ip_addresses of this DeviceCreateInFacilityInput.

        The `ip_addresses attribute will allow you to specify the addresses you want created with your device.  The default value configures public IPv4, public IPv6, and private IPv4.  Private IPv4 address is required. When specifying `ip_addresses`, one of the array items must enable private IPv4.  Some operating systems require public IPv4 address. In those cases you will receive an error message if public IPv4 is not enabled.  For example, to only configure your server with a private IPv4 address, you can send `{ \"ip_addresses\": [{ \"address_family\": 4, \"public\": false }] }`.  It is possible to request a subnet size larger than a `/30` by assigning addresses using the UUID(s) of ip_reservations in your project.  For example, `{ \"ip_addresses\": [..., {\"address_family\": 4, \"public\": true, \"ip_reservations\": [\"uuid1\", \"uuid2\"]}] }`  To access a server without public IPs, you can use our Out-of-Band console access (SOS) or proxy through another server in the project with public IPs enabled.

        :return: The ip_addresses of this DeviceCreateInFacilityInput.
        :rtype: List[DeviceCreateInputIpAddressesInner]
        """
        return self._ip_addresses

    @ip_addresses.setter
    def ip_addresses(self, ip_addresses):
        """Sets the ip_addresses of this DeviceCreateInFacilityInput.

        The `ip_addresses attribute will allow you to specify the addresses you want created with your device.  The default value configures public IPv4, public IPv6, and private IPv4.  Private IPv4 address is required. When specifying `ip_addresses`, one of the array items must enable private IPv4.  Some operating systems require public IPv4 address. In those cases you will receive an error message if public IPv4 is not enabled.  For example, to only configure your server with a private IPv4 address, you can send `{ \"ip_addresses\": [{ \"address_family\": 4, \"public\": false }] }`.  It is possible to request a subnet size larger than a `/30` by assigning addresses using the UUID(s) of ip_reservations in your project.  For example, `{ \"ip_addresses\": [..., {\"address_family\": 4, \"public\": true, \"ip_reservations\": [\"uuid1\", \"uuid2\"]}] }`  To access a server without public IPs, you can use our Out-of-Band console access (SOS) or proxy through another server in the project with public IPs enabled.

        :param ip_addresses: The ip_addresses of this DeviceCreateInFacilityInput.
        :type ip_addresses: List[DeviceCreateInputIpAddressesInner]
        """

        self._ip_addresses = ip_addresses

    @property
    def ipxe_script_url(self):
        """Gets the ipxe_script_url of this DeviceCreateInFacilityInput.

        When set, the device will chainload an iPXE Script at boot fetched from the supplied URL.  See [Custom iPXE](https://metal.equinix.com/developers/docs/operating-systems/custom-ipxe/) for more details.

        :return: The ipxe_script_url of this DeviceCreateInFacilityInput.
        :rtype: str
        """
        return self._ipxe_script_url

    @ipxe_script_url.setter
    def ipxe_script_url(self, ipxe_script_url):
        """Sets the ipxe_script_url of this DeviceCreateInFacilityInput.

        When set, the device will chainload an iPXE Script at boot fetched from the supplied URL.  See [Custom iPXE](https://metal.equinix.com/developers/docs/operating-systems/custom-ipxe/) for more details.

        :param ipxe_script_url: The ipxe_script_url of this DeviceCreateInFacilityInput.
        :type ipxe_script_url: str
        """

        self._ipxe_script_url = ipxe_script_url

    @property
    def locked(self):
        """Gets the locked of this DeviceCreateInFacilityInput.

        Whether the device should be locked, preventing accidental deletion.

        :return: The locked of this DeviceCreateInFacilityInput.
        :rtype: bool
        """
        return self._locked

    @locked.setter
    def locked(self, locked):
        """Sets the locked of this DeviceCreateInFacilityInput.

        Whether the device should be locked, preventing accidental deletion.

        :param locked: The locked of this DeviceCreateInFacilityInput.
        :type locked: bool
        """

        self._locked = locked

    @property
    def no_ssh_keys(self):
        """Gets the no_ssh_keys of this DeviceCreateInFacilityInput.

        Overrides default behaviour of attaching all of the organization members ssh keys and project ssh keys to device if no specific keys specified

        :return: The no_ssh_keys of this DeviceCreateInFacilityInput.
        :rtype: bool
        """
        return self._no_ssh_keys

    @no_ssh_keys.setter
    def no_ssh_keys(self, no_ssh_keys):
        """Sets the no_ssh_keys of this DeviceCreateInFacilityInput.

        Overrides default behaviour of attaching all of the organization members ssh keys and project ssh keys to device if no specific keys specified

        :param no_ssh_keys: The no_ssh_keys of this DeviceCreateInFacilityInput.
        :type no_ssh_keys: bool
        """

        self._no_ssh_keys = no_ssh_keys

    @property
    def operating_system(self):
        """Gets the operating_system of this DeviceCreateInFacilityInput.

        The slug of the operating system to provision. Check the Equinix Metal operating system documentation for rules that may be imposed per operating system, including restrictions on IP address options and device plans.

        :return: The operating_system of this DeviceCreateInFacilityInput.
        :rtype: str
        """
        return self._operating_system

    @operating_system.setter
    def operating_system(self, operating_system):
        """Sets the operating_system of this DeviceCreateInFacilityInput.

        The slug of the operating system to provision. Check the Equinix Metal operating system documentation for rules that may be imposed per operating system, including restrictions on IP address options and device plans.

        :param operating_system: The operating_system of this DeviceCreateInFacilityInput.
        :type operating_system: str
        """
        if operating_system is None:
            raise ValueError("Invalid value for `operating_system`, must not be `None`")

        self._operating_system = operating_system

    @property
    def plan(self):
        """Gets the plan of this DeviceCreateInFacilityInput.

        The slug of the device plan to provision.

        :return: The plan of this DeviceCreateInFacilityInput.
        :rtype: str
        """
        return self._plan

    @plan.setter
    def plan(self, plan):
        """Sets the plan of this DeviceCreateInFacilityInput.

        The slug of the device plan to provision.

        :param plan: The plan of this DeviceCreateInFacilityInput.
        :type plan: str
        """
        if plan is None:
            raise ValueError("Invalid value for `plan`, must not be `None`")

        self._plan = plan

    @property
    def private_ipv4_subnet_size(self):
        """Gets the private_ipv4_subnet_size of this DeviceCreateInFacilityInput.

        Deprecated. Use ip_addresses. Subnet range for addresses allocated to this device.

        :return: The private_ipv4_subnet_size of this DeviceCreateInFacilityInput.
        :rtype: float
        """
        return self._private_ipv4_subnet_size

    @private_ipv4_subnet_size.setter
    def private_ipv4_subnet_size(self, private_ipv4_subnet_size):
        """Sets the private_ipv4_subnet_size of this DeviceCreateInFacilityInput.

        Deprecated. Use ip_addresses. Subnet range for addresses allocated to this device.

        :param private_ipv4_subnet_size: The private_ipv4_subnet_size of this DeviceCreateInFacilityInput.
        :type private_ipv4_subnet_size: float
        """

        self._private_ipv4_subnet_size = private_ipv4_subnet_size

    @property
    def project_ssh_keys(self):
        """Gets the project_ssh_keys of this DeviceCreateInFacilityInput.

        A list of UUIDs identifying the device parent project that should be authorized to access this device (typically via /root/.ssh/authorized_keys). These keys will also appear in the device metadata.  If no SSH keys are specified (`user_ssh_keys`, `project_ssh_keys`, and `ssh_keys` are all empty lists or omitted), all parent project keys, parent project members keys and organization members keys will be included. This behaviour can be changed with 'no_ssh_keys' option to omit any SSH key being added. 

        :return: The project_ssh_keys of this DeviceCreateInFacilityInput.
        :rtype: List[str]
        """
        return self._project_ssh_keys

    @project_ssh_keys.setter
    def project_ssh_keys(self, project_ssh_keys):
        """Sets the project_ssh_keys of this DeviceCreateInFacilityInput.

        A list of UUIDs identifying the device parent project that should be authorized to access this device (typically via /root/.ssh/authorized_keys). These keys will also appear in the device metadata.  If no SSH keys are specified (`user_ssh_keys`, `project_ssh_keys`, and `ssh_keys` are all empty lists or omitted), all parent project keys, parent project members keys and organization members keys will be included. This behaviour can be changed with 'no_ssh_keys' option to omit any SSH key being added. 

        :param project_ssh_keys: The project_ssh_keys of this DeviceCreateInFacilityInput.
        :type project_ssh_keys: List[str]
        """

        self._project_ssh_keys = project_ssh_keys

    @property
    def public_ipv4_subnet_size(self):
        """Gets the public_ipv4_subnet_size of this DeviceCreateInFacilityInput.

        Deprecated. Use ip_addresses. Subnet range for addresses allocated to this device. Your project must have addresses available for a non-default request.

        :return: The public_ipv4_subnet_size of this DeviceCreateInFacilityInput.
        :rtype: float
        """
        return self._public_ipv4_subnet_size

    @public_ipv4_subnet_size.setter
    def public_ipv4_subnet_size(self, public_ipv4_subnet_size):
        """Sets the public_ipv4_subnet_size of this DeviceCreateInFacilityInput.

        Deprecated. Use ip_addresses. Subnet range for addresses allocated to this device. Your project must have addresses available for a non-default request.

        :param public_ipv4_subnet_size: The public_ipv4_subnet_size of this DeviceCreateInFacilityInput.
        :type public_ipv4_subnet_size: float
        """

        self._public_ipv4_subnet_size = public_ipv4_subnet_size

    @property
    def spot_instance(self):
        """Gets the spot_instance of this DeviceCreateInFacilityInput.

        Create a spot instance. Spot instances are created with a maximum bid price. If the bid price is not met, the spot instance will be terminated as indicated by the `termination_time` field.

        :return: The spot_instance of this DeviceCreateInFacilityInput.
        :rtype: bool
        """
        return self._spot_instance

    @spot_instance.setter
    def spot_instance(self, spot_instance):
        """Sets the spot_instance of this DeviceCreateInFacilityInput.

        Create a spot instance. Spot instances are created with a maximum bid price. If the bid price is not met, the spot instance will be terminated as indicated by the `termination_time` field.

        :param spot_instance: The spot_instance of this DeviceCreateInFacilityInput.
        :type spot_instance: bool
        """

        self._spot_instance = spot_instance

    @property
    def spot_price_max(self):
        """Gets the spot_price_max of this DeviceCreateInFacilityInput.

        The maximum amount to bid for a spot instance.

        :return: The spot_price_max of this DeviceCreateInFacilityInput.
        :rtype: float
        """
        return self._spot_price_max

    @spot_price_max.setter
    def spot_price_max(self, spot_price_max):
        """Sets the spot_price_max of this DeviceCreateInFacilityInput.

        The maximum amount to bid for a spot instance.

        :param spot_price_max: The spot_price_max of this DeviceCreateInFacilityInput.
        :type spot_price_max: float
        """

        self._spot_price_max = spot_price_max

    @property
    def ssh_keys(self):
        """Gets the ssh_keys of this DeviceCreateInFacilityInput.

        A list of new or existing project ssh_keys that should be authorized to access this device (typically via /root/.ssh/authorized_keys). These keys will also appear in the device metadata.  These keys are added in addition to any keys defined by   `project_ssh_keys` and `user_ssh_keys`. 

        :return: The ssh_keys of this DeviceCreateInFacilityInput.
        :rtype: List[SSHKeyInput]
        """
        return self._ssh_keys

    @ssh_keys.setter
    def ssh_keys(self, ssh_keys):
        """Sets the ssh_keys of this DeviceCreateInFacilityInput.

        A list of new or existing project ssh_keys that should be authorized to access this device (typically via /root/.ssh/authorized_keys). These keys will also appear in the device metadata.  These keys are added in addition to any keys defined by   `project_ssh_keys` and `user_ssh_keys`. 

        :param ssh_keys: The ssh_keys of this DeviceCreateInFacilityInput.
        :type ssh_keys: List[SSHKeyInput]
        """

        self._ssh_keys = ssh_keys

    @property
    def tags(self):
        """Gets the tags of this DeviceCreateInFacilityInput.


        :return: The tags of this DeviceCreateInFacilityInput.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this DeviceCreateInFacilityInput.


        :param tags: The tags of this DeviceCreateInFacilityInput.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def termination_time(self):
        """Gets the termination_time of this DeviceCreateInFacilityInput.


        :return: The termination_time of this DeviceCreateInFacilityInput.
        :rtype: datetime
        """
        return self._termination_time

    @termination_time.setter
    def termination_time(self, termination_time):
        """Sets the termination_time of this DeviceCreateInFacilityInput.


        :param termination_time: The termination_time of this DeviceCreateInFacilityInput.
        :type termination_time: datetime
        """

        self._termination_time = termination_time

    @property
    def user_ssh_keys(self):
        """Gets the user_ssh_keys of this DeviceCreateInFacilityInput.

        A list of UUIDs identifying the users that should be authorized to access this device (typically via /root/.ssh/authorized_keys).  These keys will also appear in the device metadata.  The users must be members of the project or organization.  If no SSH keys are specified (`user_ssh_keys`, `project_ssh_keys`, and `ssh_keys` are all empty lists or omitted), all parent project keys, parent project members keys and organization members keys will be included. This behaviour can be changed with 'no_ssh_keys' option to omit any SSH key being added. 

        :return: The user_ssh_keys of this DeviceCreateInFacilityInput.
        :rtype: List[str]
        """
        return self._user_ssh_keys

    @user_ssh_keys.setter
    def user_ssh_keys(self, user_ssh_keys):
        """Sets the user_ssh_keys of this DeviceCreateInFacilityInput.

        A list of UUIDs identifying the users that should be authorized to access this device (typically via /root/.ssh/authorized_keys).  These keys will also appear in the device metadata.  The users must be members of the project or organization.  If no SSH keys are specified (`user_ssh_keys`, `project_ssh_keys`, and `ssh_keys` are all empty lists or omitted), all parent project keys, parent project members keys and organization members keys will be included. This behaviour can be changed with 'no_ssh_keys' option to omit any SSH key being added. 

        :param user_ssh_keys: The user_ssh_keys of this DeviceCreateInFacilityInput.
        :type user_ssh_keys: List[str]
        """

        self._user_ssh_keys = user_ssh_keys

    @property
    def userdata(self):
        """Gets the userdata of this DeviceCreateInFacilityInput.

        The userdata presented in the metadata service for this device.  Userdata is fetched and interpreted by the operating system installed on the device. Acceptable formats are determined by the operating system, with the exception of a special iPXE enabling syntax which is handled before the operating system starts.  See [Server User Data](https://metal.equinix.com/developers/docs/servers/user-data/) and [Provisioning with Custom iPXE](https://metal.equinix.com/developers/docs/operating-systems/custom-ipxe/#provisioning-with-custom-ipxe) for more details.

        :return: The userdata of this DeviceCreateInFacilityInput.
        :rtype: str
        """
        return self._userdata

    @userdata.setter
    def userdata(self, userdata):
        """Sets the userdata of this DeviceCreateInFacilityInput.

        The userdata presented in the metadata service for this device.  Userdata is fetched and interpreted by the operating system installed on the device. Acceptable formats are determined by the operating system, with the exception of a special iPXE enabling syntax which is handled before the operating system starts.  See [Server User Data](https://metal.equinix.com/developers/docs/servers/user-data/) and [Provisioning with Custom iPXE](https://metal.equinix.com/developers/docs/operating-systems/custom-ipxe/#provisioning-with-custom-ipxe) for more details.

        :param userdata: The userdata of this DeviceCreateInFacilityInput.
        :type userdata: str
        """

        self._userdata = userdata
