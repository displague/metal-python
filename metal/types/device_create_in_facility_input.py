# coding: utf-8

"""
    Metal API

    # Introduction Equinix Metal provides a RESTful HTTP API which can be reached at <https://api.equinix.com/metal/v1>. This document describes the API and how to use it.  The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account. Every feature of the Equinix Metal web interface is accessible through the API.  The API docs are generated from the Equinix Metal OpenAPI specification and are officially hosted at <https://metal.equinix.com/developers/api>.  # Common Parameters  The Equinix Metal API uses a few methods to minimize network traffic and improve throughput. These parameters are not used in all API calls, but are used often enough to warrant their own section. Look for these parameters in the documentation for the API calls that support them.  ## Pagination  Pagination is used to limit the number of results returned in a single request. The API will return a maximum of 100 results per page. To retrieve additional results, you can use the `page` and `per_page` query parameters.  The `page` parameter is used to specify the page number. The first page is `1`. The `per_page` parameter is used to specify the number of results per page. The maximum number of results differs by resource type.  ## Sorting  Where offered, the API allows you to sort results by a specific field. To sort results use the `sort_by` query parameter with the root level field name as the value. The `sort_direction` parameter is used to specify the sort direction, either either `asc` (ascending) or `desc` (descending).  ## Filtering  Filtering is used to limit the results returned in a single request. The API supports filtering by certain fields in the response. To filter results, you can use the field as a query parameter.  For example, to filter the IP list to only return public IPv4 addresses, you can filter by the `type` field, as in the following request:  ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/projects/id/ips?type=public_ipv4 ```  Only IP addresses with the `type` field set to `public_ipv4` will be returned.  ## Searching  Searching is used to find matching resources using multiple field comparissons. The API supports searching in resources that define this behavior. The fields available for search differ by resource, as does the search strategy.  To search resources you can use the `search` query parameter.  ## Include and Exclude  For resources that contain references to other resources, sucha as a Device that refers to the Project it resides in, the Equinix Metal API will returns `href` values (API links) to the associated resource.  ```json {   ...   \"project\": {     \"href\": \"/metal/v1/projects/f3f131c8-f302-49ef-8c44-9405022dc6dd\"   } } ```  If you're going need the project details, you can avoid a second API request.  Specify the contained `href` resources and collections that you'd like to have included in the response using the `include` query parameter.  For example:  ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/user?include=projects ```  The `include` parameter is generally accepted in `GET`, `POST`, `PUT`, and `PATCH` requests where `href` resources are presented.  To have multiple resources include, use a comma-separated list (e.g. `?include=emails,projects,memberships`).  ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/user?include=emails,projects,memberships ```  You may also include nested associations up to three levels deep using dot notation (`?include=memberships.projects`):  ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/user?include=memberships.projects ```  To exclude resources, and optimize response delivery, use the `exclude` query parameter. The `exclude` parameter is generally accepted in `GET`, `POST`, `PUT`, and `PATCH` requests for fields with nested object responses. When excluded, these fields will be replaced with an object that contains only an `href` field.   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@equinixmetal.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from metal.configuration import Configuration


class DeviceCreateInFacilityInput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'facility': 'FacilityInputFacility',
        'always_pxe': 'bool',
        'billing_cycle': 'str',
        'customdata': 'dict[str, object]',
        'description': 'str',
        'features': 'list[str]',
        'hardware_reservation_id': 'str',
        'hostname': 'str',
        'ip_addresses': 'list[DeviceCreateInputIpAddressesInner]',
        'ipxe_script_url': 'str',
        'locked': 'bool',
        'no_ssh_keys': 'bool',
        'operating_system': 'str',
        'plan': 'str',
        'private_ipv4_subnet_size': 'float',
        'project_ssh_keys': 'list[str]',
        'public_ipv4_subnet_size': 'float',
        'spot_instance': 'bool',
        'spot_price_max': 'float',
        'ssh_keys': 'list[SSHKeyInput]',
        'tags': 'list[str]',
        'termination_time': 'datetime',
        'user_ssh_keys': 'list[str]',
        'userdata': 'str'
    }

    attribute_map = {
        'facility': 'facility',
        'always_pxe': 'always_pxe',
        'billing_cycle': 'billing_cycle',
        'customdata': 'customdata',
        'description': 'description',
        'features': 'features',
        'hardware_reservation_id': 'hardware_reservation_id',
        'hostname': 'hostname',
        'ip_addresses': 'ip_addresses',
        'ipxe_script_url': 'ipxe_script_url',
        'locked': 'locked',
        'no_ssh_keys': 'no_ssh_keys',
        'operating_system': 'operating_system',
        'plan': 'plan',
        'private_ipv4_subnet_size': 'private_ipv4_subnet_size',
        'project_ssh_keys': 'project_ssh_keys',
        'public_ipv4_subnet_size': 'public_ipv4_subnet_size',
        'spot_instance': 'spot_instance',
        'spot_price_max': 'spot_price_max',
        'ssh_keys': 'ssh_keys',
        'tags': 'tags',
        'termination_time': 'termination_time',
        'user_ssh_keys': 'user_ssh_keys',
        'userdata': 'userdata'
    }

    def __init__(self, facility=None, always_pxe=False, billing_cycle=None, customdata=None, description=None, features=None, hardware_reservation_id='', hostname=None, ip_addresses=[{"address_family":4,"public":true},{"address_family":4,"public":false},{"address_family":6,"public":true}], ipxe_script_url=None, locked=False, no_ssh_keys=False, operating_system=None, plan=None, private_ipv4_subnet_size=28, project_ssh_keys=None, public_ipv4_subnet_size=31, spot_instance=None, spot_price_max=None, ssh_keys=None, tags=None, termination_time=None, user_ssh_keys=None, userdata=None, local_vars_configuration=None):  # noqa: E501
        """DeviceCreateInFacilityInput - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._facility = None
        self._always_pxe = None
        self._billing_cycle = None
        self._customdata = None
        self._description = None
        self._features = None
        self._hardware_reservation_id = None
        self._hostname = None
        self._ip_addresses = None
        self._ipxe_script_url = None
        self._locked = None
        self._no_ssh_keys = None
        self._operating_system = None
        self._plan = None
        self._private_ipv4_subnet_size = None
        self._project_ssh_keys = None
        self._public_ipv4_subnet_size = None
        self._spot_instance = None
        self._spot_price_max = None
        self._ssh_keys = None
        self._tags = None
        self._termination_time = None
        self._user_ssh_keys = None
        self._userdata = None
        self.discriminator = None

        self.facility = facility
        if always_pxe is not None:
            self.always_pxe = always_pxe
        if billing_cycle is not None:
            self.billing_cycle = billing_cycle
        if customdata is not None:
            self.customdata = customdata
        if description is not None:
            self.description = description
        if features is not None:
            self.features = features
        if hardware_reservation_id is not None:
            self.hardware_reservation_id = hardware_reservation_id
        if hostname is not None:
            self.hostname = hostname
        if ip_addresses is not None:
            self.ip_addresses = ip_addresses
        if ipxe_script_url is not None:
            self.ipxe_script_url = ipxe_script_url
        if locked is not None:
            self.locked = locked
        if no_ssh_keys is not None:
            self.no_ssh_keys = no_ssh_keys
        self.operating_system = operating_system
        self.plan = plan
        if private_ipv4_subnet_size is not None:
            self.private_ipv4_subnet_size = private_ipv4_subnet_size
        if project_ssh_keys is not None:
            self.project_ssh_keys = project_ssh_keys
        if public_ipv4_subnet_size is not None:
            self.public_ipv4_subnet_size = public_ipv4_subnet_size
        if spot_instance is not None:
            self.spot_instance = spot_instance
        if spot_price_max is not None:
            self.spot_price_max = spot_price_max
        if ssh_keys is not None:
            self.ssh_keys = ssh_keys
        if tags is not None:
            self.tags = tags
        if termination_time is not None:
            self.termination_time = termination_time
        if user_ssh_keys is not None:
            self.user_ssh_keys = user_ssh_keys
        if userdata is not None:
            self.userdata = userdata

    @property
    def facility(self):
        """Gets the facility of this DeviceCreateInFacilityInput.  # noqa: E501


        :return: The facility of this DeviceCreateInFacilityInput.  # noqa: E501
        :rtype: FacilityInputFacility
        """
        return self._facility

    @facility.setter
    def facility(self, facility):
        """Sets the facility of this DeviceCreateInFacilityInput.


        :param facility: The facility of this DeviceCreateInFacilityInput.  # noqa: E501
        :type facility: FacilityInputFacility
        """
        if self.local_vars_configuration.client_side_validation and facility is None:  # noqa: E501
            raise ValueError("Invalid value for `facility`, must not be `None`")  # noqa: E501

        self._facility = facility

    @property
    def always_pxe(self):
        """Gets the always_pxe of this DeviceCreateInFacilityInput.  # noqa: E501

        When true, devices with a `custom_ipxe` OS will always boot to iPXE. The default setting of false ensures that iPXE will be used on only the first boot.  # noqa: E501

        :return: The always_pxe of this DeviceCreateInFacilityInput.  # noqa: E501
        :rtype: bool
        """
        return self._always_pxe

    @always_pxe.setter
    def always_pxe(self, always_pxe):
        """Sets the always_pxe of this DeviceCreateInFacilityInput.

        When true, devices with a `custom_ipxe` OS will always boot to iPXE. The default setting of false ensures that iPXE will be used on only the first boot.  # noqa: E501

        :param always_pxe: The always_pxe of this DeviceCreateInFacilityInput.  # noqa: E501
        :type always_pxe: bool
        """

        self._always_pxe = always_pxe

    @property
    def billing_cycle(self):
        """Gets the billing_cycle of this DeviceCreateInFacilityInput.  # noqa: E501

        The billing cycle of the device.  # noqa: E501

        :return: The billing_cycle of this DeviceCreateInFacilityInput.  # noqa: E501
        :rtype: str
        """
        return self._billing_cycle

    @billing_cycle.setter
    def billing_cycle(self, billing_cycle):
        """Sets the billing_cycle of this DeviceCreateInFacilityInput.

        The billing cycle of the device.  # noqa: E501

        :param billing_cycle: The billing_cycle of this DeviceCreateInFacilityInput.  # noqa: E501
        :type billing_cycle: str
        """
        allowed_values = ["hourly", "daily", "monthly", "yearly"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and billing_cycle not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `billing_cycle` ({0}), must be one of {1}"  # noqa: E501
                .format(billing_cycle, allowed_values)
            )

        self._billing_cycle = billing_cycle

    @property
    def customdata(self):
        """Gets the customdata of this DeviceCreateInFacilityInput.  # noqa: E501

        Customdata is an arbitrary JSON value that can be accessed via the metadata service.  # noqa: E501

        :return: The customdata of this DeviceCreateInFacilityInput.  # noqa: E501
        :rtype: dict[str, object]
        """
        return self._customdata

    @customdata.setter
    def customdata(self, customdata):
        """Sets the customdata of this DeviceCreateInFacilityInput.

        Customdata is an arbitrary JSON value that can be accessed via the metadata service.  # noqa: E501

        :param customdata: The customdata of this DeviceCreateInFacilityInput.  # noqa: E501
        :type customdata: dict[str, object]
        """

        self._customdata = customdata

    @property
    def description(self):
        """Gets the description of this DeviceCreateInFacilityInput.  # noqa: E501

        Any description of the device or how it will be used. This may be used to inform other API consumers with project access.  # noqa: E501

        :return: The description of this DeviceCreateInFacilityInput.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DeviceCreateInFacilityInput.

        Any description of the device or how it will be used. This may be used to inform other API consumers with project access.  # noqa: E501

        :param description: The description of this DeviceCreateInFacilityInput.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def features(self):
        """Gets the features of this DeviceCreateInFacilityInput.  # noqa: E501

        The features attribute allows you to optionally specify what features your server should have.  In the API shorthand syntax, all features listed are `required`:  ``` { \"features\": [\"tpm\"] } ```  Alternatively, if you do not require a certain feature, but would prefer to be assigned a server with that feature if there are any available, you may specify that feature with a `preferred` value. The request will not fail if we have no servers with that feature in our inventory. The API offers an alternative syntax for mixing preferred and required features:  ``` { \"features\": { \"tpm\": \"required\", \"raid\": \"preferred\" } } ```  The request will only fail if there are no available servers matching the required `tpm` criteria.  # noqa: E501

        :return: The features of this DeviceCreateInFacilityInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this DeviceCreateInFacilityInput.

        The features attribute allows you to optionally specify what features your server should have.  In the API shorthand syntax, all features listed are `required`:  ``` { \"features\": [\"tpm\"] } ```  Alternatively, if you do not require a certain feature, but would prefer to be assigned a server with that feature if there are any available, you may specify that feature with a `preferred` value. The request will not fail if we have no servers with that feature in our inventory. The API offers an alternative syntax for mixing preferred and required features:  ``` { \"features\": { \"tpm\": \"required\", \"raid\": \"preferred\" } } ```  The request will only fail if there are no available servers matching the required `tpm` criteria.  # noqa: E501

        :param features: The features of this DeviceCreateInFacilityInput.  # noqa: E501
        :type features: list[str]
        """

        self._features = features

    @property
    def hardware_reservation_id(self):
        """Gets the hardware_reservation_id of this DeviceCreateInFacilityInput.  # noqa: E501

        The Hardware Reservation UUID to provision. Alternatively, `next-available` can be specified to select from any of the available hardware reservations. An error will be returned if the requested reservation option is not available.  See [Reserved Hardware](https://metal.equinix.com/developers/docs/deploy/reserved/) for more details.  # noqa: E501

        :return: The hardware_reservation_id of this DeviceCreateInFacilityInput.  # noqa: E501
        :rtype: str
        """
        return self._hardware_reservation_id

    @hardware_reservation_id.setter
    def hardware_reservation_id(self, hardware_reservation_id):
        """Sets the hardware_reservation_id of this DeviceCreateInFacilityInput.

        The Hardware Reservation UUID to provision. Alternatively, `next-available` can be specified to select from any of the available hardware reservations. An error will be returned if the requested reservation option is not available.  See [Reserved Hardware](https://metal.equinix.com/developers/docs/deploy/reserved/) for more details.  # noqa: E501

        :param hardware_reservation_id: The hardware_reservation_id of this DeviceCreateInFacilityInput.  # noqa: E501
        :type hardware_reservation_id: str
        """

        self._hardware_reservation_id = hardware_reservation_id

    @property
    def hostname(self):
        """Gets the hostname of this DeviceCreateInFacilityInput.  # noqa: E501

        The hostname to use within the operating system. The same hostname may be used on multiple devices within a project.  # noqa: E501

        :return: The hostname of this DeviceCreateInFacilityInput.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this DeviceCreateInFacilityInput.

        The hostname to use within the operating system. The same hostname may be used on multiple devices within a project.  # noqa: E501

        :param hostname: The hostname of this DeviceCreateInFacilityInput.  # noqa: E501
        :type hostname: str
        """

        self._hostname = hostname

    @property
    def ip_addresses(self):
        """Gets the ip_addresses of this DeviceCreateInFacilityInput.  # noqa: E501

        The `ip_addresses attribute will allow you to specify the addresses you want created with your device.  The default value configures public IPv4, public IPv6, and private IPv4.  Private IPv4 address is required. When specifying `ip_addresses`, one of the array items must enable private IPv4.  Some operating systems require public IPv4 address. In those cases you will receive an error message if public IPv4 is not enabled.  For example, to only configure your server with a private IPv4 address, you can send `{ \"ip_addresses\": [{ \"address_family\": 4, \"public\": false }] }`.  It is possible to request a subnet size larger than a `/30` by assigning addresses using the UUID(s) of ip_reservations in your project.  For example, `{ \"ip_addresses\": [..., {\"address_family\": 4, \"public\": true, \"ip_reservations\": [\"uuid1\", \"uuid2\"]}] }`  To access a server without public IPs, you can use our Out-of-Band console access (SOS) or proxy through another server in the project with public IPs enabled.  # noqa: E501

        :return: The ip_addresses of this DeviceCreateInFacilityInput.  # noqa: E501
        :rtype: list[DeviceCreateInputIpAddressesInner]
        """
        return self._ip_addresses

    @ip_addresses.setter
    def ip_addresses(self, ip_addresses):
        """Sets the ip_addresses of this DeviceCreateInFacilityInput.

        The `ip_addresses attribute will allow you to specify the addresses you want created with your device.  The default value configures public IPv4, public IPv6, and private IPv4.  Private IPv4 address is required. When specifying `ip_addresses`, one of the array items must enable private IPv4.  Some operating systems require public IPv4 address. In those cases you will receive an error message if public IPv4 is not enabled.  For example, to only configure your server with a private IPv4 address, you can send `{ \"ip_addresses\": [{ \"address_family\": 4, \"public\": false }] }`.  It is possible to request a subnet size larger than a `/30` by assigning addresses using the UUID(s) of ip_reservations in your project.  For example, `{ \"ip_addresses\": [..., {\"address_family\": 4, \"public\": true, \"ip_reservations\": [\"uuid1\", \"uuid2\"]}] }`  To access a server without public IPs, you can use our Out-of-Band console access (SOS) or proxy through another server in the project with public IPs enabled.  # noqa: E501

        :param ip_addresses: The ip_addresses of this DeviceCreateInFacilityInput.  # noqa: E501
        :type ip_addresses: list[DeviceCreateInputIpAddressesInner]
        """

        self._ip_addresses = ip_addresses

    @property
    def ipxe_script_url(self):
        """Gets the ipxe_script_url of this DeviceCreateInFacilityInput.  # noqa: E501

        When set, the device will chainload an iPXE Script at boot fetched from the supplied URL.  See [Custom iPXE](https://metal.equinix.com/developers/docs/operating-systems/custom-ipxe/) for more details.  # noqa: E501

        :return: The ipxe_script_url of this DeviceCreateInFacilityInput.  # noqa: E501
        :rtype: str
        """
        return self._ipxe_script_url

    @ipxe_script_url.setter
    def ipxe_script_url(self, ipxe_script_url):
        """Sets the ipxe_script_url of this DeviceCreateInFacilityInput.

        When set, the device will chainload an iPXE Script at boot fetched from the supplied URL.  See [Custom iPXE](https://metal.equinix.com/developers/docs/operating-systems/custom-ipxe/) for more details.  # noqa: E501

        :param ipxe_script_url: The ipxe_script_url of this DeviceCreateInFacilityInput.  # noqa: E501
        :type ipxe_script_url: str
        """

        self._ipxe_script_url = ipxe_script_url

    @property
    def locked(self):
        """Gets the locked of this DeviceCreateInFacilityInput.  # noqa: E501

        Whether the device should be locked, preventing accidental deletion.  # noqa: E501

        :return: The locked of this DeviceCreateInFacilityInput.  # noqa: E501
        :rtype: bool
        """
        return self._locked

    @locked.setter
    def locked(self, locked):
        """Sets the locked of this DeviceCreateInFacilityInput.

        Whether the device should be locked, preventing accidental deletion.  # noqa: E501

        :param locked: The locked of this DeviceCreateInFacilityInput.  # noqa: E501
        :type locked: bool
        """

        self._locked = locked

    @property
    def no_ssh_keys(self):
        """Gets the no_ssh_keys of this DeviceCreateInFacilityInput.  # noqa: E501

        Overrides default behaviour of attaching all of the organization members ssh keys and project ssh keys to device if no specific keys specified  # noqa: E501

        :return: The no_ssh_keys of this DeviceCreateInFacilityInput.  # noqa: E501
        :rtype: bool
        """
        return self._no_ssh_keys

    @no_ssh_keys.setter
    def no_ssh_keys(self, no_ssh_keys):
        """Sets the no_ssh_keys of this DeviceCreateInFacilityInput.

        Overrides default behaviour of attaching all of the organization members ssh keys and project ssh keys to device if no specific keys specified  # noqa: E501

        :param no_ssh_keys: The no_ssh_keys of this DeviceCreateInFacilityInput.  # noqa: E501
        :type no_ssh_keys: bool
        """

        self._no_ssh_keys = no_ssh_keys

    @property
    def operating_system(self):
        """Gets the operating_system of this DeviceCreateInFacilityInput.  # noqa: E501

        The slug of the operating system to provision. Check the Equinix Metal operating system documentation for rules that may be imposed per operating system, including restrictions on IP address options and device plans.  # noqa: E501

        :return: The operating_system of this DeviceCreateInFacilityInput.  # noqa: E501
        :rtype: str
        """
        return self._operating_system

    @operating_system.setter
    def operating_system(self, operating_system):
        """Sets the operating_system of this DeviceCreateInFacilityInput.

        The slug of the operating system to provision. Check the Equinix Metal operating system documentation for rules that may be imposed per operating system, including restrictions on IP address options and device plans.  # noqa: E501

        :param operating_system: The operating_system of this DeviceCreateInFacilityInput.  # noqa: E501
        :type operating_system: str
        """
        if self.local_vars_configuration.client_side_validation and operating_system is None:  # noqa: E501
            raise ValueError("Invalid value for `operating_system`, must not be `None`")  # noqa: E501

        self._operating_system = operating_system

    @property
    def plan(self):
        """Gets the plan of this DeviceCreateInFacilityInput.  # noqa: E501

        The slug of the device plan to provision.  # noqa: E501

        :return: The plan of this DeviceCreateInFacilityInput.  # noqa: E501
        :rtype: str
        """
        return self._plan

    @plan.setter
    def plan(self, plan):
        """Sets the plan of this DeviceCreateInFacilityInput.

        The slug of the device plan to provision.  # noqa: E501

        :param plan: The plan of this DeviceCreateInFacilityInput.  # noqa: E501
        :type plan: str
        """
        if self.local_vars_configuration.client_side_validation and plan is None:  # noqa: E501
            raise ValueError("Invalid value for `plan`, must not be `None`")  # noqa: E501

        self._plan = plan

    @property
    def private_ipv4_subnet_size(self):
        """Gets the private_ipv4_subnet_size of this DeviceCreateInFacilityInput.  # noqa: E501

        Deprecated. Use ip_addresses. Subnet range for addresses allocated to this device.  # noqa: E501

        :return: The private_ipv4_subnet_size of this DeviceCreateInFacilityInput.  # noqa: E501
        :rtype: float
        """
        return self._private_ipv4_subnet_size

    @private_ipv4_subnet_size.setter
    def private_ipv4_subnet_size(self, private_ipv4_subnet_size):
        """Sets the private_ipv4_subnet_size of this DeviceCreateInFacilityInput.

        Deprecated. Use ip_addresses. Subnet range for addresses allocated to this device.  # noqa: E501

        :param private_ipv4_subnet_size: The private_ipv4_subnet_size of this DeviceCreateInFacilityInput.  # noqa: E501
        :type private_ipv4_subnet_size: float
        """

        self._private_ipv4_subnet_size = private_ipv4_subnet_size

    @property
    def project_ssh_keys(self):
        """Gets the project_ssh_keys of this DeviceCreateInFacilityInput.  # noqa: E501

        A list of UUIDs identifying the device parent project that should be authorized to access this device (typically via /root/.ssh/authorized_keys). These keys will also appear in the device metadata.  If no SSH keys are specified (`user_ssh_keys`, `project_ssh_keys`, and `ssh_keys` are all empty lists or omitted), all parent project keys, parent project members keys and organization members keys will be included. This behaviour can be changed with 'no_ssh_keys' option to omit any SSH key being added.   # noqa: E501

        :return: The project_ssh_keys of this DeviceCreateInFacilityInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._project_ssh_keys

    @project_ssh_keys.setter
    def project_ssh_keys(self, project_ssh_keys):
        """Sets the project_ssh_keys of this DeviceCreateInFacilityInput.

        A list of UUIDs identifying the device parent project that should be authorized to access this device (typically via /root/.ssh/authorized_keys). These keys will also appear in the device metadata.  If no SSH keys are specified (`user_ssh_keys`, `project_ssh_keys`, and `ssh_keys` are all empty lists or omitted), all parent project keys, parent project members keys and organization members keys will be included. This behaviour can be changed with 'no_ssh_keys' option to omit any SSH key being added.   # noqa: E501

        :param project_ssh_keys: The project_ssh_keys of this DeviceCreateInFacilityInput.  # noqa: E501
        :type project_ssh_keys: list[str]
        """

        self._project_ssh_keys = project_ssh_keys

    @property
    def public_ipv4_subnet_size(self):
        """Gets the public_ipv4_subnet_size of this DeviceCreateInFacilityInput.  # noqa: E501

        Deprecated. Use ip_addresses. Subnet range for addresses allocated to this device. Your project must have addresses available for a non-default request.  # noqa: E501

        :return: The public_ipv4_subnet_size of this DeviceCreateInFacilityInput.  # noqa: E501
        :rtype: float
        """
        return self._public_ipv4_subnet_size

    @public_ipv4_subnet_size.setter
    def public_ipv4_subnet_size(self, public_ipv4_subnet_size):
        """Sets the public_ipv4_subnet_size of this DeviceCreateInFacilityInput.

        Deprecated. Use ip_addresses. Subnet range for addresses allocated to this device. Your project must have addresses available for a non-default request.  # noqa: E501

        :param public_ipv4_subnet_size: The public_ipv4_subnet_size of this DeviceCreateInFacilityInput.  # noqa: E501
        :type public_ipv4_subnet_size: float
        """

        self._public_ipv4_subnet_size = public_ipv4_subnet_size

    @property
    def spot_instance(self):
        """Gets the spot_instance of this DeviceCreateInFacilityInput.  # noqa: E501

        Create a spot instance. Spot instances are created with a maximum bid price. If the bid price is not met, the spot instance will be terminated as indicated by the `termination_time` field.  # noqa: E501

        :return: The spot_instance of this DeviceCreateInFacilityInput.  # noqa: E501
        :rtype: bool
        """
        return self._spot_instance

    @spot_instance.setter
    def spot_instance(self, spot_instance):
        """Sets the spot_instance of this DeviceCreateInFacilityInput.

        Create a spot instance. Spot instances are created with a maximum bid price. If the bid price is not met, the spot instance will be terminated as indicated by the `termination_time` field.  # noqa: E501

        :param spot_instance: The spot_instance of this DeviceCreateInFacilityInput.  # noqa: E501
        :type spot_instance: bool
        """

        self._spot_instance = spot_instance

    @property
    def spot_price_max(self):
        """Gets the spot_price_max of this DeviceCreateInFacilityInput.  # noqa: E501

        The maximum amount to bid for a spot instance.  # noqa: E501

        :return: The spot_price_max of this DeviceCreateInFacilityInput.  # noqa: E501
        :rtype: float
        """
        return self._spot_price_max

    @spot_price_max.setter
    def spot_price_max(self, spot_price_max):
        """Sets the spot_price_max of this DeviceCreateInFacilityInput.

        The maximum amount to bid for a spot instance.  # noqa: E501

        :param spot_price_max: The spot_price_max of this DeviceCreateInFacilityInput.  # noqa: E501
        :type spot_price_max: float
        """

        self._spot_price_max = spot_price_max

    @property
    def ssh_keys(self):
        """Gets the ssh_keys of this DeviceCreateInFacilityInput.  # noqa: E501

        A list of new or existing project ssh_keys that should be authorized to access this device (typically via /root/.ssh/authorized_keys). These keys will also appear in the device metadata.  These keys are added in addition to any keys defined by   `project_ssh_keys` and `user_ssh_keys`.   # noqa: E501

        :return: The ssh_keys of this DeviceCreateInFacilityInput.  # noqa: E501
        :rtype: list[SSHKeyInput]
        """
        return self._ssh_keys

    @ssh_keys.setter
    def ssh_keys(self, ssh_keys):
        """Sets the ssh_keys of this DeviceCreateInFacilityInput.

        A list of new or existing project ssh_keys that should be authorized to access this device (typically via /root/.ssh/authorized_keys). These keys will also appear in the device metadata.  These keys are added in addition to any keys defined by   `project_ssh_keys` and `user_ssh_keys`.   # noqa: E501

        :param ssh_keys: The ssh_keys of this DeviceCreateInFacilityInput.  # noqa: E501
        :type ssh_keys: list[SSHKeyInput]
        """

        self._ssh_keys = ssh_keys

    @property
    def tags(self):
        """Gets the tags of this DeviceCreateInFacilityInput.  # noqa: E501


        :return: The tags of this DeviceCreateInFacilityInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this DeviceCreateInFacilityInput.


        :param tags: The tags of this DeviceCreateInFacilityInput.  # noqa: E501
        :type tags: list[str]
        """

        self._tags = tags

    @property
    def termination_time(self):
        """Gets the termination_time of this DeviceCreateInFacilityInput.  # noqa: E501


        :return: The termination_time of this DeviceCreateInFacilityInput.  # noqa: E501
        :rtype: datetime
        """
        return self._termination_time

    @termination_time.setter
    def termination_time(self, termination_time):
        """Sets the termination_time of this DeviceCreateInFacilityInput.


        :param termination_time: The termination_time of this DeviceCreateInFacilityInput.  # noqa: E501
        :type termination_time: datetime
        """

        self._termination_time = termination_time

    @property
    def user_ssh_keys(self):
        """Gets the user_ssh_keys of this DeviceCreateInFacilityInput.  # noqa: E501

        A list of UUIDs identifying the users that should be authorized to access this device (typically via /root/.ssh/authorized_keys).  These keys will also appear in the device metadata.  The users must be members of the project or organization.  If no SSH keys are specified (`user_ssh_keys`, `project_ssh_keys`, and `ssh_keys` are all empty lists or omitted), all parent project keys, parent project members keys and organization members keys will be included. This behaviour can be changed with 'no_ssh_keys' option to omit any SSH key being added.   # noqa: E501

        :return: The user_ssh_keys of this DeviceCreateInFacilityInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._user_ssh_keys

    @user_ssh_keys.setter
    def user_ssh_keys(self, user_ssh_keys):
        """Sets the user_ssh_keys of this DeviceCreateInFacilityInput.

        A list of UUIDs identifying the users that should be authorized to access this device (typically via /root/.ssh/authorized_keys).  These keys will also appear in the device metadata.  The users must be members of the project or organization.  If no SSH keys are specified (`user_ssh_keys`, `project_ssh_keys`, and `ssh_keys` are all empty lists or omitted), all parent project keys, parent project members keys and organization members keys will be included. This behaviour can be changed with 'no_ssh_keys' option to omit any SSH key being added.   # noqa: E501

        :param user_ssh_keys: The user_ssh_keys of this DeviceCreateInFacilityInput.  # noqa: E501
        :type user_ssh_keys: list[str]
        """

        self._user_ssh_keys = user_ssh_keys

    @property
    def userdata(self):
        """Gets the userdata of this DeviceCreateInFacilityInput.  # noqa: E501

        The userdata presented in the metadata service for this device.  Userdata is fetched and interpreted by the operating system installed on the device. Acceptable formats are determined by the operating system, with the exception of a special iPXE enabling syntax which is handled before the operating system starts.  See [Server User Data](https://metal.equinix.com/developers/docs/servers/user-data/) and [Provisioning with Custom iPXE](https://metal.equinix.com/developers/docs/operating-systems/custom-ipxe/#provisioning-with-custom-ipxe) for more details.  # noqa: E501

        :return: The userdata of this DeviceCreateInFacilityInput.  # noqa: E501
        :rtype: str
        """
        return self._userdata

    @userdata.setter
    def userdata(self, userdata):
        """Sets the userdata of this DeviceCreateInFacilityInput.

        The userdata presented in the metadata service for this device.  Userdata is fetched and interpreted by the operating system installed on the device. Acceptable formats are determined by the operating system, with the exception of a special iPXE enabling syntax which is handled before the operating system starts.  See [Server User Data](https://metal.equinix.com/developers/docs/servers/user-data/) and [Provisioning with Custom iPXE](https://metal.equinix.com/developers/docs/operating-systems/custom-ipxe/#provisioning-with-custom-ipxe) for more details.  # noqa: E501

        :param userdata: The userdata of this DeviceCreateInFacilityInput.  # noqa: E501
        :type userdata: str
        """

        self._userdata = userdata

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceCreateInFacilityInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DeviceCreateInFacilityInput):
            return True

        return self.to_dict() != other.to_dict()
