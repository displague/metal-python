# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from metal.types.base_model_ import Model
from metal import util


class InterconnectionCreateInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contact_email: str=None, description: str=None, metro: str=None, mode: str=None, name: str=None, project: str=None, redundancy: str=None, service_token_type: str=None, speed: int=None, tags: List[str]=None, type: str=None, vlans: List[int]=None, vrfs: List[str]=None):
        """InterconnectionCreateInput - a model defined in OpenAPI

        :param contact_email: The contact_email of this InterconnectionCreateInput.
        :param description: The description of this InterconnectionCreateInput.
        :param metro: The metro of this InterconnectionCreateInput.
        :param mode: The mode of this InterconnectionCreateInput.
        :param name: The name of this InterconnectionCreateInput.
        :param project: The project of this InterconnectionCreateInput.
        :param redundancy: The redundancy of this InterconnectionCreateInput.
        :param service_token_type: The service_token_type of this InterconnectionCreateInput.
        :param speed: The speed of this InterconnectionCreateInput.
        :param tags: The tags of this InterconnectionCreateInput.
        :param type: The type of this InterconnectionCreateInput.
        :param vlans: The vlans of this InterconnectionCreateInput.
        :param vrfs: The vrfs of this InterconnectionCreateInput.
        """
        self.openapi_types = {
            'contact_email': str,
            'description': str,
            'metro': str,
            'mode': str,
            'name': str,
            'project': str,
            'redundancy': str,
            'service_token_type': str,
            'speed': int,
            'tags': List[str],
            'type': str,
            'vlans': List[int],
            'vrfs': List[str]
        }

        self.attribute_map = {
            'contact_email': 'contact_email',
            'description': 'description',
            'metro': 'metro',
            'mode': 'mode',
            'name': 'name',
            'project': 'project',
            'redundancy': 'redundancy',
            'service_token_type': 'service_token_type',
            'speed': 'speed',
            'tags': 'tags',
            'type': 'type',
            'vlans': 'vlans',
            'vrfs': 'vrfs'
        }

        self._contact_email = contact_email
        self._description = description
        self._metro = metro
        self._mode = mode
        self._name = name
        self._project = project
        self._redundancy = redundancy
        self._service_token_type = service_token_type
        self._speed = speed
        self._tags = tags
        self._type = type
        self._vlans = vlans
        self._vrfs = vrfs

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InterconnectionCreateInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InterconnectionCreateInput of this InterconnectionCreateInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contact_email(self):
        """Gets the contact_email of this InterconnectionCreateInput.


        :return: The contact_email of this InterconnectionCreateInput.
        :rtype: str
        """
        return self._contact_email

    @contact_email.setter
    def contact_email(self, contact_email):
        """Sets the contact_email of this InterconnectionCreateInput.


        :param contact_email: The contact_email of this InterconnectionCreateInput.
        :type contact_email: str
        """

        self._contact_email = contact_email

    @property
    def description(self):
        """Gets the description of this InterconnectionCreateInput.


        :return: The description of this InterconnectionCreateInput.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this InterconnectionCreateInput.


        :param description: The description of this InterconnectionCreateInput.
        :type description: str
        """

        self._description = description

    @property
    def metro(self):
        """Gets the metro of this InterconnectionCreateInput.

        A Metro ID or code. For interconnections with Dedicated Ports, this will be the location of the issued Dedicated Ports. When creating Fabric VCs (Metal Billed), this is where interconnection will be originating from, as we pre-authorize the use of one of our shared ports as the origin of the interconnection using A-Side service tokens. We only allow local connections for Fabric VCs (Metal Billed), so the destination location must be the same as the origin. For Fabric VCs (Fabric Billed), or shared connections, this will be the destination of the interconnection. We allow remote connections for Fabric VCs (Fabric Billed), so the origin of the interconnection can be a different metro set here.

        :return: The metro of this InterconnectionCreateInput.
        :rtype: str
        """
        return self._metro

    @metro.setter
    def metro(self, metro):
        """Sets the metro of this InterconnectionCreateInput.

        A Metro ID or code. For interconnections with Dedicated Ports, this will be the location of the issued Dedicated Ports. When creating Fabric VCs (Metal Billed), this is where interconnection will be originating from, as we pre-authorize the use of one of our shared ports as the origin of the interconnection using A-Side service tokens. We only allow local connections for Fabric VCs (Metal Billed), so the destination location must be the same as the origin. For Fabric VCs (Fabric Billed), or shared connections, this will be the destination of the interconnection. We allow remote connections for Fabric VCs (Fabric Billed), so the origin of the interconnection can be a different metro set here.

        :param metro: The metro of this InterconnectionCreateInput.
        :type metro: str
        """
        if metro is None:
            raise ValueError("Invalid value for `metro`, must not be `None`")

        self._metro = metro

    @property
    def mode(self):
        """Gets the mode of this InterconnectionCreateInput.

        The mode of the interconnection (only relevant to Dedicated Ports). Fabric VCs won't have this field. Can be either 'standard' or 'tunnel'.   The default mode of an interconnection on a Dedicated Port is 'standard'. The mode can only be changed when there are no associated virtual circuits on the interconnection.   In tunnel mode, an 802.1q tunnel is added to a port to send/receive double tagged packets from server instances.

        :return: The mode of this InterconnectionCreateInput.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this InterconnectionCreateInput.

        The mode of the interconnection (only relevant to Dedicated Ports). Fabric VCs won't have this field. Can be either 'standard' or 'tunnel'.   The default mode of an interconnection on a Dedicated Port is 'standard'. The mode can only be changed when there are no associated virtual circuits on the interconnection.   In tunnel mode, an 802.1q tunnel is added to a port to send/receive double tagged packets from server instances.

        :param mode: The mode of this InterconnectionCreateInput.
        :type mode: str
        """
        allowed_values = ["standard", "tunnel"]  # noqa: E501
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"
                .format(mode, allowed_values)
            )

        self._mode = mode

    @property
    def name(self):
        """Gets the name of this InterconnectionCreateInput.


        :return: The name of this InterconnectionCreateInput.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InterconnectionCreateInput.


        :param name: The name of this InterconnectionCreateInput.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def project(self):
        """Gets the project of this InterconnectionCreateInput.


        :return: The project of this InterconnectionCreateInput.
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this InterconnectionCreateInput.


        :param project: The project of this InterconnectionCreateInput.
        :type project: str
        """

        self._project = project

    @property
    def redundancy(self):
        """Gets the redundancy of this InterconnectionCreateInput.

        Either 'primary' or 'redundant'.

        :return: The redundancy of this InterconnectionCreateInput.
        :rtype: str
        """
        return self._redundancy

    @redundancy.setter
    def redundancy(self, redundancy):
        """Sets the redundancy of this InterconnectionCreateInput.

        Either 'primary' or 'redundant'.

        :param redundancy: The redundancy of this InterconnectionCreateInput.
        :type redundancy: str
        """
        if redundancy is None:
            raise ValueError("Invalid value for `redundancy`, must not be `None`")

        self._redundancy = redundancy

    @property
    def service_token_type(self):
        """Gets the service_token_type of this InterconnectionCreateInput.

        Either 'a_side' or 'z_side'. Setting this field to 'a_side' will create an interconnection with Fabric VCs (Metal Billed). Setting this field to 'z_side' will create an interconnection with Fabric VCs (Fabric Billed). This is required when the 'type' is 'shared', but this is not applicable when the 'type' is 'dedicated'. This parameter is included in the specification as a developer preview and is generally unavailable. Please contact our Support team for more details.

        :return: The service_token_type of this InterconnectionCreateInput.
        :rtype: str
        """
        return self._service_token_type

    @service_token_type.setter
    def service_token_type(self, service_token_type):
        """Sets the service_token_type of this InterconnectionCreateInput.

        Either 'a_side' or 'z_side'. Setting this field to 'a_side' will create an interconnection with Fabric VCs (Metal Billed). Setting this field to 'z_side' will create an interconnection with Fabric VCs (Fabric Billed). This is required when the 'type' is 'shared', but this is not applicable when the 'type' is 'dedicated'. This parameter is included in the specification as a developer preview and is generally unavailable. Please contact our Support team for more details.

        :param service_token_type: The service_token_type of this InterconnectionCreateInput.
        :type service_token_type: str
        """
        allowed_values = ["a_side", "z_side"]  # noqa: E501
        if service_token_type not in allowed_values:
            raise ValueError(
                "Invalid value for `service_token_type` ({0}), must be one of {1}"
                .format(service_token_type, allowed_values)
            )

        self._service_token_type = service_token_type

    @property
    def speed(self):
        """Gets the speed of this InterconnectionCreateInput.

        A interconnection speed, in bps, mbps, or gbps. For Dedicated Ports, this can be 10Gbps or 100Gbps. For Fabric VCs, this represents the maximum speed of the interconnection. For Fabric VCs (Metal Billed), this can only be one of the following:  ''50mbps'', ''200mbps'', ''500mbps'', ''1gbps'', ''2gbps'', ''5gbps'' or ''10gbps'', and is required for creation. For Fabric VCs (Fabric Billed), this field will always default to ''10gbps'' even if it is not provided. For example, ''500000000'', ''50m'', or' ''500mbps'' will all work as valid inputs.

        :return: The speed of this InterconnectionCreateInput.
        :rtype: int
        """
        return self._speed

    @speed.setter
    def speed(self, speed):
        """Sets the speed of this InterconnectionCreateInput.

        A interconnection speed, in bps, mbps, or gbps. For Dedicated Ports, this can be 10Gbps or 100Gbps. For Fabric VCs, this represents the maximum speed of the interconnection. For Fabric VCs (Metal Billed), this can only be one of the following:  ''50mbps'', ''200mbps'', ''500mbps'', ''1gbps'', ''2gbps'', ''5gbps'' or ''10gbps'', and is required for creation. For Fabric VCs (Fabric Billed), this field will always default to ''10gbps'' even if it is not provided. For example, ''500000000'', ''50m'', or' ''500mbps'' will all work as valid inputs.

        :param speed: The speed of this InterconnectionCreateInput.
        :type speed: int
        """

        self._speed = speed

    @property
    def tags(self):
        """Gets the tags of this InterconnectionCreateInput.


        :return: The tags of this InterconnectionCreateInput.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this InterconnectionCreateInput.


        :param tags: The tags of this InterconnectionCreateInput.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def type(self):
        """Gets the type of this InterconnectionCreateInput.

        Either 'shared' or 'dedicated'. The 'shared' type represents shared interconnections, or also known as Fabric VCs. The 'dedicated' type represents dedicated interconnections, or also known as Dedicated Ports.

        :return: The type of this InterconnectionCreateInput.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InterconnectionCreateInput.

        Either 'shared' or 'dedicated'. The 'shared' type represents shared interconnections, or also known as Fabric VCs. The 'dedicated' type represents dedicated interconnections, or also known as Dedicated Ports.

        :param type: The type of this InterconnectionCreateInput.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def vlans(self):
        """Gets the vlans of this InterconnectionCreateInput.

        A list of one or two metro-based VLANs that will be set on the virtual circuits of primary and/or secondary (if redundant) interconnections respectively when creating Fabric VCs. VLANs can also be set after the interconnection is created, but are required to fully activate the interconnection. This parameter is included in the specification as a developer preview and is generally unavailable. Please contact our Support team for more details.

        :return: The vlans of this InterconnectionCreateInput.
        :rtype: List[int]
        """
        return self._vlans

    @vlans.setter
    def vlans(self, vlans):
        """Sets the vlans of this InterconnectionCreateInput.

        A list of one or two metro-based VLANs that will be set on the virtual circuits of primary and/or secondary (if redundant) interconnections respectively when creating Fabric VCs. VLANs can also be set after the interconnection is created, but are required to fully activate the interconnection. This parameter is included in the specification as a developer preview and is generally unavailable. Please contact our Support team for more details.

        :param vlans: The vlans of this InterconnectionCreateInput.
        :type vlans: List[int]
        """

        self._vlans = vlans

    @property
    def vrfs(self):
        """Gets the vrfs of this InterconnectionCreateInput.

        Can only be set when creating Fabric VCs in VRF(s). This field holds a list of VRF UUIDs that will be set automatically on the virtual circuits on creation, and can hold up to two UUIDs. Two UUIDs are required when requesting redundant Fabric VCs. The first UUID will be set on the primary virtual circuit, while the second UUID will be set on the secondary. The two UUIDs can be the same if both the primary and secondary virtual circuits will be in the same VRF. This parameter is included in the specification as a developer preview and is generally unavailable. Please contact our Support team for more details.

        :return: The vrfs of this InterconnectionCreateInput.
        :rtype: List[str]
        """
        return self._vrfs

    @vrfs.setter
    def vrfs(self, vrfs):
        """Sets the vrfs of this InterconnectionCreateInput.

        Can only be set when creating Fabric VCs in VRF(s). This field holds a list of VRF UUIDs that will be set automatically on the virtual circuits on creation, and can hold up to two UUIDs. Two UUIDs are required when requesting redundant Fabric VCs. The first UUID will be set on the primary virtual circuit, while the second UUID will be set on the secondary. The two UUIDs can be the same if both the primary and secondary virtual circuits will be in the same VRF. This parameter is included in the specification as a developer preview and is generally unavailable. Please contact our Support team for more details.

        :param vrfs: The vrfs of this InterconnectionCreateInput.
        :type vrfs: List[str]
        """

        self._vrfs = vrfs
