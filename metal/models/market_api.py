# coding: utf-8

"""
    Metal API

    This is the API for Equinix Metal Product. Interact with your devices, user account, and projects.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@equinixmetal.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from metal.api_client import ApiClient
from metal.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class MarketApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def find_spot_market_prices(self, **kwargs):  # noqa: E501
        """Get current spot market prices  # noqa: E501

        Get Equinix Metal current spot market prices.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.find_spot_market_prices(async_req=True)
        >>> result = thread.get()

        :param facility: Facility to check spot market prices
        :type facility: str
        :param plan: Plan to check spot market prices
        :type plan: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SpotMarketPricesList
        """
        kwargs['_return_http_data_only'] = True
        return self.find_spot_market_prices_with_http_info(**kwargs)  # noqa: E501

    def find_spot_market_prices_with_http_info(self, **kwargs):  # noqa: E501
        """Get current spot market prices  # noqa: E501

        Get Equinix Metal current spot market prices.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.find_spot_market_prices_with_http_info(async_req=True)
        >>> result = thread.get()

        :param facility: Facility to check spot market prices
        :type facility: str
        :param plan: Plan to check spot market prices
        :type plan: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SpotMarketPricesList, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'facility',
            'plan'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_spot_market_prices" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'facility' in local_var_params and local_var_params['facility'] is not None:  # noqa: E501
            query_params.append(('facility', local_var_params['facility']))  # noqa: E501
        if 'plan' in local_var_params and local_var_params['plan'] is not None:  # noqa: E501
            query_params.append(('plan', local_var_params['plan']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x_auth_token']  # noqa: E501
        
        response_types_map = {
            200: "SpotMarketPricesList",
        }

        return self.api_client.call_api(
            '/market/spot/prices', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def find_spot_market_prices_history(self, facility, plan, _from, until, **kwargs):  # noqa: E501
        """Get spot market prices for a given period of time  # noqa: E501

        Get spot market prices for a given plan and facility in a fixed period of time  *Note: In the `200` response, the property `datapoints` contains arrays of `[float, integer]`.*  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.find_spot_market_prices_history(facility, plan, _from, until, async_req=True)
        >>> result = thread.get()

        :param facility: Facility to check spot market prices (required)
        :type facility: str
        :param plan: Plan to check spot market prices (required)
        :type plan: str
        :param _from: Timestamp from range (required)
        :type _from: str
        :param until: Timestamp to range (required)
        :type until: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SpotPricesHistoryReport
        """
        kwargs['_return_http_data_only'] = True
        return self.find_spot_market_prices_history_with_http_info(facility, plan, _from, until, **kwargs)  # noqa: E501

    def find_spot_market_prices_history_with_http_info(self, facility, plan, _from, until, **kwargs):  # noqa: E501
        """Get spot market prices for a given period of time  # noqa: E501

        Get spot market prices for a given plan and facility in a fixed period of time  *Note: In the `200` response, the property `datapoints` contains arrays of `[float, integer]`.*  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.find_spot_market_prices_history_with_http_info(facility, plan, _from, until, async_req=True)
        >>> result = thread.get()

        :param facility: Facility to check spot market prices (required)
        :type facility: str
        :param plan: Plan to check spot market prices (required)
        :type plan: str
        :param _from: Timestamp from range (required)
        :type _from: str
        :param until: Timestamp to range (required)
        :type until: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SpotPricesHistoryReport, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'facility',
            'plan',
            '_from',
            'until'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_spot_market_prices_history" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'facility' is set
        if self.api_client.client_side_validation and ('facility' not in local_var_params or  # noqa: E501
                                                        local_var_params['facility'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `facility` when calling `find_spot_market_prices_history`")  # noqa: E501
        # verify the required parameter 'plan' is set
        if self.api_client.client_side_validation and ('plan' not in local_var_params or  # noqa: E501
                                                        local_var_params['plan'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `plan` when calling `find_spot_market_prices_history`")  # noqa: E501
        # verify the required parameter '_from' is set
        if self.api_client.client_side_validation and ('_from' not in local_var_params or  # noqa: E501
                                                        local_var_params['_from'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `_from` when calling `find_spot_market_prices_history`")  # noqa: E501
        # verify the required parameter 'until' is set
        if self.api_client.client_side_validation and ('until' not in local_var_params or  # noqa: E501
                                                        local_var_params['until'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `until` when calling `find_spot_market_prices_history`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'facility' in local_var_params and local_var_params['facility'] is not None:  # noqa: E501
            query_params.append(('facility', local_var_params['facility']))  # noqa: E501
        if 'plan' in local_var_params and local_var_params['plan'] is not None:  # noqa: E501
            query_params.append(('plan', local_var_params['plan']))  # noqa: E501
        if '_from' in local_var_params and local_var_params['_from'] is not None:  # noqa: E501
            query_params.append(('from', local_var_params['_from']))  # noqa: E501
        if 'until' in local_var_params and local_var_params['until'] is not None:  # noqa: E501
            query_params.append(('until', local_var_params['until']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x_auth_token']  # noqa: E501
        
        response_types_map = {
            200: "SpotPricesHistoryReport",
        }

        return self.api_client.call_api(
            '/market/spot/prices/history', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))
