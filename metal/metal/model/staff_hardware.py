"""
    Metal API

    This is the API for Equinix Metal Product. Interact with your devices, user account, and projects.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@equinixmetal.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from metal.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
)

def lazy_import():
    from metal.model.staff_cage import StaffCage
    from metal.model.staff_facility_little import StaffFacilityLittle
    from metal.model.staff_facility_room import StaffFacilityRoom
    from metal.model.staff_hardware_reservation_v1 import StaffHardwareReservationV1
    from metal.model.staff_instance import StaffInstance
    from metal.model.staff_ip_address import StaffIpAddress
    from metal.model.staff_manufacturer import StaffManufacturer
    from metal.model.staff_note import StaffNote
    from metal.model.staff_operating_system_version import StaffOperatingSystemVersion
    from metal.model.staff_plan import StaffPlan
    from metal.model.staff_plan_version import StaffPlanVersion
    from metal.model.staff_provider import StaffProvider
    from metal.model.staff_rack_space import StaffRackSpace
    from metal.model.staff_row import StaffRow
    from metal.model.staff_server_rack import StaffServerRack
    globals()['StaffCage'] = StaffCage
    globals()['StaffFacilityLittle'] = StaffFacilityLittle
    globals()['StaffFacilityRoom'] = StaffFacilityRoom
    globals()['StaffHardwareReservationV1'] = StaffHardwareReservationV1
    globals()['StaffInstance'] = StaffInstance
    globals()['StaffIpAddress'] = StaffIpAddress
    globals()['StaffManufacturer'] = StaffManufacturer
    globals()['StaffNote'] = StaffNote
    globals()['StaffOperatingSystemVersion'] = StaffOperatingSystemVersion
    globals()['StaffPlan'] = StaffPlan
    globals()['StaffPlanVersion'] = StaffPlanVersion
    globals()['StaffProvider'] = StaffProvider
    globals()['StaffRackSpace'] = StaffRackSpace
    globals()['StaffRow'] = StaffRow
    globals()['StaffServerRack'] = StaffServerRack


class StaffHardware(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    additional_properties_type = None

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'id': (str,),  # noqa: E501
            'arch': (str,),  # noqa: E501
            'bios_password': (str,),  # noqa: E501
            'data': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),  # noqa: E501
            'dhcp_group': (str,),  # noqa: E501
            'efi_boot': (bool,),  # noqa: E501
            'hostname': (str,),  # noqa: E501
            'leased': (bool,),  # noqa: E501
            'location': (str,),  # noqa: E501
            'maintenance_state': (str,),  # noqa: E501
            'management': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),  # noqa: E501
            'model_number': (str,),  # noqa: E501
            'name': (str,),  # noqa: E501
            'rack_spaces_labels': (str,),  # noqa: E501
            'serial_number': (str,),  # noqa: E501
            'services': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),  # noqa: E501
            'state': (str,),  # noqa: E501
            'supported_networking': ([str],),  # noqa: E501
            'type': (str,),  # noqa: E501
            'u_spaces': (int,),  # noqa: E501
            'reserved': (bool,),  # noqa: E501
            'link_aggregation': (str,),  # noqa: E501
            'vrf': (str,),  # noqa: E501
            'provisioner': (str,),  # noqa: E501
            'created_at': (datetime,),  # noqa: E501
            'updated_at': (datetime,),  # noqa: E501
            'bonding_mode': (int,),  # noqa: E501
            'total_provisions': (int,),  # noqa: E501
            'successful_provisions': (int,),  # noqa: E501
            'failed_provisions': (int,),  # noqa: E501
            'last_provision_success': (datetime,),  # noqa: E501
            'last_provision_failed': (datetime,),  # noqa: E501
            'last_deprovision_success': (datetime,),  # noqa: E501
            'last_deprovision_failed': (datetime,),  # noqa: E501
            'uefi_supports_rfc3021': (bool,),  # noqa: E501
            'facility': (StaffFacilityLittle,),  # noqa: E501
            'facility_room': (StaffFacilityRoom,),  # noqa: E501
            'cage': (StaffCage,),  # noqa: E501
            'row': (StaffRow,),  # noqa: E501
            'server_rack': (StaffServerRack,),  # noqa: E501
            'manufacturer': (StaffManufacturer,),  # noqa: E501
            'plan_verion': (StaffPlanVersion,),  # noqa: E501
            'leased_from': (StaffProvider,),  # noqa: E501
            'plan': (StaffPlan,),  # noqa: E501
            'ip_assignments': ([StaffIpAddress],),  # noqa: E501
            'notes': ([StaffNote],),  # noqa: E501
            'rack_spaces': ([StaffRackSpace],),  # noqa: E501
            'ip_blocks': ([StaffIpAddress],),  # noqa: E501
            'instance': (StaffInstance,),  # noqa: E501
            'hardware_reservation': (StaffHardwareReservationV1,),  # noqa: E501
            'preinstalled_operating_system_version': (StaffOperatingSystemVersion,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'id': 'id',  # noqa: E501
        'arch': 'arch',  # noqa: E501
        'bios_password': 'bios_password',  # noqa: E501
        'data': 'data',  # noqa: E501
        'dhcp_group': 'dhcp_group',  # noqa: E501
        'efi_boot': 'efi_boot',  # noqa: E501
        'hostname': 'hostname',  # noqa: E501
        'leased': 'leased',  # noqa: E501
        'location': 'location',  # noqa: E501
        'maintenance_state': 'maintenance_state',  # noqa: E501
        'management': 'management',  # noqa: E501
        'model_number': 'model_number',  # noqa: E501
        'name': 'name',  # noqa: E501
        'rack_spaces_labels': 'rack_spaces_labels',  # noqa: E501
        'serial_number': 'serial_number',  # noqa: E501
        'services': 'services',  # noqa: E501
        'state': 'state',  # noqa: E501
        'supported_networking': 'supported_networking',  # noqa: E501
        'type': 'type',  # noqa: E501
        'u_spaces': 'u_spaces',  # noqa: E501
        'reserved': 'reserved',  # noqa: E501
        'link_aggregation': 'link_aggregation',  # noqa: E501
        'vrf': 'vrf',  # noqa: E501
        'provisioner': 'provisioner',  # noqa: E501
        'created_at': 'created_at',  # noqa: E501
        'updated_at': 'updated_at',  # noqa: E501
        'bonding_mode': 'bonding_mode',  # noqa: E501
        'total_provisions': 'total_provisions',  # noqa: E501
        'successful_provisions': 'successful_provisions',  # noqa: E501
        'failed_provisions': 'failed_provisions',  # noqa: E501
        'last_provision_success': 'last_provision_success',  # noqa: E501
        'last_provision_failed': 'last_provision_failed',  # noqa: E501
        'last_deprovision_success': 'last_deprovision_success',  # noqa: E501
        'last_deprovision_failed': 'last_deprovision_failed',  # noqa: E501
        'uefi_supports_rfc3021': 'uefi_supports_rfc3021',  # noqa: E501
        'facility': 'facility',  # noqa: E501
        'facility_room': 'facility_room',  # noqa: E501
        'cage': 'cage',  # noqa: E501
        'row': 'row',  # noqa: E501
        'server_rack': 'server_rack',  # noqa: E501
        'manufacturer': 'manufacturer',  # noqa: E501
        'plan_verion': 'plan_verion',  # noqa: E501
        'leased_from': 'leased_from',  # noqa: E501
        'plan': 'plan',  # noqa: E501
        'ip_assignments': 'ip_assignments',  # noqa: E501
        'notes': 'notes',  # noqa: E501
        'rack_spaces': 'rack_spaces',  # noqa: E501
        'ip_blocks': 'ip_blocks',  # noqa: E501
        'instance': 'instance',  # noqa: E501
        'hardware_reservation': 'hardware_reservation',  # noqa: E501
        'preinstalled_operating_system_version': 'preinstalled_operating_system_version',  # noqa: E501
    }

    _composed_schemas = {}

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """StaffHardware - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            id (str): [optional]  # noqa: E501
            arch (str): [optional]  # noqa: E501
            bios_password (str): [optional]  # noqa: E501
            data ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): [optional]  # noqa: E501
            dhcp_group (str): [optional]  # noqa: E501
            efi_boot (bool): [optional]  # noqa: E501
            hostname (str): [optional]  # noqa: E501
            leased (bool): [optional]  # noqa: E501
            location (str): [optional]  # noqa: E501
            maintenance_state (str): [optional]  # noqa: E501
            management ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): [optional]  # noqa: E501
            model_number (str): [optional]  # noqa: E501
            name (str): [optional]  # noqa: E501
            rack_spaces_labels (str): [optional]  # noqa: E501
            serial_number (str): [optional]  # noqa: E501
            services ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): [optional]  # noqa: E501
            state (str): [optional]  # noqa: E501
            supported_networking ([str]): [optional]  # noqa: E501
            type (str): [optional]  # noqa: E501
            u_spaces (int): [optional]  # noqa: E501
            reserved (bool): [optional]  # noqa: E501
            link_aggregation (str): [optional]  # noqa: E501
            vrf (str): Attribute included only if the hardware is of type Switch. [optional]  # noqa: E501
            provisioner (str): [optional]  # noqa: E501
            created_at (datetime): [optional]  # noqa: E501
            updated_at (datetime): [optional]  # noqa: E501
            bonding_mode (int): [optional]  # noqa: E501
            total_provisions (int): [optional]  # noqa: E501
            successful_provisions (int): [optional]  # noqa: E501
            failed_provisions (int): [optional]  # noqa: E501
            last_provision_success (datetime): [optional]  # noqa: E501
            last_provision_failed (datetime): [optional]  # noqa: E501
            last_deprovision_success (datetime): [optional]  # noqa: E501
            last_deprovision_failed (datetime): [optional]  # noqa: E501
            uefi_supports_rfc3021 (bool): [optional]  # noqa: E501
            facility (StaffFacilityLittle): [optional]  # noqa: E501
            facility_room (StaffFacilityRoom): [optional]  # noqa: E501
            cage (StaffCage): [optional]  # noqa: E501
            row (StaffRow): [optional]  # noqa: E501
            server_rack (StaffServerRack): [optional]  # noqa: E501
            manufacturer (StaffManufacturer): [optional]  # noqa: E501
            plan_verion (StaffPlanVersion): [optional]  # noqa: E501
            leased_from (StaffProvider): [optional]  # noqa: E501
            plan (StaffPlan): [optional]  # noqa: E501
            ip_assignments ([StaffIpAddress]): [optional]  # noqa: E501
            notes ([StaffNote]): [optional]  # noqa: E501
            rack_spaces ([StaffRackSpace]): [optional]  # noqa: E501
            ip_blocks ([StaffIpAddress]): Attribute included only if the hardware is of type Switch. [optional]  # noqa: E501
            instance (StaffInstance): [optional]  # noqa: E501
            hardware_reservation (StaffHardwareReservationV1): [optional]  # noqa: E501
            preinstalled_operating_system_version (StaffOperatingSystemVersion): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
