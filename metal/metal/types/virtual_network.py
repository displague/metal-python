# coding: utf-8

"""
    Metal API

    This is the API for Equinix Metal Product. Interact with your devices, user account, and projects.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@equinixmetal.com
    Generated by: https://openapi-generator.tech
"""


import inspect
import pprint
import re  # noqa: F401
import six

from metal.configuration import Configuration


class VirtualNetwork(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'description': 'str',
        'vxlan': 'int',
        'facility': 'Href',
        'instances': 'list[Href]',
        'assigned_to': 'Href',
        'href': 'str'
    }

    attribute_map = {
        'id': 'id',
        'description': 'description',
        'vxlan': 'vxlan',
        'facility': 'facility',
        'instances': 'instances',
        'assigned_to': 'assigned_to',
        'href': 'href'
    }

    def __init__(self, id=None, description=None, vxlan=None, facility=None, instances=None, assigned_to=None, href=None, local_vars_configuration=None):  # noqa: E501
        """VirtualNetwork - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._description = None
        self._vxlan = None
        self._facility = None
        self._instances = None
        self._assigned_to = None
        self._href = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if description is not None:
            self.description = description
        if vxlan is not None:
            self.vxlan = vxlan
        if facility is not None:
            self.facility = facility
        if instances is not None:
            self.instances = instances
        if assigned_to is not None:
            self.assigned_to = assigned_to
        if href is not None:
            self.href = href

    @property
    def id(self):
        """Gets the id of this VirtualNetwork.  # noqa: E501


        :return: The id of this VirtualNetwork.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VirtualNetwork.


        :param id: The id of this VirtualNetwork.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def description(self):
        """Gets the description of this VirtualNetwork.  # noqa: E501


        :return: The description of this VirtualNetwork.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this VirtualNetwork.


        :param description: The description of this VirtualNetwork.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def vxlan(self):
        """Gets the vxlan of this VirtualNetwork.  # noqa: E501


        :return: The vxlan of this VirtualNetwork.  # noqa: E501
        :rtype: int
        """
        return self._vxlan

    @vxlan.setter
    def vxlan(self, vxlan):
        """Sets the vxlan of this VirtualNetwork.


        :param vxlan: The vxlan of this VirtualNetwork.  # noqa: E501
        :type vxlan: int
        """

        self._vxlan = vxlan

    @property
    def facility(self):
        """Gets the facility of this VirtualNetwork.  # noqa: E501


        :return: The facility of this VirtualNetwork.  # noqa: E501
        :rtype: Href
        """
        return self._facility

    @facility.setter
    def facility(self, facility):
        """Sets the facility of this VirtualNetwork.


        :param facility: The facility of this VirtualNetwork.  # noqa: E501
        :type facility: Href
        """

        self._facility = facility

    @property
    def instances(self):
        """Gets the instances of this VirtualNetwork.  # noqa: E501


        :return: The instances of this VirtualNetwork.  # noqa: E501
        :rtype: list[Href]
        """
        return self._instances

    @instances.setter
    def instances(self, instances):
        """Sets the instances of this VirtualNetwork.


        :param instances: The instances of this VirtualNetwork.  # noqa: E501
        :type instances: list[Href]
        """

        self._instances = instances

    @property
    def assigned_to(self):
        """Gets the assigned_to of this VirtualNetwork.  # noqa: E501


        :return: The assigned_to of this VirtualNetwork.  # noqa: E501
        :rtype: Href
        """
        return self._assigned_to

    @assigned_to.setter
    def assigned_to(self, assigned_to):
        """Sets the assigned_to of this VirtualNetwork.


        :param assigned_to: The assigned_to of this VirtualNetwork.  # noqa: E501
        :type assigned_to: Href
        """

        self._assigned_to = assigned_to

    @property
    def href(self):
        """Gets the href of this VirtualNetwork.  # noqa: E501


        :return: The href of this VirtualNetwork.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this VirtualNetwork.


        :param href: The href of this VirtualNetwork.  # noqa: E501
        :type href: str
        """

        self._href = href

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = inspect.getargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VirtualNetwork):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VirtualNetwork):
            return True

        return self.to_dict() != other.to_dict()
