# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from metal.types.base_model_ import Model
from metal.types.facility import Facility
from metal.types.ip_assignment import IPAssignment
from metal import util

from metal.types.facility import Facility  # noqa: E501
from metal.types.ip_assignment import IPAssignment  # noqa: E501

class IPReservation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, address_family=None, netmask=None, public=None, enabled=None, cidr=None, management=None, manageable=None, addon=None, bill=None, assignments=None, network=None, created_at=None, facility=None, href=None, tags=None, state=None):  # noqa: E501
        """IPReservation - a model defined in OpenAPI

        :param id: The id of this IPReservation.  # noqa: E501
        :type id: str
        :param address_family: The address_family of this IPReservation.  # noqa: E501
        :type address_family: int
        :param netmask: The netmask of this IPReservation.  # noqa: E501
        :type netmask: str
        :param public: The public of this IPReservation.  # noqa: E501
        :type public: bool
        :param enabled: The enabled of this IPReservation.  # noqa: E501
        :type enabled: bool
        :param cidr: The cidr of this IPReservation.  # noqa: E501
        :type cidr: int
        :param management: The management of this IPReservation.  # noqa: E501
        :type management: bool
        :param manageable: The manageable of this IPReservation.  # noqa: E501
        :type manageable: bool
        :param addon: The addon of this IPReservation.  # noqa: E501
        :type addon: bool
        :param bill: The bill of this IPReservation.  # noqa: E501
        :type bill: bool
        :param assignments: The assignments of this IPReservation.  # noqa: E501
        :type assignments: List[IPAssignment]
        :param network: The network of this IPReservation.  # noqa: E501
        :type network: str
        :param created_at: The created_at of this IPReservation.  # noqa: E501
        :type created_at: datetime
        :param facility: The facility of this IPReservation.  # noqa: E501
        :type facility: Facility
        :param href: The href of this IPReservation.  # noqa: E501
        :type href: str
        :param tags: The tags of this IPReservation.  # noqa: E501
        :type tags: List[str]
        :param state: The state of this IPReservation.  # noqa: E501
        :type state: str
        """
        self.openapi_types = {
            'id': str,
            'address_family': int,
            'netmask': str,
            'public': bool,
            'enabled': bool,
            'cidr': int,
            'management': bool,
            'manageable': bool,
            'addon': bool,
            'bill': bool,
            'assignments': List[IPAssignment],
            'network': str,
            'created_at': datetime,
            'facility': Facility,
            'href': str,
            'tags': List[str],
            'state': str
        }

        self.attribute_map = {
            'id': 'id',
            'address_family': 'address_family',
            'netmask': 'netmask',
            'public': 'public',
            'enabled': 'enabled',
            'cidr': 'cidr',
            'management': 'management',
            'manageable': 'manageable',
            'addon': 'addon',
            'bill': 'bill',
            'assignments': 'assignments',
            'network': 'network',
            'created_at': 'created_at',
            'facility': 'facility',
            'href': 'href',
            'tags': 'tags',
            'state': 'state'
        }

        self._id = id
        self._address_family = address_family
        self._netmask = netmask
        self._public = public
        self._enabled = enabled
        self._cidr = cidr
        self._management = management
        self._manageable = manageable
        self._addon = addon
        self._bill = bill
        self._assignments = assignments
        self._network = network
        self._created_at = created_at
        self._facility = facility
        self._href = href
        self._tags = tags
        self._state = state

    @classmethod
    def from_dict(cls, dikt) -> 'IPReservation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The IPReservation of this IPReservation.  # noqa: E501
        :rtype: IPReservation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this IPReservation.


        :return: The id of this IPReservation.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IPReservation.


        :param id: The id of this IPReservation.
        :type id: str
        """

        self._id = id

    @property
    def address_family(self):
        """Gets the address_family of this IPReservation.


        :return: The address_family of this IPReservation.
        :rtype: int
        """
        return self._address_family

    @address_family.setter
    def address_family(self, address_family):
        """Sets the address_family of this IPReservation.


        :param address_family: The address_family of this IPReservation.
        :type address_family: int
        """

        self._address_family = address_family

    @property
    def netmask(self):
        """Gets the netmask of this IPReservation.


        :return: The netmask of this IPReservation.
        :rtype: str
        """
        return self._netmask

    @netmask.setter
    def netmask(self, netmask):
        """Sets the netmask of this IPReservation.


        :param netmask: The netmask of this IPReservation.
        :type netmask: str
        """

        self._netmask = netmask

    @property
    def public(self):
        """Gets the public of this IPReservation.


        :return: The public of this IPReservation.
        :rtype: bool
        """
        return self._public

    @public.setter
    def public(self, public):
        """Sets the public of this IPReservation.


        :param public: The public of this IPReservation.
        :type public: bool
        """

        self._public = public

    @property
    def enabled(self):
        """Gets the enabled of this IPReservation.


        :return: The enabled of this IPReservation.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this IPReservation.


        :param enabled: The enabled of this IPReservation.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def cidr(self):
        """Gets the cidr of this IPReservation.


        :return: The cidr of this IPReservation.
        :rtype: int
        """
        return self._cidr

    @cidr.setter
    def cidr(self, cidr):
        """Sets the cidr of this IPReservation.


        :param cidr: The cidr of this IPReservation.
        :type cidr: int
        """

        self._cidr = cidr

    @property
    def management(self):
        """Gets the management of this IPReservation.


        :return: The management of this IPReservation.
        :rtype: bool
        """
        return self._management

    @management.setter
    def management(self, management):
        """Sets the management of this IPReservation.


        :param management: The management of this IPReservation.
        :type management: bool
        """

        self._management = management

    @property
    def manageable(self):
        """Gets the manageable of this IPReservation.


        :return: The manageable of this IPReservation.
        :rtype: bool
        """
        return self._manageable

    @manageable.setter
    def manageable(self, manageable):
        """Sets the manageable of this IPReservation.


        :param manageable: The manageable of this IPReservation.
        :type manageable: bool
        """

        self._manageable = manageable

    @property
    def addon(self):
        """Gets the addon of this IPReservation.


        :return: The addon of this IPReservation.
        :rtype: bool
        """
        return self._addon

    @addon.setter
    def addon(self, addon):
        """Sets the addon of this IPReservation.


        :param addon: The addon of this IPReservation.
        :type addon: bool
        """

        self._addon = addon

    @property
    def bill(self):
        """Gets the bill of this IPReservation.


        :return: The bill of this IPReservation.
        :rtype: bool
        """
        return self._bill

    @bill.setter
    def bill(self, bill):
        """Sets the bill of this IPReservation.


        :param bill: The bill of this IPReservation.
        :type bill: bool
        """

        self._bill = bill

    @property
    def assignments(self):
        """Gets the assignments of this IPReservation.


        :return: The assignments of this IPReservation.
        :rtype: List[IPAssignment]
        """
        return self._assignments

    @assignments.setter
    def assignments(self, assignments):
        """Sets the assignments of this IPReservation.


        :param assignments: The assignments of this IPReservation.
        :type assignments: List[IPAssignment]
        """

        self._assignments = assignments

    @property
    def network(self):
        """Gets the network of this IPReservation.


        :return: The network of this IPReservation.
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this IPReservation.


        :param network: The network of this IPReservation.
        :type network: str
        """

        self._network = network

    @property
    def created_at(self):
        """Gets the created_at of this IPReservation.


        :return: The created_at of this IPReservation.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this IPReservation.


        :param created_at: The created_at of this IPReservation.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def facility(self):
        """Gets the facility of this IPReservation.


        :return: The facility of this IPReservation.
        :rtype: Facility
        """
        return self._facility

    @facility.setter
    def facility(self, facility):
        """Sets the facility of this IPReservation.


        :param facility: The facility of this IPReservation.
        :type facility: Facility
        """

        self._facility = facility

    @property
    def href(self):
        """Gets the href of this IPReservation.


        :return: The href of this IPReservation.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this IPReservation.


        :param href: The href of this IPReservation.
        :type href: str
        """

        self._href = href

    @property
    def tags(self):
        """Gets the tags of this IPReservation.


        :return: The tags of this IPReservation.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this IPReservation.


        :param tags: The tags of this IPReservation.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def state(self):
        """Gets the state of this IPReservation.


        :return: The state of this IPReservation.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this IPReservation.


        :param state: The state of this IPReservation.
        :type state: str
        """

        self._state = state
