# coding: utf-8

"""
    Metal API

    This is the API for Equinix Metal Product. Interact with your devices, user account, and projects.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@equinixmetal.com
    Generated by: https://openapi-generator.tech
"""


import inspect
import pprint
import re  # noqa: F401
import six

from metal.configuration import Configuration


class IPReservation(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'address_family': 'int',
        'netmask': 'str',
        'public': 'bool',
        'enabled': 'bool',
        'cidr': 'int',
        'management': 'bool',
        'manageable': 'bool',
        'addon': 'bool',
        'bill': 'bool',
        'assignments': 'list[IPAssignment]',
        'network': 'str',
        'created_at': 'datetime',
        'facility': 'Facility',
        'href': 'str',
        'tags': 'list[str]',
        'state': 'str'
    }

    attribute_map = {
        'id': 'id',
        'address_family': 'address_family',
        'netmask': 'netmask',
        'public': 'public',
        'enabled': 'enabled',
        'cidr': 'cidr',
        'management': 'management',
        'manageable': 'manageable',
        'addon': 'addon',
        'bill': 'bill',
        'assignments': 'assignments',
        'network': 'network',
        'created_at': 'created_at',
        'facility': 'facility',
        'href': 'href',
        'tags': 'tags',
        'state': 'state'
    }

    def __init__(self, id=None, address_family=None, netmask=None, public=None, enabled=None, cidr=None, management=None, manageable=None, addon=None, bill=None, assignments=None, network=None, created_at=None, facility=None, href=None, tags=None, state=None, local_vars_configuration=None):  # noqa: E501
        """IPReservation - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._address_family = None
        self._netmask = None
        self._public = None
        self._enabled = None
        self._cidr = None
        self._management = None
        self._manageable = None
        self._addon = None
        self._bill = None
        self._assignments = None
        self._network = None
        self._created_at = None
        self._facility = None
        self._href = None
        self._tags = None
        self._state = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if address_family is not None:
            self.address_family = address_family
        if netmask is not None:
            self.netmask = netmask
        if public is not None:
            self.public = public
        if enabled is not None:
            self.enabled = enabled
        if cidr is not None:
            self.cidr = cidr
        if management is not None:
            self.management = management
        if manageable is not None:
            self.manageable = manageable
        if addon is not None:
            self.addon = addon
        if bill is not None:
            self.bill = bill
        if assignments is not None:
            self.assignments = assignments
        if network is not None:
            self.network = network
        if created_at is not None:
            self.created_at = created_at
        if facility is not None:
            self.facility = facility
        if href is not None:
            self.href = href
        if tags is not None:
            self.tags = tags
        if state is not None:
            self.state = state

    @property
    def id(self):
        """Gets the id of this IPReservation.  # noqa: E501


        :return: The id of this IPReservation.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IPReservation.


        :param id: The id of this IPReservation.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def address_family(self):
        """Gets the address_family of this IPReservation.  # noqa: E501


        :return: The address_family of this IPReservation.  # noqa: E501
        :rtype: int
        """
        return self._address_family

    @address_family.setter
    def address_family(self, address_family):
        """Sets the address_family of this IPReservation.


        :param address_family: The address_family of this IPReservation.  # noqa: E501
        :type address_family: int
        """

        self._address_family = address_family

    @property
    def netmask(self):
        """Gets the netmask of this IPReservation.  # noqa: E501


        :return: The netmask of this IPReservation.  # noqa: E501
        :rtype: str
        """
        return self._netmask

    @netmask.setter
    def netmask(self, netmask):
        """Sets the netmask of this IPReservation.


        :param netmask: The netmask of this IPReservation.  # noqa: E501
        :type netmask: str
        """

        self._netmask = netmask

    @property
    def public(self):
        """Gets the public of this IPReservation.  # noqa: E501


        :return: The public of this IPReservation.  # noqa: E501
        :rtype: bool
        """
        return self._public

    @public.setter
    def public(self, public):
        """Sets the public of this IPReservation.


        :param public: The public of this IPReservation.  # noqa: E501
        :type public: bool
        """

        self._public = public

    @property
    def enabled(self):
        """Gets the enabled of this IPReservation.  # noqa: E501


        :return: The enabled of this IPReservation.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this IPReservation.


        :param enabled: The enabled of this IPReservation.  # noqa: E501
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def cidr(self):
        """Gets the cidr of this IPReservation.  # noqa: E501


        :return: The cidr of this IPReservation.  # noqa: E501
        :rtype: int
        """
        return self._cidr

    @cidr.setter
    def cidr(self, cidr):
        """Sets the cidr of this IPReservation.


        :param cidr: The cidr of this IPReservation.  # noqa: E501
        :type cidr: int
        """

        self._cidr = cidr

    @property
    def management(self):
        """Gets the management of this IPReservation.  # noqa: E501


        :return: The management of this IPReservation.  # noqa: E501
        :rtype: bool
        """
        return self._management

    @management.setter
    def management(self, management):
        """Sets the management of this IPReservation.


        :param management: The management of this IPReservation.  # noqa: E501
        :type management: bool
        """

        self._management = management

    @property
    def manageable(self):
        """Gets the manageable of this IPReservation.  # noqa: E501


        :return: The manageable of this IPReservation.  # noqa: E501
        :rtype: bool
        """
        return self._manageable

    @manageable.setter
    def manageable(self, manageable):
        """Sets the manageable of this IPReservation.


        :param manageable: The manageable of this IPReservation.  # noqa: E501
        :type manageable: bool
        """

        self._manageable = manageable

    @property
    def addon(self):
        """Gets the addon of this IPReservation.  # noqa: E501


        :return: The addon of this IPReservation.  # noqa: E501
        :rtype: bool
        """
        return self._addon

    @addon.setter
    def addon(self, addon):
        """Sets the addon of this IPReservation.


        :param addon: The addon of this IPReservation.  # noqa: E501
        :type addon: bool
        """

        self._addon = addon

    @property
    def bill(self):
        """Gets the bill of this IPReservation.  # noqa: E501


        :return: The bill of this IPReservation.  # noqa: E501
        :rtype: bool
        """
        return self._bill

    @bill.setter
    def bill(self, bill):
        """Sets the bill of this IPReservation.


        :param bill: The bill of this IPReservation.  # noqa: E501
        :type bill: bool
        """

        self._bill = bill

    @property
    def assignments(self):
        """Gets the assignments of this IPReservation.  # noqa: E501


        :return: The assignments of this IPReservation.  # noqa: E501
        :rtype: list[IPAssignment]
        """
        return self._assignments

    @assignments.setter
    def assignments(self, assignments):
        """Sets the assignments of this IPReservation.


        :param assignments: The assignments of this IPReservation.  # noqa: E501
        :type assignments: list[IPAssignment]
        """

        self._assignments = assignments

    @property
    def network(self):
        """Gets the network of this IPReservation.  # noqa: E501


        :return: The network of this IPReservation.  # noqa: E501
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this IPReservation.


        :param network: The network of this IPReservation.  # noqa: E501
        :type network: str
        """

        self._network = network

    @property
    def created_at(self):
        """Gets the created_at of this IPReservation.  # noqa: E501


        :return: The created_at of this IPReservation.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this IPReservation.


        :param created_at: The created_at of this IPReservation.  # noqa: E501
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def facility(self):
        """Gets the facility of this IPReservation.  # noqa: E501


        :return: The facility of this IPReservation.  # noqa: E501
        :rtype: Facility
        """
        return self._facility

    @facility.setter
    def facility(self, facility):
        """Sets the facility of this IPReservation.


        :param facility: The facility of this IPReservation.  # noqa: E501
        :type facility: Facility
        """

        self._facility = facility

    @property
    def href(self):
        """Gets the href of this IPReservation.  # noqa: E501


        :return: The href of this IPReservation.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this IPReservation.


        :param href: The href of this IPReservation.  # noqa: E501
        :type href: str
        """

        self._href = href

    @property
    def tags(self):
        """Gets the tags of this IPReservation.  # noqa: E501


        :return: The tags of this IPReservation.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this IPReservation.


        :param tags: The tags of this IPReservation.  # noqa: E501
        :type tags: list[str]
        """

        self._tags = tags

    @property
    def state(self):
        """Gets the state of this IPReservation.  # noqa: E501


        :return: The state of this IPReservation.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this IPReservation.


        :param state: The state of this IPReservation.  # noqa: E501
        :type state: str
        """

        self._state = state

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = inspect.getargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IPReservation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IPReservation):
            return True

        return self.to_dict() != other.to_dict()
