# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from metal.types.base_model_ import Model
from metal import util


class ProjectUsage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, facility=None, type=None, name=None, plan=None, plan_version=None, quantity=None, unit=None, price=None, total=None):  # noqa: E501
        """ProjectUsage - a model defined in OpenAPI

        :param facility: The facility of this ProjectUsage.  # noqa: E501
        :type facility: str
        :param type: The type of this ProjectUsage.  # noqa: E501
        :type type: str
        :param name: The name of this ProjectUsage.  # noqa: E501
        :type name: str
        :param plan: The plan of this ProjectUsage.  # noqa: E501
        :type plan: str
        :param plan_version: The plan_version of this ProjectUsage.  # noqa: E501
        :type plan_version: str
        :param quantity: The quantity of this ProjectUsage.  # noqa: E501
        :type quantity: str
        :param unit: The unit of this ProjectUsage.  # noqa: E501
        :type unit: str
        :param price: The price of this ProjectUsage.  # noqa: E501
        :type price: str
        :param total: The total of this ProjectUsage.  # noqa: E501
        :type total: str
        """
        self.openapi_types = {
            'facility': str,
            'type': str,
            'name': str,
            'plan': str,
            'plan_version': str,
            'quantity': str,
            'unit': str,
            'price': str,
            'total': str
        }

        self.attribute_map = {
            'facility': 'facility',
            'type': 'type',
            'name': 'name',
            'plan': 'plan',
            'plan_version': 'plan_version',
            'quantity': 'quantity',
            'unit': 'unit',
            'price': 'price',
            'total': 'total'
        }

        self._facility = facility
        self._type = type
        self._name = name
        self._plan = plan
        self._plan_version = plan_version
        self._quantity = quantity
        self._unit = unit
        self._price = price
        self._total = total

    @classmethod
    def from_dict(cls, dikt) -> 'ProjectUsage':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ProjectUsage of this ProjectUsage.  # noqa: E501
        :rtype: ProjectUsage
        """
        return util.deserialize_model(dikt, cls)

    @property
    def facility(self):
        """Gets the facility of this ProjectUsage.


        :return: The facility of this ProjectUsage.
        :rtype: str
        """
        return self._facility

    @facility.setter
    def facility(self, facility):
        """Sets the facility of this ProjectUsage.


        :param facility: The facility of this ProjectUsage.
        :type facility: str
        """

        self._facility = facility

    @property
    def type(self):
        """Gets the type of this ProjectUsage.


        :return: The type of this ProjectUsage.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ProjectUsage.


        :param type: The type of this ProjectUsage.
        :type type: str
        """

        self._type = type

    @property
    def name(self):
        """Gets the name of this ProjectUsage.


        :return: The name of this ProjectUsage.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProjectUsage.


        :param name: The name of this ProjectUsage.
        :type name: str
        """

        self._name = name

    @property
    def plan(self):
        """Gets the plan of this ProjectUsage.


        :return: The plan of this ProjectUsage.
        :rtype: str
        """
        return self._plan

    @plan.setter
    def plan(self, plan):
        """Sets the plan of this ProjectUsage.


        :param plan: The plan of this ProjectUsage.
        :type plan: str
        """

        self._plan = plan

    @property
    def plan_version(self):
        """Gets the plan_version of this ProjectUsage.


        :return: The plan_version of this ProjectUsage.
        :rtype: str
        """
        return self._plan_version

    @plan_version.setter
    def plan_version(self, plan_version):
        """Sets the plan_version of this ProjectUsage.


        :param plan_version: The plan_version of this ProjectUsage.
        :type plan_version: str
        """

        self._plan_version = plan_version

    @property
    def quantity(self):
        """Gets the quantity of this ProjectUsage.


        :return: The quantity of this ProjectUsage.
        :rtype: str
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this ProjectUsage.


        :param quantity: The quantity of this ProjectUsage.
        :type quantity: str
        """

        self._quantity = quantity

    @property
    def unit(self):
        """Gets the unit of this ProjectUsage.


        :return: The unit of this ProjectUsage.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this ProjectUsage.


        :param unit: The unit of this ProjectUsage.
        :type unit: str
        """

        self._unit = unit

    @property
    def price(self):
        """Gets the price of this ProjectUsage.


        :return: The price of this ProjectUsage.
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this ProjectUsage.


        :param price: The price of this ProjectUsage.
        :type price: str
        """

        self._price = price

    @property
    def total(self):
        """Gets the total of this ProjectUsage.


        :return: The total of this ProjectUsage.
        :rtype: str
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this ProjectUsage.


        :param total: The total of this ProjectUsage.
        :type total: str
        """

        self._total = total
