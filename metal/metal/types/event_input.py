# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from metal.types.base_model_ import Model
from metal import util


class EventInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type=None, body=None, state=None, private=None):  # noqa: E501
        """EventInput - a model defined in OpenAPI

        :param type: The type of this EventInput.  # noqa: E501
        :type type: str
        :param body: The body of this EventInput.  # noqa: E501
        :type body: str
        :param state: The state of this EventInput.  # noqa: E501
        :type state: str
        :param private: The private of this EventInput.  # noqa: E501
        :type private: bool
        """
        self.openapi_types = {
            'type': str,
            'body': str,
            'state': str,
            'private': bool
        }

        self.attribute_map = {
            'type': 'type',
            'body': 'body',
            'state': 'state',
            'private': 'private'
        }

        self._type = type
        self._body = body
        self._state = state
        self._private = private

    @classmethod
    def from_dict(cls, dikt) -> 'EventInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The EventInput of this EventInput.  # noqa: E501
        :rtype: EventInput
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this EventInput.


        :return: The type of this EventInput.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this EventInput.


        :param type: The type of this EventInput.
        :type type: str
        """

        self._type = type

    @property
    def body(self):
        """Gets the body of this EventInput.


        :return: The body of this EventInput.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this EventInput.


        :param body: The body of this EventInput.
        :type body: str
        """

        self._body = body

    @property
    def state(self):
        """Gets the state of this EventInput.


        :return: The state of this EventInput.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this EventInput.


        :param state: The state of this EventInput.
        :type state: str
        """

        self._state = state

    @property
    def private(self):
        """Gets the private of this EventInput.


        :return: The private of this EventInput.
        :rtype: bool
        """
        return self._private

    @private.setter
    def private(self, private):
        """Sets the private of this EventInput.


        :param private: The private of this EventInput.
        :type private: bool
        """

        self._private = private
