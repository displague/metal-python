# coding: utf-8

"""
    Metal API

    This is the API for Equinix Metal Product. Interact with your devices, user account, and projects.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@equinixmetal.com
    Generated by: https://openapi-generator.tech
"""


import inspect
import pprint
import re  # noqa: F401
import six

from metal.configuration import Configuration


class StaffPlan(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'name': 'str',
        'slug': 'str',
        'description': 'str',
        'line': 'str',
        'specs': 'object',
        'legacy': 'bool',
        'pricing': 'object',
        'available_in_codes': 'list[str]',
        'default_plan_version_id': 'str',
        'original_slug': 'str',
        'deployment_types': 'list[str]',
        'zoho_item_id': 'str',
        'configuration': 'object',
        'features': 'list[str]',
        'aliases': 'list[str]',
        'default_preinstallable_operating_system_id': 'str',
        'default_plan_version': 'StaffPlanVersion',
        'plan_versions': 'list[StaffPlanVersion]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'slug': 'slug',
        'description': 'description',
        'line': 'line',
        'specs': 'specs',
        'legacy': 'legacy',
        'pricing': 'pricing',
        'available_in_codes': 'available_in_codes',
        'default_plan_version_id': 'default_plan_version_id',
        'original_slug': 'original_slug',
        'deployment_types': 'deployment_types',
        'zoho_item_id': 'zoho_item_id',
        'configuration': 'configuration',
        'features': 'features',
        'aliases': 'aliases',
        'default_preinstallable_operating_system_id': 'default_preinstallable_operating_system_id',
        'default_plan_version': 'default_plan_version',
        'plan_versions': 'plan_versions'
    }

    def __init__(self, id=None, name=None, slug=None, description=None, line=None, specs=None, legacy=None, pricing=None, available_in_codes=None, default_plan_version_id=None, original_slug=None, deployment_types=None, zoho_item_id=None, configuration=None, features=None, aliases=None, default_preinstallable_operating_system_id=None, default_plan_version=None, plan_versions=None, local_vars_configuration=None):  # noqa: E501
        """StaffPlan - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._slug = None
        self._description = None
        self._line = None
        self._specs = None
        self._legacy = None
        self._pricing = None
        self._available_in_codes = None
        self._default_plan_version_id = None
        self._original_slug = None
        self._deployment_types = None
        self._zoho_item_id = None
        self._configuration = None
        self._features = None
        self._aliases = None
        self._default_preinstallable_operating_system_id = None
        self._default_plan_version = None
        self._plan_versions = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if slug is not None:
            self.slug = slug
        if description is not None:
            self.description = description
        if line is not None:
            self.line = line
        if specs is not None:
            self.specs = specs
        if legacy is not None:
            self.legacy = legacy
        if pricing is not None:
            self.pricing = pricing
        if available_in_codes is not None:
            self.available_in_codes = available_in_codes
        if default_plan_version_id is not None:
            self.default_plan_version_id = default_plan_version_id
        if original_slug is not None:
            self.original_slug = original_slug
        if deployment_types is not None:
            self.deployment_types = deployment_types
        if zoho_item_id is not None:
            self.zoho_item_id = zoho_item_id
        if configuration is not None:
            self.configuration = configuration
        if features is not None:
            self.features = features
        if aliases is not None:
            self.aliases = aliases
        if default_preinstallable_operating_system_id is not None:
            self.default_preinstallable_operating_system_id = default_preinstallable_operating_system_id
        if default_plan_version is not None:
            self.default_plan_version = default_plan_version
        if plan_versions is not None:
            self.plan_versions = plan_versions

    @property
    def id(self):
        """Gets the id of this StaffPlan.  # noqa: E501


        :return: The id of this StaffPlan.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StaffPlan.


        :param id: The id of this StaffPlan.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this StaffPlan.  # noqa: E501


        :return: The name of this StaffPlan.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StaffPlan.


        :param name: The name of this StaffPlan.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def slug(self):
        """Gets the slug of this StaffPlan.  # noqa: E501


        :return: The slug of this StaffPlan.  # noqa: E501
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this StaffPlan.


        :param slug: The slug of this StaffPlan.  # noqa: E501
        :type slug: str
        """

        self._slug = slug

    @property
    def description(self):
        """Gets the description of this StaffPlan.  # noqa: E501


        :return: The description of this StaffPlan.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this StaffPlan.


        :param description: The description of this StaffPlan.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def line(self):
        """Gets the line of this StaffPlan.  # noqa: E501


        :return: The line of this StaffPlan.  # noqa: E501
        :rtype: str
        """
        return self._line

    @line.setter
    def line(self, line):
        """Sets the line of this StaffPlan.


        :param line: The line of this StaffPlan.  # noqa: E501
        :type line: str
        """

        self._line = line

    @property
    def specs(self):
        """Gets the specs of this StaffPlan.  # noqa: E501


        :return: The specs of this StaffPlan.  # noqa: E501
        :rtype: object
        """
        return self._specs

    @specs.setter
    def specs(self, specs):
        """Sets the specs of this StaffPlan.


        :param specs: The specs of this StaffPlan.  # noqa: E501
        :type specs: object
        """

        self._specs = specs

    @property
    def legacy(self):
        """Gets the legacy of this StaffPlan.  # noqa: E501


        :return: The legacy of this StaffPlan.  # noqa: E501
        :rtype: bool
        """
        return self._legacy

    @legacy.setter
    def legacy(self, legacy):
        """Sets the legacy of this StaffPlan.


        :param legacy: The legacy of this StaffPlan.  # noqa: E501
        :type legacy: bool
        """

        self._legacy = legacy

    @property
    def pricing(self):
        """Gets the pricing of this StaffPlan.  # noqa: E501


        :return: The pricing of this StaffPlan.  # noqa: E501
        :rtype: object
        """
        return self._pricing

    @pricing.setter
    def pricing(self, pricing):
        """Sets the pricing of this StaffPlan.


        :param pricing: The pricing of this StaffPlan.  # noqa: E501
        :type pricing: object
        """

        self._pricing = pricing

    @property
    def available_in_codes(self):
        """Gets the available_in_codes of this StaffPlan.  # noqa: E501


        :return: The available_in_codes of this StaffPlan.  # noqa: E501
        :rtype: list[str]
        """
        return self._available_in_codes

    @available_in_codes.setter
    def available_in_codes(self, available_in_codes):
        """Sets the available_in_codes of this StaffPlan.


        :param available_in_codes: The available_in_codes of this StaffPlan.  # noqa: E501
        :type available_in_codes: list[str]
        """

        self._available_in_codes = available_in_codes

    @property
    def default_plan_version_id(self):
        """Gets the default_plan_version_id of this StaffPlan.  # noqa: E501


        :return: The default_plan_version_id of this StaffPlan.  # noqa: E501
        :rtype: str
        """
        return self._default_plan_version_id

    @default_plan_version_id.setter
    def default_plan_version_id(self, default_plan_version_id):
        """Sets the default_plan_version_id of this StaffPlan.


        :param default_plan_version_id: The default_plan_version_id of this StaffPlan.  # noqa: E501
        :type default_plan_version_id: str
        """

        self._default_plan_version_id = default_plan_version_id

    @property
    def original_slug(self):
        """Gets the original_slug of this StaffPlan.  # noqa: E501


        :return: The original_slug of this StaffPlan.  # noqa: E501
        :rtype: str
        """
        return self._original_slug

    @original_slug.setter
    def original_slug(self, original_slug):
        """Sets the original_slug of this StaffPlan.


        :param original_slug: The original_slug of this StaffPlan.  # noqa: E501
        :type original_slug: str
        """

        self._original_slug = original_slug

    @property
    def deployment_types(self):
        """Gets the deployment_types of this StaffPlan.  # noqa: E501


        :return: The deployment_types of this StaffPlan.  # noqa: E501
        :rtype: list[str]
        """
        return self._deployment_types

    @deployment_types.setter
    def deployment_types(self, deployment_types):
        """Sets the deployment_types of this StaffPlan.


        :param deployment_types: The deployment_types of this StaffPlan.  # noqa: E501
        :type deployment_types: list[str]
        """

        self._deployment_types = deployment_types

    @property
    def zoho_item_id(self):
        """Gets the zoho_item_id of this StaffPlan.  # noqa: E501


        :return: The zoho_item_id of this StaffPlan.  # noqa: E501
        :rtype: str
        """
        return self._zoho_item_id

    @zoho_item_id.setter
    def zoho_item_id(self, zoho_item_id):
        """Sets the zoho_item_id of this StaffPlan.


        :param zoho_item_id: The zoho_item_id of this StaffPlan.  # noqa: E501
        :type zoho_item_id: str
        """

        self._zoho_item_id = zoho_item_id

    @property
    def configuration(self):
        """Gets the configuration of this StaffPlan.  # noqa: E501


        :return: The configuration of this StaffPlan.  # noqa: E501
        :rtype: object
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """Sets the configuration of this StaffPlan.


        :param configuration: The configuration of this StaffPlan.  # noqa: E501
        :type configuration: object
        """

        self._configuration = configuration

    @property
    def features(self):
        """Gets the features of this StaffPlan.  # noqa: E501


        :return: The features of this StaffPlan.  # noqa: E501
        :rtype: list[str]
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this StaffPlan.


        :param features: The features of this StaffPlan.  # noqa: E501
        :type features: list[str]
        """

        self._features = features

    @property
    def aliases(self):
        """Gets the aliases of this StaffPlan.  # noqa: E501


        :return: The aliases of this StaffPlan.  # noqa: E501
        :rtype: list[str]
        """
        return self._aliases

    @aliases.setter
    def aliases(self, aliases):
        """Sets the aliases of this StaffPlan.


        :param aliases: The aliases of this StaffPlan.  # noqa: E501
        :type aliases: list[str]
        """

        self._aliases = aliases

    @property
    def default_preinstallable_operating_system_id(self):
        """Gets the default_preinstallable_operating_system_id of this StaffPlan.  # noqa: E501


        :return: The default_preinstallable_operating_system_id of this StaffPlan.  # noqa: E501
        :rtype: str
        """
        return self._default_preinstallable_operating_system_id

    @default_preinstallable_operating_system_id.setter
    def default_preinstallable_operating_system_id(self, default_preinstallable_operating_system_id):
        """Sets the default_preinstallable_operating_system_id of this StaffPlan.


        :param default_preinstallable_operating_system_id: The default_preinstallable_operating_system_id of this StaffPlan.  # noqa: E501
        :type default_preinstallable_operating_system_id: str
        """

        self._default_preinstallable_operating_system_id = default_preinstallable_operating_system_id

    @property
    def default_plan_version(self):
        """Gets the default_plan_version of this StaffPlan.  # noqa: E501


        :return: The default_plan_version of this StaffPlan.  # noqa: E501
        :rtype: StaffPlanVersion
        """
        return self._default_plan_version

    @default_plan_version.setter
    def default_plan_version(self, default_plan_version):
        """Sets the default_plan_version of this StaffPlan.


        :param default_plan_version: The default_plan_version of this StaffPlan.  # noqa: E501
        :type default_plan_version: StaffPlanVersion
        """

        self._default_plan_version = default_plan_version

    @property
    def plan_versions(self):
        """Gets the plan_versions of this StaffPlan.  # noqa: E501


        :return: The plan_versions of this StaffPlan.  # noqa: E501
        :rtype: list[StaffPlanVersion]
        """
        return self._plan_versions

    @plan_versions.setter
    def plan_versions(self, plan_versions):
        """Sets the plan_versions of this StaffPlan.


        :param plan_versions: The plan_versions of this StaffPlan.  # noqa: E501
        :type plan_versions: list[StaffPlanVersion]
        """

        self._plan_versions = plan_versions

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = inspect.getargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StaffPlan):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StaffPlan):
            return True

        return self.to_dict() != other.to_dict()
