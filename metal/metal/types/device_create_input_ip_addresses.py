# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from metal.types.base_model_ import Model
from metal import util


class DeviceCreateInputIpAddresses(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address_family=None, public=True, cidr=None, ip_reservations=None):  # noqa: E501
        """DeviceCreateInputIpAddresses - a model defined in OpenAPI

        :param address_family: The address_family of this DeviceCreateInputIpAddresses.  # noqa: E501
        :type address_family: float
        :param public: The public of this DeviceCreateInputIpAddresses.  # noqa: E501
        :type public: bool
        :param cidr: The cidr of this DeviceCreateInputIpAddresses.  # noqa: E501
        :type cidr: float
        :param ip_reservations: The ip_reservations of this DeviceCreateInputIpAddresses.  # noqa: E501
        :type ip_reservations: List[str]
        """
        self.openapi_types = {
            'address_family': float,
            'public': bool,
            'cidr': float,
            'ip_reservations': List[str]
        }

        self.attribute_map = {
            'address_family': 'address_family',
            'public': 'public',
            'cidr': 'cidr',
            'ip_reservations': 'ip_reservations'
        }

        self._address_family = address_family
        self._public = public
        self._cidr = cidr
        self._ip_reservations = ip_reservations

    @classmethod
    def from_dict(cls, dikt) -> 'DeviceCreateInputIpAddresses':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DeviceCreateInput_ip_addresses of this DeviceCreateInputIpAddresses.  # noqa: E501
        :rtype: DeviceCreateInputIpAddresses
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address_family(self):
        """Gets the address_family of this DeviceCreateInputIpAddresses.

        Address Family for IP Address  # noqa: E501

        :return: The address_family of this DeviceCreateInputIpAddresses.
        :rtype: float
        """
        return self._address_family

    @address_family.setter
    def address_family(self, address_family):
        """Sets the address_family of this DeviceCreateInputIpAddresses.

        Address Family for IP Address  # noqa: E501

        :param address_family: The address_family of this DeviceCreateInputIpAddresses.
        :type address_family: float
        """

        self._address_family = address_family

    @property
    def public(self):
        """Gets the public of this DeviceCreateInputIpAddresses.

        Address Type for IP Address  # noqa: E501

        :return: The public of this DeviceCreateInputIpAddresses.
        :rtype: bool
        """
        return self._public

    @public.setter
    def public(self, public):
        """Sets the public of this DeviceCreateInputIpAddresses.

        Address Type for IP Address  # noqa: E501

        :param public: The public of this DeviceCreateInputIpAddresses.
        :type public: bool
        """

        self._public = public

    @property
    def cidr(self):
        """Gets the cidr of this DeviceCreateInputIpAddresses.

        Cidr Size for the IP Block created. Valid values depends on the operating system being provisioned. (28..32 for IPv4 addresses, 124..127 for IPv6 addresses)  # noqa: E501

        :return: The cidr of this DeviceCreateInputIpAddresses.
        :rtype: float
        """
        return self._cidr

    @cidr.setter
    def cidr(self, cidr):
        """Sets the cidr of this DeviceCreateInputIpAddresses.

        Cidr Size for the IP Block created. Valid values depends on the operating system being provisioned. (28..32 for IPv4 addresses, 124..127 for IPv6 addresses)  # noqa: E501

        :param cidr: The cidr of this DeviceCreateInputIpAddresses.
        :type cidr: float
        """

        self._cidr = cidr

    @property
    def ip_reservations(self):
        """Gets the ip_reservations of this DeviceCreateInputIpAddresses.

        UUIDs of any IP reservations to use when assigning IPs  # noqa: E501

        :return: The ip_reservations of this DeviceCreateInputIpAddresses.
        :rtype: List[str]
        """
        return self._ip_reservations

    @ip_reservations.setter
    def ip_reservations(self, ip_reservations):
        """Sets the ip_reservations of this DeviceCreateInputIpAddresses.

        UUIDs of any IP reservations to use when assigning IPs  # noqa: E501

        :param ip_reservations: The ip_reservations of this DeviceCreateInputIpAddresses.
        :type ip_reservations: List[str]
        """

        self._ip_reservations = ip_reservations
