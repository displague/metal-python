# coding: utf-8

"""
    Metal API

    This is the API for Equinix Metal Product. Interact with your devices, user account, and projects.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@equinixmetal.com
    Generated by: https://openapi-generator.tech
"""


import inspect
import pprint
import re  # noqa: F401
import six

from metal.configuration import Configuration


class StaffHardware(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'arch': 'str',
        'bios_password': 'str',
        'data': 'object',
        'dhcp_group': 'str',
        'efi_boot': 'bool',
        'hostname': 'str',
        'leased': 'bool',
        'location': 'str',
        'maintenance_state': 'str',
        'management': 'object',
        'model_number': 'str',
        'name': 'str',
        'rack_spaces_labels': 'str',
        'serial_number': 'str',
        'services': 'object',
        'state': 'str',
        'supported_networking': 'list[str]',
        'type': 'str',
        'u_spaces': 'int',
        'reserved': 'bool',
        'link_aggregation': 'str',
        'vrf': 'str',
        'provisioner': 'str',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'bonding_mode': 'int',
        'total_provisions': 'int',
        'successful_provisions': 'int',
        'failed_provisions': 'int',
        'last_provision_success': 'datetime',
        'last_provision_failed': 'datetime',
        'last_deprovision_success': 'datetime',
        'last_deprovision_failed': 'datetime',
        'uefi_supports_rfc3021': 'bool',
        'facility': 'StaffFacilityLittle',
        'facility_room': 'StaffFacilityRoom',
        'cage': 'StaffCage',
        'row': 'StaffRow',
        'server_rack': 'StaffServerRack',
        'manufacturer': 'StaffManufacturer',
        'plan_verion': 'StaffPlanVersion',
        'leased_from': 'StaffProvider',
        'plan': 'StaffPlan',
        'ip_assignments': 'list[StaffIpAddress]',
        'notes': 'list[StaffNote]',
        'rack_spaces': 'list[StaffRackSpace]',
        'ip_blocks': 'list[StaffIpAddress]',
        'instance': 'StaffInstance',
        'hardware_reservation': 'StaffHardwareReservationV1',
        'preinstalled_operating_system_version': 'StaffOperatingSystemVersion'
    }

    attribute_map = {
        'id': 'id',
        'arch': 'arch',
        'bios_password': 'bios_password',
        'data': 'data',
        'dhcp_group': 'dhcp_group',
        'efi_boot': 'efi_boot',
        'hostname': 'hostname',
        'leased': 'leased',
        'location': 'location',
        'maintenance_state': 'maintenance_state',
        'management': 'management',
        'model_number': 'model_number',
        'name': 'name',
        'rack_spaces_labels': 'rack_spaces_labels',
        'serial_number': 'serial_number',
        'services': 'services',
        'state': 'state',
        'supported_networking': 'supported_networking',
        'type': 'type',
        'u_spaces': 'u_spaces',
        'reserved': 'reserved',
        'link_aggregation': 'link_aggregation',
        'vrf': 'vrf',
        'provisioner': 'provisioner',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'bonding_mode': 'bonding_mode',
        'total_provisions': 'total_provisions',
        'successful_provisions': 'successful_provisions',
        'failed_provisions': 'failed_provisions',
        'last_provision_success': 'last_provision_success',
        'last_provision_failed': 'last_provision_failed',
        'last_deprovision_success': 'last_deprovision_success',
        'last_deprovision_failed': 'last_deprovision_failed',
        'uefi_supports_rfc3021': 'uefi_supports_rfc3021',
        'facility': 'facility',
        'facility_room': 'facility_room',
        'cage': 'cage',
        'row': 'row',
        'server_rack': 'server_rack',
        'manufacturer': 'manufacturer',
        'plan_verion': 'plan_verion',
        'leased_from': 'leased_from',
        'plan': 'plan',
        'ip_assignments': 'ip_assignments',
        'notes': 'notes',
        'rack_spaces': 'rack_spaces',
        'ip_blocks': 'ip_blocks',
        'instance': 'instance',
        'hardware_reservation': 'hardware_reservation',
        'preinstalled_operating_system_version': 'preinstalled_operating_system_version'
    }

    def __init__(self, id=None, arch=None, bios_password=None, data=None, dhcp_group=None, efi_boot=None, hostname=None, leased=None, location=None, maintenance_state=None, management=None, model_number=None, name=None, rack_spaces_labels=None, serial_number=None, services=None, state=None, supported_networking=None, type=None, u_spaces=None, reserved=None, link_aggregation=None, vrf=None, provisioner=None, created_at=None, updated_at=None, bonding_mode=None, total_provisions=None, successful_provisions=None, failed_provisions=None, last_provision_success=None, last_provision_failed=None, last_deprovision_success=None, last_deprovision_failed=None, uefi_supports_rfc3021=None, facility=None, facility_room=None, cage=None, row=None, server_rack=None, manufacturer=None, plan_verion=None, leased_from=None, plan=None, ip_assignments=None, notes=None, rack_spaces=None, ip_blocks=None, instance=None, hardware_reservation=None, preinstalled_operating_system_version=None, local_vars_configuration=None):  # noqa: E501
        """StaffHardware - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._arch = None
        self._bios_password = None
        self._data = None
        self._dhcp_group = None
        self._efi_boot = None
        self._hostname = None
        self._leased = None
        self._location = None
        self._maintenance_state = None
        self._management = None
        self._model_number = None
        self._name = None
        self._rack_spaces_labels = None
        self._serial_number = None
        self._services = None
        self._state = None
        self._supported_networking = None
        self._type = None
        self._u_spaces = None
        self._reserved = None
        self._link_aggregation = None
        self._vrf = None
        self._provisioner = None
        self._created_at = None
        self._updated_at = None
        self._bonding_mode = None
        self._total_provisions = None
        self._successful_provisions = None
        self._failed_provisions = None
        self._last_provision_success = None
        self._last_provision_failed = None
        self._last_deprovision_success = None
        self._last_deprovision_failed = None
        self._uefi_supports_rfc3021 = None
        self._facility = None
        self._facility_room = None
        self._cage = None
        self._row = None
        self._server_rack = None
        self._manufacturer = None
        self._plan_verion = None
        self._leased_from = None
        self._plan = None
        self._ip_assignments = None
        self._notes = None
        self._rack_spaces = None
        self._ip_blocks = None
        self._instance = None
        self._hardware_reservation = None
        self._preinstalled_operating_system_version = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if arch is not None:
            self.arch = arch
        if bios_password is not None:
            self.bios_password = bios_password
        if data is not None:
            self.data = data
        if dhcp_group is not None:
            self.dhcp_group = dhcp_group
        if efi_boot is not None:
            self.efi_boot = efi_boot
        if hostname is not None:
            self.hostname = hostname
        if leased is not None:
            self.leased = leased
        if location is not None:
            self.location = location
        if maintenance_state is not None:
            self.maintenance_state = maintenance_state
        if management is not None:
            self.management = management
        if model_number is not None:
            self.model_number = model_number
        if name is not None:
            self.name = name
        if rack_spaces_labels is not None:
            self.rack_spaces_labels = rack_spaces_labels
        if serial_number is not None:
            self.serial_number = serial_number
        if services is not None:
            self.services = services
        if state is not None:
            self.state = state
        if supported_networking is not None:
            self.supported_networking = supported_networking
        if type is not None:
            self.type = type
        if u_spaces is not None:
            self.u_spaces = u_spaces
        if reserved is not None:
            self.reserved = reserved
        if link_aggregation is not None:
            self.link_aggregation = link_aggregation
        if vrf is not None:
            self.vrf = vrf
        if provisioner is not None:
            self.provisioner = provisioner
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if bonding_mode is not None:
            self.bonding_mode = bonding_mode
        if total_provisions is not None:
            self.total_provisions = total_provisions
        if successful_provisions is not None:
            self.successful_provisions = successful_provisions
        if failed_provisions is not None:
            self.failed_provisions = failed_provisions
        if last_provision_success is not None:
            self.last_provision_success = last_provision_success
        if last_provision_failed is not None:
            self.last_provision_failed = last_provision_failed
        if last_deprovision_success is not None:
            self.last_deprovision_success = last_deprovision_success
        if last_deprovision_failed is not None:
            self.last_deprovision_failed = last_deprovision_failed
        if uefi_supports_rfc3021 is not None:
            self.uefi_supports_rfc3021 = uefi_supports_rfc3021
        if facility is not None:
            self.facility = facility
        if facility_room is not None:
            self.facility_room = facility_room
        if cage is not None:
            self.cage = cage
        if row is not None:
            self.row = row
        if server_rack is not None:
            self.server_rack = server_rack
        if manufacturer is not None:
            self.manufacturer = manufacturer
        if plan_verion is not None:
            self.plan_verion = plan_verion
        if leased_from is not None:
            self.leased_from = leased_from
        if plan is not None:
            self.plan = plan
        if ip_assignments is not None:
            self.ip_assignments = ip_assignments
        if notes is not None:
            self.notes = notes
        if rack_spaces is not None:
            self.rack_spaces = rack_spaces
        if ip_blocks is not None:
            self.ip_blocks = ip_blocks
        if instance is not None:
            self.instance = instance
        if hardware_reservation is not None:
            self.hardware_reservation = hardware_reservation
        if preinstalled_operating_system_version is not None:
            self.preinstalled_operating_system_version = preinstalled_operating_system_version

    @property
    def id(self):
        """Gets the id of this StaffHardware.  # noqa: E501


        :return: The id of this StaffHardware.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StaffHardware.


        :param id: The id of this StaffHardware.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def arch(self):
        """Gets the arch of this StaffHardware.  # noqa: E501


        :return: The arch of this StaffHardware.  # noqa: E501
        :rtype: str
        """
        return self._arch

    @arch.setter
    def arch(self, arch):
        """Sets the arch of this StaffHardware.


        :param arch: The arch of this StaffHardware.  # noqa: E501
        :type arch: str
        """

        self._arch = arch

    @property
    def bios_password(self):
        """Gets the bios_password of this StaffHardware.  # noqa: E501


        :return: The bios_password of this StaffHardware.  # noqa: E501
        :rtype: str
        """
        return self._bios_password

    @bios_password.setter
    def bios_password(self, bios_password):
        """Sets the bios_password of this StaffHardware.


        :param bios_password: The bios_password of this StaffHardware.  # noqa: E501
        :type bios_password: str
        """

        self._bios_password = bios_password

    @property
    def data(self):
        """Gets the data of this StaffHardware.  # noqa: E501


        :return: The data of this StaffHardware.  # noqa: E501
        :rtype: object
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this StaffHardware.


        :param data: The data of this StaffHardware.  # noqa: E501
        :type data: object
        """

        self._data = data

    @property
    def dhcp_group(self):
        """Gets the dhcp_group of this StaffHardware.  # noqa: E501


        :return: The dhcp_group of this StaffHardware.  # noqa: E501
        :rtype: str
        """
        return self._dhcp_group

    @dhcp_group.setter
    def dhcp_group(self, dhcp_group):
        """Sets the dhcp_group of this StaffHardware.


        :param dhcp_group: The dhcp_group of this StaffHardware.  # noqa: E501
        :type dhcp_group: str
        """

        self._dhcp_group = dhcp_group

    @property
    def efi_boot(self):
        """Gets the efi_boot of this StaffHardware.  # noqa: E501


        :return: The efi_boot of this StaffHardware.  # noqa: E501
        :rtype: bool
        """
        return self._efi_boot

    @efi_boot.setter
    def efi_boot(self, efi_boot):
        """Sets the efi_boot of this StaffHardware.


        :param efi_boot: The efi_boot of this StaffHardware.  # noqa: E501
        :type efi_boot: bool
        """

        self._efi_boot = efi_boot

    @property
    def hostname(self):
        """Gets the hostname of this StaffHardware.  # noqa: E501


        :return: The hostname of this StaffHardware.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this StaffHardware.


        :param hostname: The hostname of this StaffHardware.  # noqa: E501
        :type hostname: str
        """

        self._hostname = hostname

    @property
    def leased(self):
        """Gets the leased of this StaffHardware.  # noqa: E501


        :return: The leased of this StaffHardware.  # noqa: E501
        :rtype: bool
        """
        return self._leased

    @leased.setter
    def leased(self, leased):
        """Sets the leased of this StaffHardware.


        :param leased: The leased of this StaffHardware.  # noqa: E501
        :type leased: bool
        """

        self._leased = leased

    @property
    def location(self):
        """Gets the location of this StaffHardware.  # noqa: E501


        :return: The location of this StaffHardware.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this StaffHardware.


        :param location: The location of this StaffHardware.  # noqa: E501
        :type location: str
        """

        self._location = location

    @property
    def maintenance_state(self):
        """Gets the maintenance_state of this StaffHardware.  # noqa: E501


        :return: The maintenance_state of this StaffHardware.  # noqa: E501
        :rtype: str
        """
        return self._maintenance_state

    @maintenance_state.setter
    def maintenance_state(self, maintenance_state):
        """Sets the maintenance_state of this StaffHardware.


        :param maintenance_state: The maintenance_state of this StaffHardware.  # noqa: E501
        :type maintenance_state: str
        """

        self._maintenance_state = maintenance_state

    @property
    def management(self):
        """Gets the management of this StaffHardware.  # noqa: E501


        :return: The management of this StaffHardware.  # noqa: E501
        :rtype: object
        """
        return self._management

    @management.setter
    def management(self, management):
        """Sets the management of this StaffHardware.


        :param management: The management of this StaffHardware.  # noqa: E501
        :type management: object
        """

        self._management = management

    @property
    def model_number(self):
        """Gets the model_number of this StaffHardware.  # noqa: E501


        :return: The model_number of this StaffHardware.  # noqa: E501
        :rtype: str
        """
        return self._model_number

    @model_number.setter
    def model_number(self, model_number):
        """Sets the model_number of this StaffHardware.


        :param model_number: The model_number of this StaffHardware.  # noqa: E501
        :type model_number: str
        """

        self._model_number = model_number

    @property
    def name(self):
        """Gets the name of this StaffHardware.  # noqa: E501


        :return: The name of this StaffHardware.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StaffHardware.


        :param name: The name of this StaffHardware.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def rack_spaces_labels(self):
        """Gets the rack_spaces_labels of this StaffHardware.  # noqa: E501


        :return: The rack_spaces_labels of this StaffHardware.  # noqa: E501
        :rtype: str
        """
        return self._rack_spaces_labels

    @rack_spaces_labels.setter
    def rack_spaces_labels(self, rack_spaces_labels):
        """Sets the rack_spaces_labels of this StaffHardware.


        :param rack_spaces_labels: The rack_spaces_labels of this StaffHardware.  # noqa: E501
        :type rack_spaces_labels: str
        """

        self._rack_spaces_labels = rack_spaces_labels

    @property
    def serial_number(self):
        """Gets the serial_number of this StaffHardware.  # noqa: E501


        :return: The serial_number of this StaffHardware.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this StaffHardware.


        :param serial_number: The serial_number of this StaffHardware.  # noqa: E501
        :type serial_number: str
        """

        self._serial_number = serial_number

    @property
    def services(self):
        """Gets the services of this StaffHardware.  # noqa: E501


        :return: The services of this StaffHardware.  # noqa: E501
        :rtype: object
        """
        return self._services

    @services.setter
    def services(self, services):
        """Sets the services of this StaffHardware.


        :param services: The services of this StaffHardware.  # noqa: E501
        :type services: object
        """

        self._services = services

    @property
    def state(self):
        """Gets the state of this StaffHardware.  # noqa: E501


        :return: The state of this StaffHardware.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this StaffHardware.


        :param state: The state of this StaffHardware.  # noqa: E501
        :type state: str
        """

        self._state = state

    @property
    def supported_networking(self):
        """Gets the supported_networking of this StaffHardware.  # noqa: E501


        :return: The supported_networking of this StaffHardware.  # noqa: E501
        :rtype: list[str]
        """
        return self._supported_networking

    @supported_networking.setter
    def supported_networking(self, supported_networking):
        """Sets the supported_networking of this StaffHardware.


        :param supported_networking: The supported_networking of this StaffHardware.  # noqa: E501
        :type supported_networking: list[str]
        """

        self._supported_networking = supported_networking

    @property
    def type(self):
        """Gets the type of this StaffHardware.  # noqa: E501


        :return: The type of this StaffHardware.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this StaffHardware.


        :param type: The type of this StaffHardware.  # noqa: E501
        :type type: str
        """

        self._type = type

    @property
    def u_spaces(self):
        """Gets the u_spaces of this StaffHardware.  # noqa: E501


        :return: The u_spaces of this StaffHardware.  # noqa: E501
        :rtype: int
        """
        return self._u_spaces

    @u_spaces.setter
    def u_spaces(self, u_spaces):
        """Sets the u_spaces of this StaffHardware.


        :param u_spaces: The u_spaces of this StaffHardware.  # noqa: E501
        :type u_spaces: int
        """

        self._u_spaces = u_spaces

    @property
    def reserved(self):
        """Gets the reserved of this StaffHardware.  # noqa: E501


        :return: The reserved of this StaffHardware.  # noqa: E501
        :rtype: bool
        """
        return self._reserved

    @reserved.setter
    def reserved(self, reserved):
        """Sets the reserved of this StaffHardware.


        :param reserved: The reserved of this StaffHardware.  # noqa: E501
        :type reserved: bool
        """

        self._reserved = reserved

    @property
    def link_aggregation(self):
        """Gets the link_aggregation of this StaffHardware.  # noqa: E501


        :return: The link_aggregation of this StaffHardware.  # noqa: E501
        :rtype: str
        """
        return self._link_aggregation

    @link_aggregation.setter
    def link_aggregation(self, link_aggregation):
        """Sets the link_aggregation of this StaffHardware.


        :param link_aggregation: The link_aggregation of this StaffHardware.  # noqa: E501
        :type link_aggregation: str
        """

        self._link_aggregation = link_aggregation

    @property
    def vrf(self):
        """Gets the vrf of this StaffHardware.  # noqa: E501

        Attribute included only if the hardware is of type Switch  # noqa: E501

        :return: The vrf of this StaffHardware.  # noqa: E501
        :rtype: str
        """
        return self._vrf

    @vrf.setter
    def vrf(self, vrf):
        """Sets the vrf of this StaffHardware.

        Attribute included only if the hardware is of type Switch  # noqa: E501

        :param vrf: The vrf of this StaffHardware.  # noqa: E501
        :type vrf: str
        """

        self._vrf = vrf

    @property
    def provisioner(self):
        """Gets the provisioner of this StaffHardware.  # noqa: E501


        :return: The provisioner of this StaffHardware.  # noqa: E501
        :rtype: str
        """
        return self._provisioner

    @provisioner.setter
    def provisioner(self, provisioner):
        """Sets the provisioner of this StaffHardware.


        :param provisioner: The provisioner of this StaffHardware.  # noqa: E501
        :type provisioner: str
        """

        self._provisioner = provisioner

    @property
    def created_at(self):
        """Gets the created_at of this StaffHardware.  # noqa: E501


        :return: The created_at of this StaffHardware.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this StaffHardware.


        :param created_at: The created_at of this StaffHardware.  # noqa: E501
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this StaffHardware.  # noqa: E501


        :return: The updated_at of this StaffHardware.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this StaffHardware.


        :param updated_at: The updated_at of this StaffHardware.  # noqa: E501
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def bonding_mode(self):
        """Gets the bonding_mode of this StaffHardware.  # noqa: E501


        :return: The bonding_mode of this StaffHardware.  # noqa: E501
        :rtype: int
        """
        return self._bonding_mode

    @bonding_mode.setter
    def bonding_mode(self, bonding_mode):
        """Sets the bonding_mode of this StaffHardware.


        :param bonding_mode: The bonding_mode of this StaffHardware.  # noqa: E501
        :type bonding_mode: int
        """

        self._bonding_mode = bonding_mode

    @property
    def total_provisions(self):
        """Gets the total_provisions of this StaffHardware.  # noqa: E501


        :return: The total_provisions of this StaffHardware.  # noqa: E501
        :rtype: int
        """
        return self._total_provisions

    @total_provisions.setter
    def total_provisions(self, total_provisions):
        """Sets the total_provisions of this StaffHardware.


        :param total_provisions: The total_provisions of this StaffHardware.  # noqa: E501
        :type total_provisions: int
        """

        self._total_provisions = total_provisions

    @property
    def successful_provisions(self):
        """Gets the successful_provisions of this StaffHardware.  # noqa: E501


        :return: The successful_provisions of this StaffHardware.  # noqa: E501
        :rtype: int
        """
        return self._successful_provisions

    @successful_provisions.setter
    def successful_provisions(self, successful_provisions):
        """Sets the successful_provisions of this StaffHardware.


        :param successful_provisions: The successful_provisions of this StaffHardware.  # noqa: E501
        :type successful_provisions: int
        """

        self._successful_provisions = successful_provisions

    @property
    def failed_provisions(self):
        """Gets the failed_provisions of this StaffHardware.  # noqa: E501


        :return: The failed_provisions of this StaffHardware.  # noqa: E501
        :rtype: int
        """
        return self._failed_provisions

    @failed_provisions.setter
    def failed_provisions(self, failed_provisions):
        """Sets the failed_provisions of this StaffHardware.


        :param failed_provisions: The failed_provisions of this StaffHardware.  # noqa: E501
        :type failed_provisions: int
        """

        self._failed_provisions = failed_provisions

    @property
    def last_provision_success(self):
        """Gets the last_provision_success of this StaffHardware.  # noqa: E501


        :return: The last_provision_success of this StaffHardware.  # noqa: E501
        :rtype: datetime
        """
        return self._last_provision_success

    @last_provision_success.setter
    def last_provision_success(self, last_provision_success):
        """Sets the last_provision_success of this StaffHardware.


        :param last_provision_success: The last_provision_success of this StaffHardware.  # noqa: E501
        :type last_provision_success: datetime
        """

        self._last_provision_success = last_provision_success

    @property
    def last_provision_failed(self):
        """Gets the last_provision_failed of this StaffHardware.  # noqa: E501


        :return: The last_provision_failed of this StaffHardware.  # noqa: E501
        :rtype: datetime
        """
        return self._last_provision_failed

    @last_provision_failed.setter
    def last_provision_failed(self, last_provision_failed):
        """Sets the last_provision_failed of this StaffHardware.


        :param last_provision_failed: The last_provision_failed of this StaffHardware.  # noqa: E501
        :type last_provision_failed: datetime
        """

        self._last_provision_failed = last_provision_failed

    @property
    def last_deprovision_success(self):
        """Gets the last_deprovision_success of this StaffHardware.  # noqa: E501


        :return: The last_deprovision_success of this StaffHardware.  # noqa: E501
        :rtype: datetime
        """
        return self._last_deprovision_success

    @last_deprovision_success.setter
    def last_deprovision_success(self, last_deprovision_success):
        """Sets the last_deprovision_success of this StaffHardware.


        :param last_deprovision_success: The last_deprovision_success of this StaffHardware.  # noqa: E501
        :type last_deprovision_success: datetime
        """

        self._last_deprovision_success = last_deprovision_success

    @property
    def last_deprovision_failed(self):
        """Gets the last_deprovision_failed of this StaffHardware.  # noqa: E501


        :return: The last_deprovision_failed of this StaffHardware.  # noqa: E501
        :rtype: datetime
        """
        return self._last_deprovision_failed

    @last_deprovision_failed.setter
    def last_deprovision_failed(self, last_deprovision_failed):
        """Sets the last_deprovision_failed of this StaffHardware.


        :param last_deprovision_failed: The last_deprovision_failed of this StaffHardware.  # noqa: E501
        :type last_deprovision_failed: datetime
        """

        self._last_deprovision_failed = last_deprovision_failed

    @property
    def uefi_supports_rfc3021(self):
        """Gets the uefi_supports_rfc3021 of this StaffHardware.  # noqa: E501


        :return: The uefi_supports_rfc3021 of this StaffHardware.  # noqa: E501
        :rtype: bool
        """
        return self._uefi_supports_rfc3021

    @uefi_supports_rfc3021.setter
    def uefi_supports_rfc3021(self, uefi_supports_rfc3021):
        """Sets the uefi_supports_rfc3021 of this StaffHardware.


        :param uefi_supports_rfc3021: The uefi_supports_rfc3021 of this StaffHardware.  # noqa: E501
        :type uefi_supports_rfc3021: bool
        """

        self._uefi_supports_rfc3021 = uefi_supports_rfc3021

    @property
    def facility(self):
        """Gets the facility of this StaffHardware.  # noqa: E501


        :return: The facility of this StaffHardware.  # noqa: E501
        :rtype: StaffFacilityLittle
        """
        return self._facility

    @facility.setter
    def facility(self, facility):
        """Sets the facility of this StaffHardware.


        :param facility: The facility of this StaffHardware.  # noqa: E501
        :type facility: StaffFacilityLittle
        """

        self._facility = facility

    @property
    def facility_room(self):
        """Gets the facility_room of this StaffHardware.  # noqa: E501


        :return: The facility_room of this StaffHardware.  # noqa: E501
        :rtype: StaffFacilityRoom
        """
        return self._facility_room

    @facility_room.setter
    def facility_room(self, facility_room):
        """Sets the facility_room of this StaffHardware.


        :param facility_room: The facility_room of this StaffHardware.  # noqa: E501
        :type facility_room: StaffFacilityRoom
        """

        self._facility_room = facility_room

    @property
    def cage(self):
        """Gets the cage of this StaffHardware.  # noqa: E501


        :return: The cage of this StaffHardware.  # noqa: E501
        :rtype: StaffCage
        """
        return self._cage

    @cage.setter
    def cage(self, cage):
        """Sets the cage of this StaffHardware.


        :param cage: The cage of this StaffHardware.  # noqa: E501
        :type cage: StaffCage
        """

        self._cage = cage

    @property
    def row(self):
        """Gets the row of this StaffHardware.  # noqa: E501


        :return: The row of this StaffHardware.  # noqa: E501
        :rtype: StaffRow
        """
        return self._row

    @row.setter
    def row(self, row):
        """Sets the row of this StaffHardware.


        :param row: The row of this StaffHardware.  # noqa: E501
        :type row: StaffRow
        """

        self._row = row

    @property
    def server_rack(self):
        """Gets the server_rack of this StaffHardware.  # noqa: E501


        :return: The server_rack of this StaffHardware.  # noqa: E501
        :rtype: StaffServerRack
        """
        return self._server_rack

    @server_rack.setter
    def server_rack(self, server_rack):
        """Sets the server_rack of this StaffHardware.


        :param server_rack: The server_rack of this StaffHardware.  # noqa: E501
        :type server_rack: StaffServerRack
        """

        self._server_rack = server_rack

    @property
    def manufacturer(self):
        """Gets the manufacturer of this StaffHardware.  # noqa: E501


        :return: The manufacturer of this StaffHardware.  # noqa: E501
        :rtype: StaffManufacturer
        """
        return self._manufacturer

    @manufacturer.setter
    def manufacturer(self, manufacturer):
        """Sets the manufacturer of this StaffHardware.


        :param manufacturer: The manufacturer of this StaffHardware.  # noqa: E501
        :type manufacturer: StaffManufacturer
        """

        self._manufacturer = manufacturer

    @property
    def plan_verion(self):
        """Gets the plan_verion of this StaffHardware.  # noqa: E501


        :return: The plan_verion of this StaffHardware.  # noqa: E501
        :rtype: StaffPlanVersion
        """
        return self._plan_verion

    @plan_verion.setter
    def plan_verion(self, plan_verion):
        """Sets the plan_verion of this StaffHardware.


        :param plan_verion: The plan_verion of this StaffHardware.  # noqa: E501
        :type plan_verion: StaffPlanVersion
        """

        self._plan_verion = plan_verion

    @property
    def leased_from(self):
        """Gets the leased_from of this StaffHardware.  # noqa: E501


        :return: The leased_from of this StaffHardware.  # noqa: E501
        :rtype: StaffProvider
        """
        return self._leased_from

    @leased_from.setter
    def leased_from(self, leased_from):
        """Sets the leased_from of this StaffHardware.


        :param leased_from: The leased_from of this StaffHardware.  # noqa: E501
        :type leased_from: StaffProvider
        """

        self._leased_from = leased_from

    @property
    def plan(self):
        """Gets the plan of this StaffHardware.  # noqa: E501


        :return: The plan of this StaffHardware.  # noqa: E501
        :rtype: StaffPlan
        """
        return self._plan

    @plan.setter
    def plan(self, plan):
        """Sets the plan of this StaffHardware.


        :param plan: The plan of this StaffHardware.  # noqa: E501
        :type plan: StaffPlan
        """

        self._plan = plan

    @property
    def ip_assignments(self):
        """Gets the ip_assignments of this StaffHardware.  # noqa: E501


        :return: The ip_assignments of this StaffHardware.  # noqa: E501
        :rtype: list[StaffIpAddress]
        """
        return self._ip_assignments

    @ip_assignments.setter
    def ip_assignments(self, ip_assignments):
        """Sets the ip_assignments of this StaffHardware.


        :param ip_assignments: The ip_assignments of this StaffHardware.  # noqa: E501
        :type ip_assignments: list[StaffIpAddress]
        """

        self._ip_assignments = ip_assignments

    @property
    def notes(self):
        """Gets the notes of this StaffHardware.  # noqa: E501


        :return: The notes of this StaffHardware.  # noqa: E501
        :rtype: list[StaffNote]
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this StaffHardware.


        :param notes: The notes of this StaffHardware.  # noqa: E501
        :type notes: list[StaffNote]
        """

        self._notes = notes

    @property
    def rack_spaces(self):
        """Gets the rack_spaces of this StaffHardware.  # noqa: E501


        :return: The rack_spaces of this StaffHardware.  # noqa: E501
        :rtype: list[StaffRackSpace]
        """
        return self._rack_spaces

    @rack_spaces.setter
    def rack_spaces(self, rack_spaces):
        """Sets the rack_spaces of this StaffHardware.


        :param rack_spaces: The rack_spaces of this StaffHardware.  # noqa: E501
        :type rack_spaces: list[StaffRackSpace]
        """

        self._rack_spaces = rack_spaces

    @property
    def ip_blocks(self):
        """Gets the ip_blocks of this StaffHardware.  # noqa: E501

        Attribute included only if the hardware is of type Switch  # noqa: E501

        :return: The ip_blocks of this StaffHardware.  # noqa: E501
        :rtype: list[StaffIpAddress]
        """
        return self._ip_blocks

    @ip_blocks.setter
    def ip_blocks(self, ip_blocks):
        """Sets the ip_blocks of this StaffHardware.

        Attribute included only if the hardware is of type Switch  # noqa: E501

        :param ip_blocks: The ip_blocks of this StaffHardware.  # noqa: E501
        :type ip_blocks: list[StaffIpAddress]
        """

        self._ip_blocks = ip_blocks

    @property
    def instance(self):
        """Gets the instance of this StaffHardware.  # noqa: E501


        :return: The instance of this StaffHardware.  # noqa: E501
        :rtype: StaffInstance
        """
        return self._instance

    @instance.setter
    def instance(self, instance):
        """Sets the instance of this StaffHardware.


        :param instance: The instance of this StaffHardware.  # noqa: E501
        :type instance: StaffInstance
        """

        self._instance = instance

    @property
    def hardware_reservation(self):
        """Gets the hardware_reservation of this StaffHardware.  # noqa: E501


        :return: The hardware_reservation of this StaffHardware.  # noqa: E501
        :rtype: StaffHardwareReservationV1
        """
        return self._hardware_reservation

    @hardware_reservation.setter
    def hardware_reservation(self, hardware_reservation):
        """Sets the hardware_reservation of this StaffHardware.


        :param hardware_reservation: The hardware_reservation of this StaffHardware.  # noqa: E501
        :type hardware_reservation: StaffHardwareReservationV1
        """

        self._hardware_reservation = hardware_reservation

    @property
    def preinstalled_operating_system_version(self):
        """Gets the preinstalled_operating_system_version of this StaffHardware.  # noqa: E501


        :return: The preinstalled_operating_system_version of this StaffHardware.  # noqa: E501
        :rtype: StaffOperatingSystemVersion
        """
        return self._preinstalled_operating_system_version

    @preinstalled_operating_system_version.setter
    def preinstalled_operating_system_version(self, preinstalled_operating_system_version):
        """Sets the preinstalled_operating_system_version of this StaffHardware.


        :param preinstalled_operating_system_version: The preinstalled_operating_system_version of this StaffHardware.  # noqa: E501
        :type preinstalled_operating_system_version: StaffOperatingSystemVersion
        """

        self._preinstalled_operating_system_version = preinstalled_operating_system_version

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = inspect.getargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StaffHardware):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StaffHardware):
            return True

        return self.to_dict() != other.to_dict()
