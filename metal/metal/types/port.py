# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from metal.types.base_model_ import Model
from metal.types.href import Href
from metal import util

from metal.types.href import Href  # noqa: E501

class Port(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, type=None, name=None, data=None, disbond_operation_supported=None, hardware=None, virtual_networks=None, connected_port=None, href=None):  # noqa: E501
        """Port - a model defined in OpenAPI

        :param id: The id of this Port.  # noqa: E501
        :type id: str
        :param type: The type of this Port.  # noqa: E501
        :type type: str
        :param name: The name of this Port.  # noqa: E501
        :type name: str
        :param data: The data of this Port.  # noqa: E501
        :type data: object
        :param disbond_operation_supported: The disbond_operation_supported of this Port.  # noqa: E501
        :type disbond_operation_supported: bool
        :param hardware: The hardware of this Port.  # noqa: E501
        :type hardware: Href
        :param virtual_networks: The virtual_networks of this Port.  # noqa: E501
        :type virtual_networks: List[Href]
        :param connected_port: The connected_port of this Port.  # noqa: E501
        :type connected_port: Href
        :param href: The href of this Port.  # noqa: E501
        :type href: str
        """
        self.openapi_types = {
            'id': str,
            'type': str,
            'name': str,
            'data': object,
            'disbond_operation_supported': bool,
            'hardware': Href,
            'virtual_networks': List[Href],
            'connected_port': Href,
            'href': str
        }

        self.attribute_map = {
            'id': 'id',
            'type': 'type',
            'name': 'name',
            'data': 'data',
            'disbond_operation_supported': 'disbond_operation_supported',
            'hardware': 'hardware',
            'virtual_networks': 'virtual_networks',
            'connected_port': 'connected_port',
            'href': 'href'
        }

        self._id = id
        self._type = type
        self._name = name
        self._data = data
        self._disbond_operation_supported = disbond_operation_supported
        self._hardware = hardware
        self._virtual_networks = virtual_networks
        self._connected_port = connected_port
        self._href = href

    @classmethod
    def from_dict(cls, dikt) -> 'Port':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Port of this Port.  # noqa: E501
        :rtype: Port
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Port.


        :return: The id of this Port.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Port.


        :param id: The id of this Port.
        :type id: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this Port.


        :return: The type of this Port.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Port.


        :param type: The type of this Port.
        :type type: str
        """

        self._type = type

    @property
    def name(self):
        """Gets the name of this Port.


        :return: The name of this Port.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Port.


        :param name: The name of this Port.
        :type name: str
        """

        self._name = name

    @property
    def data(self):
        """Gets the data of this Port.


        :return: The data of this Port.
        :rtype: object
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this Port.


        :param data: The data of this Port.
        :type data: object
        """

        self._data = data

    @property
    def disbond_operation_supported(self):
        """Gets the disbond_operation_supported of this Port.

        Indicates whether or not the bond can be broken on the port (when applicable).  # noqa: E501

        :return: The disbond_operation_supported of this Port.
        :rtype: bool
        """
        return self._disbond_operation_supported

    @disbond_operation_supported.setter
    def disbond_operation_supported(self, disbond_operation_supported):
        """Sets the disbond_operation_supported of this Port.

        Indicates whether or not the bond can be broken on the port (when applicable).  # noqa: E501

        :param disbond_operation_supported: The disbond_operation_supported of this Port.
        :type disbond_operation_supported: bool
        """

        self._disbond_operation_supported = disbond_operation_supported

    @property
    def hardware(self):
        """Gets the hardware of this Port.


        :return: The hardware of this Port.
        :rtype: Href
        """
        return self._hardware

    @hardware.setter
    def hardware(self, hardware):
        """Sets the hardware of this Port.


        :param hardware: The hardware of this Port.
        :type hardware: Href
        """

        self._hardware = hardware

    @property
    def virtual_networks(self):
        """Gets the virtual_networks of this Port.


        :return: The virtual_networks of this Port.
        :rtype: List[Href]
        """
        return self._virtual_networks

    @virtual_networks.setter
    def virtual_networks(self, virtual_networks):
        """Sets the virtual_networks of this Port.


        :param virtual_networks: The virtual_networks of this Port.
        :type virtual_networks: List[Href]
        """

        self._virtual_networks = virtual_networks

    @property
    def connected_port(self):
        """Gets the connected_port of this Port.


        :return: The connected_port of this Port.
        :rtype: Href
        """
        return self._connected_port

    @connected_port.setter
    def connected_port(self, connected_port):
        """Sets the connected_port of this Port.


        :param connected_port: The connected_port of this Port.
        :type connected_port: Href
        """

        self._connected_port = connected_port

    @property
    def href(self):
        """Gets the href of this Port.


        :return: The href of this Port.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this Port.


        :param href: The href of this Port.
        :type href: str
        """

        self._href = href
