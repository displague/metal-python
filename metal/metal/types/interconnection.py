# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from metal.types.base_model_ import Model
from metal.types.href import Href
from metal.types.interconnection_port import InterconnectionPort
from metal import util

from metal.types.href import Href  # noqa: E501
from metal.types.interconnection_port import InterconnectionPort  # noqa: E501

class Interconnection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, name=None, description=None, contact_email=None, status=None, type=None, redundancy=None, speed=None, tags=None, ports=None, facility=None, organization=None):  # noqa: E501
        """Interconnection - a model defined in OpenAPI

        :param id: The id of this Interconnection.  # noqa: E501
        :type id: str
        :param name: The name of this Interconnection.  # noqa: E501
        :type name: str
        :param description: The description of this Interconnection.  # noqa: E501
        :type description: str
        :param contact_email: The contact_email of this Interconnection.  # noqa: E501
        :type contact_email: str
        :param status: The status of this Interconnection.  # noqa: E501
        :type status: str
        :param type: The type of this Interconnection.  # noqa: E501
        :type type: str
        :param redundancy: The redundancy of this Interconnection.  # noqa: E501
        :type redundancy: str
        :param speed: The speed of this Interconnection.  # noqa: E501
        :type speed: int
        :param tags: The tags of this Interconnection.  # noqa: E501
        :type tags: List[str]
        :param ports: The ports of this Interconnection.  # noqa: E501
        :type ports: List[InterconnectionPort]
        :param facility: The facility of this Interconnection.  # noqa: E501
        :type facility: Href
        :param organization: The organization of this Interconnection.  # noqa: E501
        :type organization: Href
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'description': str,
            'contact_email': str,
            'status': str,
            'type': str,
            'redundancy': str,
            'speed': int,
            'tags': List[str],
            'ports': List[InterconnectionPort],
            'facility': Href,
            'organization': Href
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'description': 'description',
            'contact_email': 'contact_email',
            'status': 'status',
            'type': 'type',
            'redundancy': 'redundancy',
            'speed': 'speed',
            'tags': 'tags',
            'ports': 'ports',
            'facility': 'facility',
            'organization': 'organization'
        }

        self._id = id
        self._name = name
        self._description = description
        self._contact_email = contact_email
        self._status = status
        self._type = type
        self._redundancy = redundancy
        self._speed = speed
        self._tags = tags
        self._ports = ports
        self._facility = facility
        self._organization = organization

    @classmethod
    def from_dict(cls, dikt) -> 'Interconnection':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Interconnection of this Interconnection.  # noqa: E501
        :rtype: Interconnection
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Interconnection.


        :return: The id of this Interconnection.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Interconnection.


        :param id: The id of this Interconnection.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Interconnection.


        :return: The name of this Interconnection.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Interconnection.


        :param name: The name of this Interconnection.
        :type name: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this Interconnection.


        :return: The description of this Interconnection.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Interconnection.


        :param description: The description of this Interconnection.
        :type description: str
        """

        self._description = description

    @property
    def contact_email(self):
        """Gets the contact_email of this Interconnection.


        :return: The contact_email of this Interconnection.
        :rtype: str
        """
        return self._contact_email

    @contact_email.setter
    def contact_email(self, contact_email):
        """Sets the contact_email of this Interconnection.


        :param contact_email: The contact_email of this Interconnection.
        :type contact_email: str
        """

        self._contact_email = contact_email

    @property
    def status(self):
        """Gets the status of this Interconnection.


        :return: The status of this Interconnection.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Interconnection.


        :param status: The status of this Interconnection.
        :type status: str
        """

        self._status = status

    @property
    def type(self):
        """Gets the type of this Interconnection.


        :return: The type of this Interconnection.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Interconnection.


        :param type: The type of this Interconnection.
        :type type: str
        """

        self._type = type

    @property
    def redundancy(self):
        """Gets the redundancy of this Interconnection.


        :return: The redundancy of this Interconnection.
        :rtype: str
        """
        return self._redundancy

    @redundancy.setter
    def redundancy(self, redundancy):
        """Sets the redundancy of this Interconnection.


        :param redundancy: The redundancy of this Interconnection.
        :type redundancy: str
        """

        self._redundancy = redundancy

    @property
    def speed(self):
        """Gets the speed of this Interconnection.

        The connection's speed in bps.  # noqa: E501

        :return: The speed of this Interconnection.
        :rtype: int
        """
        return self._speed

    @speed.setter
    def speed(self, speed):
        """Sets the speed of this Interconnection.

        The connection's speed in bps.  # noqa: E501

        :param speed: The speed of this Interconnection.
        :type speed: int
        """

        self._speed = speed

    @property
    def tags(self):
        """Gets the tags of this Interconnection.


        :return: The tags of this Interconnection.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Interconnection.


        :param tags: The tags of this Interconnection.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def ports(self):
        """Gets the ports of this Interconnection.


        :return: The ports of this Interconnection.
        :rtype: List[InterconnectionPort]
        """
        return self._ports

    @ports.setter
    def ports(self, ports):
        """Sets the ports of this Interconnection.


        :param ports: The ports of this Interconnection.
        :type ports: List[InterconnectionPort]
        """

        self._ports = ports

    @property
    def facility(self):
        """Gets the facility of this Interconnection.


        :return: The facility of this Interconnection.
        :rtype: Href
        """
        return self._facility

    @facility.setter
    def facility(self, facility):
        """Sets the facility of this Interconnection.


        :param facility: The facility of this Interconnection.
        :type facility: Href
        """

        self._facility = facility

    @property
    def organization(self):
        """Gets the organization of this Interconnection.


        :return: The organization of this Interconnection.
        :rtype: Href
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this Interconnection.


        :param organization: The organization of this Interconnection.
        :type organization: Href
        """

        self._organization = organization
