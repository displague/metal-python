# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from metal.types.base_model_ import Model
from metal.types.href import Href
from metal.types.virtual_circuit_list import VirtualCircuitList
from metal import util

from metal.types.href import Href  # noqa: E501
from metal.types.virtual_circuit_list import VirtualCircuitList  # noqa: E501

class InterconnectionPort(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, role=None, status=None, switch_id=None, virtual_circuits=None, organization=None):  # noqa: E501
        """InterconnectionPort - a model defined in OpenAPI

        :param id: The id of this InterconnectionPort.  # noqa: E501
        :type id: str
        :param role: The role of this InterconnectionPort.  # noqa: E501
        :type role: str
        :param status: The status of this InterconnectionPort.  # noqa: E501
        :type status: str
        :param switch_id: The switch_id of this InterconnectionPort.  # noqa: E501
        :type switch_id: str
        :param virtual_circuits: The virtual_circuits of this InterconnectionPort.  # noqa: E501
        :type virtual_circuits: VirtualCircuitList
        :param organization: The organization of this InterconnectionPort.  # noqa: E501
        :type organization: Href
        """
        self.openapi_types = {
            'id': str,
            'role': str,
            'status': str,
            'switch_id': str,
            'virtual_circuits': VirtualCircuitList,
            'organization': Href
        }

        self.attribute_map = {
            'id': 'id',
            'role': 'role',
            'status': 'status',
            'switch_id': 'switch_id',
            'virtual_circuits': 'virtual_circuits',
            'organization': 'organization'
        }

        self._id = id
        self._role = role
        self._status = status
        self._switch_id = switch_id
        self._virtual_circuits = virtual_circuits
        self._organization = organization

    @classmethod
    def from_dict(cls, dikt) -> 'InterconnectionPort':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The InterconnectionPort of this InterconnectionPort.  # noqa: E501
        :rtype: InterconnectionPort
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this InterconnectionPort.


        :return: The id of this InterconnectionPort.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InterconnectionPort.


        :param id: The id of this InterconnectionPort.
        :type id: str
        """

        self._id = id

    @property
    def role(self):
        """Gets the role of this InterconnectionPort.

        Either 'primary' or 'secondary'.  # noqa: E501

        :return: The role of this InterconnectionPort.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this InterconnectionPort.

        Either 'primary' or 'secondary'.  # noqa: E501

        :param role: The role of this InterconnectionPort.
        :type role: str
        """

        self._role = role

    @property
    def status(self):
        """Gets the status of this InterconnectionPort.


        :return: The status of this InterconnectionPort.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InterconnectionPort.


        :param status: The status of this InterconnectionPort.
        :type status: str
        """

        self._status = status

    @property
    def switch_id(self):
        """Gets the switch_id of this InterconnectionPort.

        A switch 'short ID'  # noqa: E501

        :return: The switch_id of this InterconnectionPort.
        :rtype: str
        """
        return self._switch_id

    @switch_id.setter
    def switch_id(self, switch_id):
        """Sets the switch_id of this InterconnectionPort.

        A switch 'short ID'  # noqa: E501

        :param switch_id: The switch_id of this InterconnectionPort.
        :type switch_id: str
        """

        self._switch_id = switch_id

    @property
    def virtual_circuits(self):
        """Gets the virtual_circuits of this InterconnectionPort.


        :return: The virtual_circuits of this InterconnectionPort.
        :rtype: VirtualCircuitList
        """
        return self._virtual_circuits

    @virtual_circuits.setter
    def virtual_circuits(self, virtual_circuits):
        """Sets the virtual_circuits of this InterconnectionPort.


        :param virtual_circuits: The virtual_circuits of this InterconnectionPort.
        :type virtual_circuits: VirtualCircuitList
        """

        self._virtual_circuits = virtual_circuits

    @property
    def organization(self):
        """Gets the organization of this InterconnectionPort.


        :return: The organization of this InterconnectionPort.
        :rtype: Href
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this InterconnectionPort.


        :param organization: The organization of this InterconnectionPort.
        :type organization: Href
        """

        self._organization = organization
