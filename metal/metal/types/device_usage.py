# coding: utf-8

"""
    Metal API

    This is the API for Equinix Metal Product. Interact with your devices, user account, and projects.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@equinixmetal.com
    Generated by: https://openapi-generator.tech
"""


import inspect
import pprint
import re  # noqa: F401
import six

from metal.configuration import Configuration


class DeviceUsage(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'quantity': 'str',
        'unit': 'str',
        'total': 'str'
    }

    attribute_map = {
        'quantity': 'quantity',
        'unit': 'unit',
        'total': 'total'
    }

    def __init__(self, quantity=None, unit=None, total=None, local_vars_configuration=None):  # noqa: E501
        """DeviceUsage - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._quantity = None
        self._unit = None
        self._total = None
        self.discriminator = None

        if quantity is not None:
            self.quantity = quantity
        if unit is not None:
            self.unit = unit
        if total is not None:
            self.total = total

    @property
    def quantity(self):
        """Gets the quantity of this DeviceUsage.  # noqa: E501


        :return: The quantity of this DeviceUsage.  # noqa: E501
        :rtype: str
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this DeviceUsage.


        :param quantity: The quantity of this DeviceUsage.  # noqa: E501
        :type quantity: str
        """

        self._quantity = quantity

    @property
    def unit(self):
        """Gets the unit of this DeviceUsage.  # noqa: E501


        :return: The unit of this DeviceUsage.  # noqa: E501
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this DeviceUsage.


        :param unit: The unit of this DeviceUsage.  # noqa: E501
        :type unit: str
        """

        self._unit = unit

    @property
    def total(self):
        """Gets the total of this DeviceUsage.  # noqa: E501


        :return: The total of this DeviceUsage.  # noqa: E501
        :rtype: str
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this DeviceUsage.


        :param total: The total of this DeviceUsage.  # noqa: E501
        :type total: str
        """

        self._total = total

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = inspect.getargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceUsage):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DeviceUsage):
            return True

        return self.to_dict() != other.to_dict()
