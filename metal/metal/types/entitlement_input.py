# coding: utf-8

"""
    Metal API

    This is the API for Equinix Metal Product. Interact with your devices, user account, and projects.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@equinixmetal.com
    Generated by: https://openapi-generator.tech
"""


import inspect
import pprint
import re  # noqa: F401
import six

from metal.configuration import Configuration


class EntitlementInput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'description': 'str',
        'slug': 'str',
        'weight': 'int',
        'instance_quota': 'object',
        'project_quota': 'int',
        'volume_quota': 'object',
        'feature_access': 'object'
    }

    attribute_map = {
        'description': 'description',
        'slug': 'slug',
        'weight': 'weight',
        'instance_quota': 'instance_quota',
        'project_quota': 'project_quota',
        'volume_quota': 'volume_quota',
        'feature_access': 'feature_access'
    }

    def __init__(self, description=None, slug=None, weight=None, instance_quota=None, project_quota=None, volume_quota=None, feature_access=None, local_vars_configuration=None):  # noqa: E501
        """EntitlementInput - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._description = None
        self._slug = None
        self._weight = None
        self._instance_quota = None
        self._project_quota = None
        self._volume_quota = None
        self._feature_access = None
        self.discriminator = None

        if description is not None:
            self.description = description
        if slug is not None:
            self.slug = slug
        if weight is not None:
            self.weight = weight
        if instance_quota is not None:
            self.instance_quota = instance_quota
        if project_quota is not None:
            self.project_quota = project_quota
        if volume_quota is not None:
            self.volume_quota = volume_quota
        if feature_access is not None:
            self.feature_access = feature_access

    @property
    def description(self):
        """Gets the description of this EntitlementInput.  # noqa: E501


        :return: The description of this EntitlementInput.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this EntitlementInput.


        :param description: The description of this EntitlementInput.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def slug(self):
        """Gets the slug of this EntitlementInput.  # noqa: E501


        :return: The slug of this EntitlementInput.  # noqa: E501
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this EntitlementInput.


        :param slug: The slug of this EntitlementInput.  # noqa: E501
        :type slug: str
        """

        self._slug = slug

    @property
    def weight(self):
        """Gets the weight of this EntitlementInput.  # noqa: E501


        :return: The weight of this EntitlementInput.  # noqa: E501
        :rtype: int
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this EntitlementInput.


        :param weight: The weight of this EntitlementInput.  # noqa: E501
        :type weight: int
        """

        self._weight = weight

    @property
    def instance_quota(self):
        """Gets the instance_quota of this EntitlementInput.  # noqa: E501


        :return: The instance_quota of this EntitlementInput.  # noqa: E501
        :rtype: object
        """
        return self._instance_quota

    @instance_quota.setter
    def instance_quota(self, instance_quota):
        """Sets the instance_quota of this EntitlementInput.


        :param instance_quota: The instance_quota of this EntitlementInput.  # noqa: E501
        :type instance_quota: object
        """

        self._instance_quota = instance_quota

    @property
    def project_quota(self):
        """Gets the project_quota of this EntitlementInput.  # noqa: E501


        :return: The project_quota of this EntitlementInput.  # noqa: E501
        :rtype: int
        """
        return self._project_quota

    @project_quota.setter
    def project_quota(self, project_quota):
        """Sets the project_quota of this EntitlementInput.


        :param project_quota: The project_quota of this EntitlementInput.  # noqa: E501
        :type project_quota: int
        """

        self._project_quota = project_quota

    @property
    def volume_quota(self):
        """Gets the volume_quota of this EntitlementInput.  # noqa: E501


        :return: The volume_quota of this EntitlementInput.  # noqa: E501
        :rtype: object
        """
        return self._volume_quota

    @volume_quota.setter
    def volume_quota(self, volume_quota):
        """Sets the volume_quota of this EntitlementInput.


        :param volume_quota: The volume_quota of this EntitlementInput.  # noqa: E501
        :type volume_quota: object
        """

        self._volume_quota = volume_quota

    @property
    def feature_access(self):
        """Gets the feature_access of this EntitlementInput.  # noqa: E501


        :return: The feature_access of this EntitlementInput.  # noqa: E501
        :rtype: object
        """
        return self._feature_access

    @feature_access.setter
    def feature_access(self, feature_access):
        """Sets the feature_access of this EntitlementInput.


        :param feature_access: The feature_access of this EntitlementInput.  # noqa: E501
        :type feature_access: object
        """

        self._feature_access = feature_access

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = inspect.getargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EntitlementInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EntitlementInput):
            return True

        return self.to_dict() != other.to_dict()
