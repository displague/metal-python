# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from metal.types.base_model_ import Model
from metal import util


class Entitlement(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, description=None, slug=None, name=None, weight=None, instance_quota=None, project_quota=None, volume_quota=None, ip_quota=None, feature_access=None, href=None, volume_limits=None):  # noqa: E501
        """Entitlement - a model defined in OpenAPI

        :param id: The id of this Entitlement.  # noqa: E501
        :type id: str
        :param description: The description of this Entitlement.  # noqa: E501
        :type description: str
        :param slug: The slug of this Entitlement.  # noqa: E501
        :type slug: str
        :param name: The name of this Entitlement.  # noqa: E501
        :type name: str
        :param weight: The weight of this Entitlement.  # noqa: E501
        :type weight: int
        :param instance_quota: The instance_quota of this Entitlement.  # noqa: E501
        :type instance_quota: object
        :param project_quota: The project_quota of this Entitlement.  # noqa: E501
        :type project_quota: int
        :param volume_quota: The volume_quota of this Entitlement.  # noqa: E501
        :type volume_quota: object
        :param ip_quota: The ip_quota of this Entitlement.  # noqa: E501
        :type ip_quota: object
        :param feature_access: The feature_access of this Entitlement.  # noqa: E501
        :type feature_access: object
        :param href: The href of this Entitlement.  # noqa: E501
        :type href: str
        :param volume_limits: The volume_limits of this Entitlement.  # noqa: E501
        :type volume_limits: object
        """
        self.openapi_types = {
            'id': str,
            'description': str,
            'slug': str,
            'name': str,
            'weight': int,
            'instance_quota': object,
            'project_quota': int,
            'volume_quota': object,
            'ip_quota': object,
            'feature_access': object,
            'href': str,
            'volume_limits': object
        }

        self.attribute_map = {
            'id': 'id',
            'description': 'description',
            'slug': 'slug',
            'name': 'name',
            'weight': 'weight',
            'instance_quota': 'instance_quota',
            'project_quota': 'project_quota',
            'volume_quota': 'volume_quota',
            'ip_quota': 'ip_quota',
            'feature_access': 'feature_access',
            'href': 'href',
            'volume_limits': 'volume_limits'
        }

        self._id = id
        self._description = description
        self._slug = slug
        self._name = name
        self._weight = weight
        self._instance_quota = instance_quota
        self._project_quota = project_quota
        self._volume_quota = volume_quota
        self._ip_quota = ip_quota
        self._feature_access = feature_access
        self._href = href
        self._volume_limits = volume_limits

    @classmethod
    def from_dict(cls, dikt) -> 'Entitlement':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Entitlement of this Entitlement.  # noqa: E501
        :rtype: Entitlement
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Entitlement.


        :return: The id of this Entitlement.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Entitlement.


        :param id: The id of this Entitlement.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def description(self):
        """Gets the description of this Entitlement.


        :return: The description of this Entitlement.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Entitlement.


        :param description: The description of this Entitlement.
        :type description: str
        """

        self._description = description

    @property
    def slug(self):
        """Gets the slug of this Entitlement.


        :return: The slug of this Entitlement.
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this Entitlement.


        :param slug: The slug of this Entitlement.
        :type slug: str
        """
        if slug is None:
            raise ValueError("Invalid value for `slug`, must not be `None`")  # noqa: E501

        self._slug = slug

    @property
    def name(self):
        """Gets the name of this Entitlement.


        :return: The name of this Entitlement.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Entitlement.


        :param name: The name of this Entitlement.
        :type name: str
        """

        self._name = name

    @property
    def weight(self):
        """Gets the weight of this Entitlement.


        :return: The weight of this Entitlement.
        :rtype: int
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this Entitlement.


        :param weight: The weight of this Entitlement.
        :type weight: int
        """
        if weight is None:
            raise ValueError("Invalid value for `weight`, must not be `None`")  # noqa: E501

        self._weight = weight

    @property
    def instance_quota(self):
        """Gets the instance_quota of this Entitlement.


        :return: The instance_quota of this Entitlement.
        :rtype: object
        """
        return self._instance_quota

    @instance_quota.setter
    def instance_quota(self, instance_quota):
        """Sets the instance_quota of this Entitlement.


        :param instance_quota: The instance_quota of this Entitlement.
        :type instance_quota: object
        """

        self._instance_quota = instance_quota

    @property
    def project_quota(self):
        """Gets the project_quota of this Entitlement.


        :return: The project_quota of this Entitlement.
        :rtype: int
        """
        return self._project_quota

    @project_quota.setter
    def project_quota(self, project_quota):
        """Sets the project_quota of this Entitlement.


        :param project_quota: The project_quota of this Entitlement.
        :type project_quota: int
        """

        self._project_quota = project_quota

    @property
    def volume_quota(self):
        """Gets the volume_quota of this Entitlement.


        :return: The volume_quota of this Entitlement.
        :rtype: object
        """
        return self._volume_quota

    @volume_quota.setter
    def volume_quota(self, volume_quota):
        """Sets the volume_quota of this Entitlement.


        :param volume_quota: The volume_quota of this Entitlement.
        :type volume_quota: object
        """

        self._volume_quota = volume_quota

    @property
    def ip_quota(self):
        """Gets the ip_quota of this Entitlement.


        :return: The ip_quota of this Entitlement.
        :rtype: object
        """
        return self._ip_quota

    @ip_quota.setter
    def ip_quota(self, ip_quota):
        """Sets the ip_quota of this Entitlement.


        :param ip_quota: The ip_quota of this Entitlement.
        :type ip_quota: object
        """

        self._ip_quota = ip_quota

    @property
    def feature_access(self):
        """Gets the feature_access of this Entitlement.


        :return: The feature_access of this Entitlement.
        :rtype: object
        """
        return self._feature_access

    @feature_access.setter
    def feature_access(self, feature_access):
        """Sets the feature_access of this Entitlement.


        :param feature_access: The feature_access of this Entitlement.
        :type feature_access: object
        """

        self._feature_access = feature_access

    @property
    def href(self):
        """Gets the href of this Entitlement.


        :return: The href of this Entitlement.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this Entitlement.


        :param href: The href of this Entitlement.
        :type href: str
        """

        self._href = href

    @property
    def volume_limits(self):
        """Gets the volume_limits of this Entitlement.


        :return: The volume_limits of this Entitlement.
        :rtype: object
        """
        return self._volume_limits

    @volume_limits.setter
    def volume_limits(self, volume_limits):
        """Sets the volume_limits of this Entitlement.


        :param volume_limits: The volume_limits of this Entitlement.
        :type volume_limits: object
        """

        self._volume_limits = volume_limits
