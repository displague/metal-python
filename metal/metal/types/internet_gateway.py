# coding: utf-8

"""
    Metal API

    This is the API for Equinix Metal Product. Interact with your devices, user account, and projects.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@equinixmetal.com
    Generated by: https://openapi-generator.tech
"""


import inspect
import pprint
import re  # noqa: F401
import six

from metal.configuration import Configuration


class InternetGateway(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'created_at': 'datetime',
        'virtual_network': 'Href',
        'created_by': 'str',
        'ip_reservations': 'list[Href]',
        'href': 'str'
    }

    attribute_map = {
        'id': 'id',
        'created_at': 'created_at',
        'virtual_network': 'virtual_network',
        'created_by': 'created_by',
        'ip_reservations': 'ip_reservations',
        'href': 'href'
    }

    def __init__(self, id=None, created_at=None, virtual_network=None, created_by=None, ip_reservations=None, href=None, local_vars_configuration=None):  # noqa: E501
        """InternetGateway - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._created_at = None
        self._virtual_network = None
        self._created_by = None
        self._ip_reservations = None
        self._href = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if created_at is not None:
            self.created_at = created_at
        if virtual_network is not None:
            self.virtual_network = virtual_network
        if created_by is not None:
            self.created_by = created_by
        if ip_reservations is not None:
            self.ip_reservations = ip_reservations
        if href is not None:
            self.href = href

    @property
    def id(self):
        """Gets the id of this InternetGateway.  # noqa: E501


        :return: The id of this InternetGateway.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InternetGateway.


        :param id: The id of this InternetGateway.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def created_at(self):
        """Gets the created_at of this InternetGateway.  # noqa: E501


        :return: The created_at of this InternetGateway.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this InternetGateway.


        :param created_at: The created_at of this InternetGateway.  # noqa: E501
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def virtual_network(self):
        """Gets the virtual_network of this InternetGateway.  # noqa: E501


        :return: The virtual_network of this InternetGateway.  # noqa: E501
        :rtype: Href
        """
        return self._virtual_network

    @virtual_network.setter
    def virtual_network(self, virtual_network):
        """Sets the virtual_network of this InternetGateway.


        :param virtual_network: The virtual_network of this InternetGateway.  # noqa: E501
        :type virtual_network: Href
        """

        self._virtual_network = virtual_network

    @property
    def created_by(self):
        """Gets the created_by of this InternetGateway.  # noqa: E501


        :return: The created_by of this InternetGateway.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this InternetGateway.


        :param created_by: The created_by of this InternetGateway.  # noqa: E501
        :type created_by: str
        """

        self._created_by = created_by

    @property
    def ip_reservations(self):
        """Gets the ip_reservations of this InternetGateway.  # noqa: E501


        :return: The ip_reservations of this InternetGateway.  # noqa: E501
        :rtype: list[Href]
        """
        return self._ip_reservations

    @ip_reservations.setter
    def ip_reservations(self, ip_reservations):
        """Sets the ip_reservations of this InternetGateway.


        :param ip_reservations: The ip_reservations of this InternetGateway.  # noqa: E501
        :type ip_reservations: list[Href]
        """

        self._ip_reservations = ip_reservations

    @property
    def href(self):
        """Gets the href of this InternetGateway.  # noqa: E501


        :return: The href of this InternetGateway.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this InternetGateway.


        :param href: The href of this InternetGateway.  # noqa: E501
        :type href: str
        """

        self._href = href

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = inspect.getargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InternetGateway):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InternetGateway):
            return True

        return self.to_dict() != other.to_dict()
