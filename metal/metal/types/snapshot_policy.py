# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from metal.types.base_model_ import Model
from metal.types.href import Href
from metal import util

from metal.types.href import Href  # noqa: E501

class SnapshotPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, snapshot_count=None, snapshot_frequency=None, created_at=None, updated_at=None, volume=None, href=None):  # noqa: E501
        """SnapshotPolicy - a model defined in OpenAPI

        :param id: The id of this SnapshotPolicy.  # noqa: E501
        :type id: str
        :param snapshot_count: The snapshot_count of this SnapshotPolicy.  # noqa: E501
        :type snapshot_count: int
        :param snapshot_frequency: The snapshot_frequency of this SnapshotPolicy.  # noqa: E501
        :type snapshot_frequency: str
        :param created_at: The created_at of this SnapshotPolicy.  # noqa: E501
        :type created_at: datetime
        :param updated_at: The updated_at of this SnapshotPolicy.  # noqa: E501
        :type updated_at: datetime
        :param volume: The volume of this SnapshotPolicy.  # noqa: E501
        :type volume: Href
        :param href: The href of this SnapshotPolicy.  # noqa: E501
        :type href: str
        """
        self.openapi_types = {
            'id': str,
            'snapshot_count': int,
            'snapshot_frequency': str,
            'created_at': datetime,
            'updated_at': datetime,
            'volume': Href,
            'href': str
        }

        self.attribute_map = {
            'id': 'id',
            'snapshot_count': 'snapshot_count',
            'snapshot_frequency': 'snapshot_frequency',
            'created_at': 'created_at',
            'updated_at': 'updated_at',
            'volume': 'volume',
            'href': 'href'
        }

        self._id = id
        self._snapshot_count = snapshot_count
        self._snapshot_frequency = snapshot_frequency
        self._created_at = created_at
        self._updated_at = updated_at
        self._volume = volume
        self._href = href

    @classmethod
    def from_dict(cls, dikt) -> 'SnapshotPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SnapshotPolicy of this SnapshotPolicy.  # noqa: E501
        :rtype: SnapshotPolicy
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this SnapshotPolicy.


        :return: The id of this SnapshotPolicy.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SnapshotPolicy.


        :param id: The id of this SnapshotPolicy.
        :type id: str
        """

        self._id = id

    @property
    def snapshot_count(self):
        """Gets the snapshot_count of this SnapshotPolicy.


        :return: The snapshot_count of this SnapshotPolicy.
        :rtype: int
        """
        return self._snapshot_count

    @snapshot_count.setter
    def snapshot_count(self, snapshot_count):
        """Sets the snapshot_count of this SnapshotPolicy.


        :param snapshot_count: The snapshot_count of this SnapshotPolicy.
        :type snapshot_count: int
        """
        if snapshot_count is not None and snapshot_count > 256:  # noqa: E501
            raise ValueError("Invalid value for `snapshot_count`, must be a value less than or equal to `256`")  # noqa: E501

        self._snapshot_count = snapshot_count

    @property
    def snapshot_frequency(self):
        """Gets the snapshot_frequency of this SnapshotPolicy.


        :return: The snapshot_frequency of this SnapshotPolicy.
        :rtype: str
        """
        return self._snapshot_frequency

    @snapshot_frequency.setter
    def snapshot_frequency(self, snapshot_frequency):
        """Sets the snapshot_frequency of this SnapshotPolicy.


        :param snapshot_frequency: The snapshot_frequency of this SnapshotPolicy.
        :type snapshot_frequency: str
        """

        self._snapshot_frequency = snapshot_frequency

    @property
    def created_at(self):
        """Gets the created_at of this SnapshotPolicy.


        :return: The created_at of this SnapshotPolicy.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this SnapshotPolicy.


        :param created_at: The created_at of this SnapshotPolicy.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this SnapshotPolicy.


        :return: The updated_at of this SnapshotPolicy.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this SnapshotPolicy.


        :param updated_at: The updated_at of this SnapshotPolicy.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def volume(self):
        """Gets the volume of this SnapshotPolicy.


        :return: The volume of this SnapshotPolicy.
        :rtype: Href
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this SnapshotPolicy.


        :param volume: The volume of this SnapshotPolicy.
        :type volume: Href
        """

        self._volume = volume

    @property
    def href(self):
        """Gets the href of this SnapshotPolicy.


        :return: The href of this SnapshotPolicy.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this SnapshotPolicy.


        :param href: The href of this SnapshotPolicy.
        :type href: str
        """

        self._href = href
