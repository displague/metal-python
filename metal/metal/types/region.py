# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from metal.types.base_model_ import Model
from metal.types.facility import Facility
from metal import util

from metal.types.facility import Facility  # noqa: E501

class Region(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, name=None, facility=None):  # noqa: E501
        """Region - a model defined in OpenAPI

        :param id: The id of this Region.  # noqa: E501
        :type id: str
        :param name: The name of this Region.  # noqa: E501
        :type name: str
        :param facility: The facility of this Region.  # noqa: E501
        :type facility: Facility
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'facility': Facility
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'facility': 'facility'
        }

        self._id = id
        self._name = name
        self._facility = facility

    @classmethod
    def from_dict(cls, dikt) -> 'Region':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Region of this Region.  # noqa: E501
        :rtype: Region
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Region.


        :return: The id of this Region.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Region.


        :param id: The id of this Region.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Region.


        :return: The name of this Region.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Region.


        :param name: The name of this Region.
        :type name: str
        """

        self._name = name

    @property
    def facility(self):
        """Gets the facility of this Region.


        :return: The facility of this Region.
        :rtype: Facility
        """
        return self._facility

    @facility.setter
    def facility(self, facility):
        """Sets the facility of this Region.


        :param facility: The facility of this Region.
        :type facility: Facility
        """

        self._facility = facility
