# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from metal.types.base_model_ import Model
from metal import util


class HardwareUpdateInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, state=None, u_spaces=None, model_number=None, serial_number=None, server_rack_id=None, leased=None, lease_number=None, lease_expires_at=None, arch=None, dhcp_group=None, efi_boot=None, bios_password=None, maintenance_state=None, name=None, static_name=None, uefi_supports_rfc3021=None, preinstalled_operating_system_version_id=None, link_aggregation=None, provisioner=None, supported_networking=None, services=None, management=None, data=None, role=None, vlan_id=None, tpm=None, switch_short_id=None, is_primary=None, loopback_ip=None, vrf=None, exclude_from_narwhal=None):  # noqa: E501
        """HardwareUpdateInput - a model defined in OpenAPI

        :param state: The state of this HardwareUpdateInput.  # noqa: E501
        :type state: str
        :param u_spaces: The u_spaces of this HardwareUpdateInput.  # noqa: E501
        :type u_spaces: int
        :param model_number: The model_number of this HardwareUpdateInput.  # noqa: E501
        :type model_number: str
        :param serial_number: The serial_number of this HardwareUpdateInput.  # noqa: E501
        :type serial_number: str
        :param server_rack_id: The server_rack_id of this HardwareUpdateInput.  # noqa: E501
        :type server_rack_id: str
        :param leased: The leased of this HardwareUpdateInput.  # noqa: E501
        :type leased: bool
        :param lease_number: The lease_number of this HardwareUpdateInput.  # noqa: E501
        :type lease_number: str
        :param lease_expires_at: The lease_expires_at of this HardwareUpdateInput.  # noqa: E501
        :type lease_expires_at: datetime
        :param arch: The arch of this HardwareUpdateInput.  # noqa: E501
        :type arch: str
        :param dhcp_group: The dhcp_group of this HardwareUpdateInput.  # noqa: E501
        :type dhcp_group: str
        :param efi_boot: The efi_boot of this HardwareUpdateInput.  # noqa: E501
        :type efi_boot: bool
        :param bios_password: The bios_password of this HardwareUpdateInput.  # noqa: E501
        :type bios_password: str
        :param maintenance_state: The maintenance_state of this HardwareUpdateInput.  # noqa: E501
        :type maintenance_state: str
        :param name: The name of this HardwareUpdateInput.  # noqa: E501
        :type name: str
        :param static_name: The static_name of this HardwareUpdateInput.  # noqa: E501
        :type static_name: str
        :param uefi_supports_rfc3021: The uefi_supports_rfc3021 of this HardwareUpdateInput.  # noqa: E501
        :type uefi_supports_rfc3021: bool
        :param preinstalled_operating_system_version_id: The preinstalled_operating_system_version_id of this HardwareUpdateInput.  # noqa: E501
        :type preinstalled_operating_system_version_id: str
        :param link_aggregation: The link_aggregation of this HardwareUpdateInput.  # noqa: E501
        :type link_aggregation: str
        :param provisioner: The provisioner of this HardwareUpdateInput.  # noqa: E501
        :type provisioner: str
        :param supported_networking: The supported_networking of this HardwareUpdateInput.  # noqa: E501
        :type supported_networking: List[str]
        :param services: The services of this HardwareUpdateInput.  # noqa: E501
        :type services: object
        :param management: The management of this HardwareUpdateInput.  # noqa: E501
        :type management: object
        :param data: The data of this HardwareUpdateInput.  # noqa: E501
        :type data: object
        :param role: The role of this HardwareUpdateInput.  # noqa: E501
        :type role: str
        :param vlan_id: The vlan_id of this HardwareUpdateInput.  # noqa: E501
        :type vlan_id: int
        :param tpm: The tpm of this HardwareUpdateInput.  # noqa: E501
        :type tpm: bool
        :param switch_short_id: The switch_short_id of this HardwareUpdateInput.  # noqa: E501
        :type switch_short_id: str
        :param is_primary: The is_primary of this HardwareUpdateInput.  # noqa: E501
        :type is_primary: bool
        :param loopback_ip: The loopback_ip of this HardwareUpdateInput.  # noqa: E501
        :type loopback_ip: str
        :param vrf: The vrf of this HardwareUpdateInput.  # noqa: E501
        :type vrf: str
        :param exclude_from_narwhal: The exclude_from_narwhal of this HardwareUpdateInput.  # noqa: E501
        :type exclude_from_narwhal: bool
        """
        self.openapi_types = {
            'state': str,
            'u_spaces': int,
            'model_number': str,
            'serial_number': str,
            'server_rack_id': str,
            'leased': bool,
            'lease_number': str,
            'lease_expires_at': datetime,
            'arch': str,
            'dhcp_group': str,
            'efi_boot': bool,
            'bios_password': str,
            'maintenance_state': str,
            'name': str,
            'static_name': str,
            'uefi_supports_rfc3021': bool,
            'preinstalled_operating_system_version_id': str,
            'link_aggregation': str,
            'provisioner': str,
            'supported_networking': List[str],
            'services': object,
            'management': object,
            'data': object,
            'role': str,
            'vlan_id': int,
            'tpm': bool,
            'switch_short_id': str,
            'is_primary': bool,
            'loopback_ip': str,
            'vrf': str,
            'exclude_from_narwhal': bool
        }

        self.attribute_map = {
            'state': 'state',
            'u_spaces': 'u_spaces',
            'model_number': 'model_number',
            'serial_number': 'serial_number',
            'server_rack_id': 'server_rack_id',
            'leased': 'leased',
            'lease_number': 'lease_number',
            'lease_expires_at': 'lease_expires_at',
            'arch': 'arch',
            'dhcp_group': 'dhcp_group',
            'efi_boot': 'efi_boot',
            'bios_password': 'bios_password',
            'maintenance_state': 'maintenance_state',
            'name': 'name',
            'static_name': 'static_name',
            'uefi_supports_rfc3021': 'uefi_supports_rfc3021',
            'preinstalled_operating_system_version_id': 'preinstalled_operating_system_version_id',
            'link_aggregation': 'link_aggregation',
            'provisioner': 'provisioner',
            'supported_networking': 'supported_networking',
            'services': 'services',
            'management': 'management',
            'data': 'data',
            'role': 'role',
            'vlan_id': 'vlan_id',
            'tpm': 'tpm',
            'switch_short_id': 'switch_short_id',
            'is_primary': 'is_primary',
            'loopback_ip': 'loopback_ip',
            'vrf': 'vrf',
            'exclude_from_narwhal': 'exclude_from_narwhal'
        }

        self._state = state
        self._u_spaces = u_spaces
        self._model_number = model_number
        self._serial_number = serial_number
        self._server_rack_id = server_rack_id
        self._leased = leased
        self._lease_number = lease_number
        self._lease_expires_at = lease_expires_at
        self._arch = arch
        self._dhcp_group = dhcp_group
        self._efi_boot = efi_boot
        self._bios_password = bios_password
        self._maintenance_state = maintenance_state
        self._name = name
        self._static_name = static_name
        self._uefi_supports_rfc3021 = uefi_supports_rfc3021
        self._preinstalled_operating_system_version_id = preinstalled_operating_system_version_id
        self._link_aggregation = link_aggregation
        self._provisioner = provisioner
        self._supported_networking = supported_networking
        self._services = services
        self._management = management
        self._data = data
        self._role = role
        self._vlan_id = vlan_id
        self._tpm = tpm
        self._switch_short_id = switch_short_id
        self._is_primary = is_primary
        self._loopback_ip = loopback_ip
        self._vrf = vrf
        self._exclude_from_narwhal = exclude_from_narwhal

    @classmethod
    def from_dict(cls, dikt) -> 'HardwareUpdateInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The HardwareUpdateInput of this HardwareUpdateInput.  # noqa: E501
        :rtype: HardwareUpdateInput
        """
        return util.deserialize_model(dikt, cls)

    @property
    def state(self):
        """Gets the state of this HardwareUpdateInput.


        :return: The state of this HardwareUpdateInput.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this HardwareUpdateInput.


        :param state: The state of this HardwareUpdateInput.
        :type state: str
        """

        self._state = state

    @property
    def u_spaces(self):
        """Gets the u_spaces of this HardwareUpdateInput.


        :return: The u_spaces of this HardwareUpdateInput.
        :rtype: int
        """
        return self._u_spaces

    @u_spaces.setter
    def u_spaces(self, u_spaces):
        """Sets the u_spaces of this HardwareUpdateInput.


        :param u_spaces: The u_spaces of this HardwareUpdateInput.
        :type u_spaces: int
        """

        self._u_spaces = u_spaces

    @property
    def model_number(self):
        """Gets the model_number of this HardwareUpdateInput.


        :return: The model_number of this HardwareUpdateInput.
        :rtype: str
        """
        return self._model_number

    @model_number.setter
    def model_number(self, model_number):
        """Sets the model_number of this HardwareUpdateInput.


        :param model_number: The model_number of this HardwareUpdateInput.
        :type model_number: str
        """

        self._model_number = model_number

    @property
    def serial_number(self):
        """Gets the serial_number of this HardwareUpdateInput.


        :return: The serial_number of this HardwareUpdateInput.
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this HardwareUpdateInput.


        :param serial_number: The serial_number of this HardwareUpdateInput.
        :type serial_number: str
        """

        self._serial_number = serial_number

    @property
    def server_rack_id(self):
        """Gets the server_rack_id of this HardwareUpdateInput.


        :return: The server_rack_id of this HardwareUpdateInput.
        :rtype: str
        """
        return self._server_rack_id

    @server_rack_id.setter
    def server_rack_id(self, server_rack_id):
        """Sets the server_rack_id of this HardwareUpdateInput.


        :param server_rack_id: The server_rack_id of this HardwareUpdateInput.
        :type server_rack_id: str
        """

        self._server_rack_id = server_rack_id

    @property
    def leased(self):
        """Gets the leased of this HardwareUpdateInput.


        :return: The leased of this HardwareUpdateInput.
        :rtype: bool
        """
        return self._leased

    @leased.setter
    def leased(self, leased):
        """Sets the leased of this HardwareUpdateInput.


        :param leased: The leased of this HardwareUpdateInput.
        :type leased: bool
        """

        self._leased = leased

    @property
    def lease_number(self):
        """Gets the lease_number of this HardwareUpdateInput.


        :return: The lease_number of this HardwareUpdateInput.
        :rtype: str
        """
        return self._lease_number

    @lease_number.setter
    def lease_number(self, lease_number):
        """Sets the lease_number of this HardwareUpdateInput.


        :param lease_number: The lease_number of this HardwareUpdateInput.
        :type lease_number: str
        """

        self._lease_number = lease_number

    @property
    def lease_expires_at(self):
        """Gets the lease_expires_at of this HardwareUpdateInput.


        :return: The lease_expires_at of this HardwareUpdateInput.
        :rtype: datetime
        """
        return self._lease_expires_at

    @lease_expires_at.setter
    def lease_expires_at(self, lease_expires_at):
        """Sets the lease_expires_at of this HardwareUpdateInput.


        :param lease_expires_at: The lease_expires_at of this HardwareUpdateInput.
        :type lease_expires_at: datetime
        """

        self._lease_expires_at = lease_expires_at

    @property
    def arch(self):
        """Gets the arch of this HardwareUpdateInput.


        :return: The arch of this HardwareUpdateInput.
        :rtype: str
        """
        return self._arch

    @arch.setter
    def arch(self, arch):
        """Sets the arch of this HardwareUpdateInput.


        :param arch: The arch of this HardwareUpdateInput.
        :type arch: str
        """

        self._arch = arch

    @property
    def dhcp_group(self):
        """Gets the dhcp_group of this HardwareUpdateInput.


        :return: The dhcp_group of this HardwareUpdateInput.
        :rtype: str
        """
        return self._dhcp_group

    @dhcp_group.setter
    def dhcp_group(self, dhcp_group):
        """Sets the dhcp_group of this HardwareUpdateInput.


        :param dhcp_group: The dhcp_group of this HardwareUpdateInput.
        :type dhcp_group: str
        """

        self._dhcp_group = dhcp_group

    @property
    def efi_boot(self):
        """Gets the efi_boot of this HardwareUpdateInput.


        :return: The efi_boot of this HardwareUpdateInput.
        :rtype: bool
        """
        return self._efi_boot

    @efi_boot.setter
    def efi_boot(self, efi_boot):
        """Sets the efi_boot of this HardwareUpdateInput.


        :param efi_boot: The efi_boot of this HardwareUpdateInput.
        :type efi_boot: bool
        """

        self._efi_boot = efi_boot

    @property
    def bios_password(self):
        """Gets the bios_password of this HardwareUpdateInput.


        :return: The bios_password of this HardwareUpdateInput.
        :rtype: str
        """
        return self._bios_password

    @bios_password.setter
    def bios_password(self, bios_password):
        """Sets the bios_password of this HardwareUpdateInput.


        :param bios_password: The bios_password of this HardwareUpdateInput.
        :type bios_password: str
        """

        self._bios_password = bios_password

    @property
    def maintenance_state(self):
        """Gets the maintenance_state of this HardwareUpdateInput.


        :return: The maintenance_state of this HardwareUpdateInput.
        :rtype: str
        """
        return self._maintenance_state

    @maintenance_state.setter
    def maintenance_state(self, maintenance_state):
        """Sets the maintenance_state of this HardwareUpdateInput.


        :param maintenance_state: The maintenance_state of this HardwareUpdateInput.
        :type maintenance_state: str
        """

        self._maintenance_state = maintenance_state

    @property
    def name(self):
        """Gets the name of this HardwareUpdateInput.


        :return: The name of this HardwareUpdateInput.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this HardwareUpdateInput.


        :param name: The name of this HardwareUpdateInput.
        :type name: str
        """

        self._name = name

    @property
    def static_name(self):
        """Gets the static_name of this HardwareUpdateInput.


        :return: The static_name of this HardwareUpdateInput.
        :rtype: str
        """
        return self._static_name

    @static_name.setter
    def static_name(self, static_name):
        """Sets the static_name of this HardwareUpdateInput.


        :param static_name: The static_name of this HardwareUpdateInput.
        :type static_name: str
        """

        self._static_name = static_name

    @property
    def uefi_supports_rfc3021(self):
        """Gets the uefi_supports_rfc3021 of this HardwareUpdateInput.


        :return: The uefi_supports_rfc3021 of this HardwareUpdateInput.
        :rtype: bool
        """
        return self._uefi_supports_rfc3021

    @uefi_supports_rfc3021.setter
    def uefi_supports_rfc3021(self, uefi_supports_rfc3021):
        """Sets the uefi_supports_rfc3021 of this HardwareUpdateInput.


        :param uefi_supports_rfc3021: The uefi_supports_rfc3021 of this HardwareUpdateInput.
        :type uefi_supports_rfc3021: bool
        """

        self._uefi_supports_rfc3021 = uefi_supports_rfc3021

    @property
    def preinstalled_operating_system_version_id(self):
        """Gets the preinstalled_operating_system_version_id of this HardwareUpdateInput.


        :return: The preinstalled_operating_system_version_id of this HardwareUpdateInput.
        :rtype: str
        """
        return self._preinstalled_operating_system_version_id

    @preinstalled_operating_system_version_id.setter
    def preinstalled_operating_system_version_id(self, preinstalled_operating_system_version_id):
        """Sets the preinstalled_operating_system_version_id of this HardwareUpdateInput.


        :param preinstalled_operating_system_version_id: The preinstalled_operating_system_version_id of this HardwareUpdateInput.
        :type preinstalled_operating_system_version_id: str
        """

        self._preinstalled_operating_system_version_id = preinstalled_operating_system_version_id

    @property
    def link_aggregation(self):
        """Gets the link_aggregation of this HardwareUpdateInput.


        :return: The link_aggregation of this HardwareUpdateInput.
        :rtype: str
        """
        return self._link_aggregation

    @link_aggregation.setter
    def link_aggregation(self, link_aggregation):
        """Sets the link_aggregation of this HardwareUpdateInput.


        :param link_aggregation: The link_aggregation of this HardwareUpdateInput.
        :type link_aggregation: str
        """

        self._link_aggregation = link_aggregation

    @property
    def provisioner(self):
        """Gets the provisioner of this HardwareUpdateInput.


        :return: The provisioner of this HardwareUpdateInput.
        :rtype: str
        """
        return self._provisioner

    @provisioner.setter
    def provisioner(self, provisioner):
        """Sets the provisioner of this HardwareUpdateInput.


        :param provisioner: The provisioner of this HardwareUpdateInput.
        :type provisioner: str
        """

        self._provisioner = provisioner

    @property
    def supported_networking(self):
        """Gets the supported_networking of this HardwareUpdateInput.


        :return: The supported_networking of this HardwareUpdateInput.
        :rtype: List[str]
        """
        return self._supported_networking

    @supported_networking.setter
    def supported_networking(self, supported_networking):
        """Sets the supported_networking of this HardwareUpdateInput.


        :param supported_networking: The supported_networking of this HardwareUpdateInput.
        :type supported_networking: List[str]
        """

        self._supported_networking = supported_networking

    @property
    def services(self):
        """Gets the services of this HardwareUpdateInput.


        :return: The services of this HardwareUpdateInput.
        :rtype: object
        """
        return self._services

    @services.setter
    def services(self, services):
        """Sets the services of this HardwareUpdateInput.


        :param services: The services of this HardwareUpdateInput.
        :type services: object
        """

        self._services = services

    @property
    def management(self):
        """Gets the management of this HardwareUpdateInput.


        :return: The management of this HardwareUpdateInput.
        :rtype: object
        """
        return self._management

    @management.setter
    def management(self, management):
        """Sets the management of this HardwareUpdateInput.


        :param management: The management of this HardwareUpdateInput.
        :type management: object
        """

        self._management = management

    @property
    def data(self):
        """Gets the data of this HardwareUpdateInput.

        Holds custom data depending on the hardware type. Any attribute set here can also be set as part of the hardware object  # noqa: E501

        :return: The data of this HardwareUpdateInput.
        :rtype: object
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this HardwareUpdateInput.

        Holds custom data depending on the hardware type. Any attribute set here can also be set as part of the hardware object  # noqa: E501

        :param data: The data of this HardwareUpdateInput.
        :type data: object
        """

        self._data = data

    @property
    def role(self):
        """Gets the role of this HardwareUpdateInput.

        Role of the hardware. Will affect how the hardware will be named. Its required for certain hardware types.  # noqa: E501

        :return: The role of this HardwareUpdateInput.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this HardwareUpdateInput.

        Role of the hardware. Will affect how the hardware will be named. Its required for certain hardware types.  # noqa: E501

        :param role: The role of this HardwareUpdateInput.
        :type role: str
        """

        self._role = role

    @property
    def vlan_id(self):
        """Gets the vlan_id of this HardwareUpdateInput.

        On certain server nodes/sleds (t1.small.x86 and x1.small.x86), it describes the internal VLAN used to route traffic inside the BladeSwitch.  # noqa: E501

        :return: The vlan_id of this HardwareUpdateInput.
        :rtype: int
        """
        return self._vlan_id

    @vlan_id.setter
    def vlan_id(self, vlan_id):
        """Sets the vlan_id of this HardwareUpdateInput.

        On certain server nodes/sleds (t1.small.x86 and x1.small.x86), it describes the internal VLAN used to route traffic inside the BladeSwitch.  # noqa: E501

        :param vlan_id: The vlan_id of this HardwareUpdateInput.
        :type vlan_id: int
        """

        self._vlan_id = vlan_id

    @property
    def tpm(self):
        """Gets the tpm of this HardwareUpdateInput.

        On servers, describe if the server has a TPM card.  # noqa: E501

        :return: The tpm of this HardwareUpdateInput.
        :rtype: bool
        """
        return self._tpm

    @tpm.setter
    def tpm(self, tpm):
        """Sets the tpm of this HardwareUpdateInput.

        On servers, describe if the server has a TPM card.  # noqa: E501

        :param tpm: The tpm of this HardwareUpdateInput.
        :type tpm: bool
        """

        self._tpm = tpm

    @property
    def switch_short_id(self):
        """Gets the switch_short_id of this HardwareUpdateInput.

        On servers, describe the switch the server is connected too. If left empty, the value will be auto set on creation.  # noqa: E501

        :return: The switch_short_id of this HardwareUpdateInput.
        :rtype: str
        """
        return self._switch_short_id

    @switch_short_id.setter
    def switch_short_id(self, switch_short_id):
        """Sets the switch_short_id of this HardwareUpdateInput.

        On servers, describe the switch the server is connected too. If left empty, the value will be auto set on creation.  # noqa: E501

        :param switch_short_id: The switch_short_id of this HardwareUpdateInput.
        :type switch_short_id: str
        """

        self._switch_short_id = switch_short_id

    @property
    def is_primary(self):
        """Gets the is_primary of this HardwareUpdateInput.

        Switch attribute. On Arista switches, indicates which of the 2 Arista switches in mlag mode is the primary. Its used to properly configure the switch through Narhwal.  # noqa: E501

        :return: The is_primary of this HardwareUpdateInput.
        :rtype: bool
        """
        return self._is_primary

    @is_primary.setter
    def is_primary(self, is_primary):
        """Sets the is_primary of this HardwareUpdateInput.

        Switch attribute. On Arista switches, indicates which of the 2 Arista switches in mlag mode is the primary. Its used to properly configure the switch through Narhwal.  # noqa: E501

        :param is_primary: The is_primary of this HardwareUpdateInput.
        :type is_primary: bool
        """

        self._is_primary = is_primary

    @property
    def loopback_ip(self):
        """Gets the loopback_ip of this HardwareUpdateInput.

        Switch attribute. Specify the loopback_ip of the switch. Currently is not used in our automation.  # noqa: E501

        :return: The loopback_ip of this HardwareUpdateInput.
        :rtype: str
        """
        return self._loopback_ip

    @loopback_ip.setter
    def loopback_ip(self, loopback_ip):
        """Sets the loopback_ip of this HardwareUpdateInput.

        Switch attribute. Specify the loopback_ip of the switch. Currently is not used in our automation.  # noqa: E501

        :param loopback_ip: The loopback_ip of this HardwareUpdateInput.
        :type loopback_ip: str
        """

        self._loopback_ip = loopback_ip

    @property
    def vrf(self):
        """Gets the vrf of this HardwareUpdateInput.

        Switch attribute. Specify the Virtual Routing and Forwarding tag used on the configuration.  # noqa: E501

        :return: The vrf of this HardwareUpdateInput.
        :rtype: str
        """
        return self._vrf

    @vrf.setter
    def vrf(self, vrf):
        """Sets the vrf of this HardwareUpdateInput.

        Switch attribute. Specify the Virtual Routing and Forwarding tag used on the configuration.  # noqa: E501

        :param vrf: The vrf of this HardwareUpdateInput.
        :type vrf: str
        """

        self._vrf = vrf

    @property
    def exclude_from_narwhal(self):
        """Gets the exclude_from_narwhal of this HardwareUpdateInput.

        Switch attribute. If set to true, any switch configuration task created by our automation will be skipped for this switch  # noqa: E501

        :return: The exclude_from_narwhal of this HardwareUpdateInput.
        :rtype: bool
        """
        return self._exclude_from_narwhal

    @exclude_from_narwhal.setter
    def exclude_from_narwhal(self, exclude_from_narwhal):
        """Sets the exclude_from_narwhal of this HardwareUpdateInput.

        Switch attribute. If set to true, any switch configuration task created by our automation will be skipped for this switch  # noqa: E501

        :param exclude_from_narwhal: The exclude_from_narwhal of this HardwareUpdateInput.
        :type exclude_from_narwhal: bool
        """

        self._exclude_from_narwhal = exclude_from_narwhal
