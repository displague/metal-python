# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from metal.types.base_model_ import Model
from metal.types.bgp_neighbor_data_routes_in import BgpNeighborDataRoutesIn
from metal.types.bgp_neighbor_data_routes_out import BgpNeighborDataRoutesOut
from metal import util

from metal.types.bgp_neighbor_data_routes_in import BgpNeighborDataRoutesIn  # noqa: E501
from metal.types.bgp_neighbor_data_routes_out import BgpNeighborDataRoutesOut  # noqa: E501

class BgpNeighborData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address_family=None, customer_as=None, customer_ip=None, md5_enabled=None, md5_password=None, multihop=None, peer_as=None, peer_ips=None, routes_in=None, routes_out=None):  # noqa: E501
        """BgpNeighborData - a model defined in OpenAPI

        :param address_family: The address_family of this BgpNeighborData.  # noqa: E501
        :type address_family: float
        :param customer_as: The customer_as of this BgpNeighborData.  # noqa: E501
        :type customer_as: float
        :param customer_ip: The customer_ip of this BgpNeighborData.  # noqa: E501
        :type customer_ip: str
        :param md5_enabled: The md5_enabled of this BgpNeighborData.  # noqa: E501
        :type md5_enabled: bool
        :param md5_password: The md5_password of this BgpNeighborData.  # noqa: E501
        :type md5_password: str
        :param multihop: The multihop of this BgpNeighborData.  # noqa: E501
        :type multihop: bool
        :param peer_as: The peer_as of this BgpNeighborData.  # noqa: E501
        :type peer_as: float
        :param peer_ips: The peer_ips of this BgpNeighborData.  # noqa: E501
        :type peer_ips: List[str]
        :param routes_in: The routes_in of this BgpNeighborData.  # noqa: E501
        :type routes_in: List[BgpNeighborDataRoutesIn]
        :param routes_out: The routes_out of this BgpNeighborData.  # noqa: E501
        :type routes_out: List[BgpNeighborDataRoutesOut]
        """
        self.openapi_types = {
            'address_family': float,
            'customer_as': float,
            'customer_ip': str,
            'md5_enabled': bool,
            'md5_password': str,
            'multihop': bool,
            'peer_as': float,
            'peer_ips': List[str],
            'routes_in': List[BgpNeighborDataRoutesIn],
            'routes_out': List[BgpNeighborDataRoutesOut]
        }

        self.attribute_map = {
            'address_family': 'address_family',
            'customer_as': 'customer_as',
            'customer_ip': 'customer_ip',
            'md5_enabled': 'md5_enabled',
            'md5_password': 'md5_password',
            'multihop': 'multihop',
            'peer_as': 'peer_as',
            'peer_ips': 'peer_ips',
            'routes_in': 'routes_in',
            'routes_out': 'routes_out'
        }

        self._address_family = address_family
        self._customer_as = customer_as
        self._customer_ip = customer_ip
        self._md5_enabled = md5_enabled
        self._md5_password = md5_password
        self._multihop = multihop
        self._peer_as = peer_as
        self._peer_ips = peer_ips
        self._routes_in = routes_in
        self._routes_out = routes_out

    @classmethod
    def from_dict(cls, dikt) -> 'BgpNeighborData':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BgpNeighborData of this BgpNeighborData.  # noqa: E501
        :rtype: BgpNeighborData
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address_family(self):
        """Gets the address_family of this BgpNeighborData.

        Address Family for IP Address  # noqa: E501

        :return: The address_family of this BgpNeighborData.
        :rtype: float
        """
        return self._address_family

    @address_family.setter
    def address_family(self, address_family):
        """Sets the address_family of this BgpNeighborData.

        Address Family for IP Address  # noqa: E501

        :param address_family: The address_family of this BgpNeighborData.
        :type address_family: float
        """

        self._address_family = address_family

    @property
    def customer_as(self):
        """Gets the customer_as of this BgpNeighborData.

        The customer's ASN. In a local BGP deployment, this will be an internal ASN used to route within the data center. For a global BGP deployment, this will be the your own ASN, configured when you set up BGP for your project.  # noqa: E501

        :return: The customer_as of this BgpNeighborData.
        :rtype: float
        """
        return self._customer_as

    @customer_as.setter
    def customer_as(self, customer_as):
        """Sets the customer_as of this BgpNeighborData.

        The customer's ASN. In a local BGP deployment, this will be an internal ASN used to route within the data center. For a global BGP deployment, this will be the your own ASN, configured when you set up BGP for your project.  # noqa: E501

        :param customer_as: The customer_as of this BgpNeighborData.
        :type customer_as: float
        """

        self._customer_as = customer_as

    @property
    def customer_ip(self):
        """Gets the customer_ip of this BgpNeighborData.

        The device's IP address. For an IPv4 BGP session, this is typically the private bond0 address for the device.  # noqa: E501

        :return: The customer_ip of this BgpNeighborData.
        :rtype: str
        """
        return self._customer_ip

    @customer_ip.setter
    def customer_ip(self, customer_ip):
        """Sets the customer_ip of this BgpNeighborData.

        The device's IP address. For an IPv4 BGP session, this is typically the private bond0 address for the device.  # noqa: E501

        :param customer_ip: The customer_ip of this BgpNeighborData.
        :type customer_ip: str
        """

        self._customer_ip = customer_ip

    @property
    def md5_enabled(self):
        """Gets the md5_enabled of this BgpNeighborData.

        True if an MD5 password is configured for the project.  # noqa: E501

        :return: The md5_enabled of this BgpNeighborData.
        :rtype: bool
        """
        return self._md5_enabled

    @md5_enabled.setter
    def md5_enabled(self, md5_enabled):
        """Sets the md5_enabled of this BgpNeighborData.

        True if an MD5 password is configured for the project.  # noqa: E501

        :param md5_enabled: The md5_enabled of this BgpNeighborData.
        :type md5_enabled: bool
        """

        self._md5_enabled = md5_enabled

    @property
    def md5_password(self):
        """Gets the md5_password of this BgpNeighborData.

        The MD5 password configured for the project, if set.  # noqa: E501

        :return: The md5_password of this BgpNeighborData.
        :rtype: str
        """
        return self._md5_password

    @md5_password.setter
    def md5_password(self, md5_password):
        """Sets the md5_password of this BgpNeighborData.

        The MD5 password configured for the project, if set.  # noqa: E501

        :param md5_password: The md5_password of this BgpNeighborData.
        :type md5_password: str
        """

        self._md5_password = md5_password

    @property
    def multihop(self):
        """Gets the multihop of this BgpNeighborData.

        True when the BGP session should be configured as multihop.  # noqa: E501

        :return: The multihop of this BgpNeighborData.
        :rtype: bool
        """
        return self._multihop

    @multihop.setter
    def multihop(self, multihop):
        """Sets the multihop of this BgpNeighborData.

        True when the BGP session should be configured as multihop.  # noqa: E501

        :param multihop: The multihop of this BgpNeighborData.
        :type multihop: bool
        """

        self._multihop = multihop

    @property
    def peer_as(self):
        """Gets the peer_as of this BgpNeighborData.

        The Peer ASN to use when configuring BGP on your device.  # noqa: E501

        :return: The peer_as of this BgpNeighborData.
        :rtype: float
        """
        return self._peer_as

    @peer_as.setter
    def peer_as(self, peer_as):
        """Sets the peer_as of this BgpNeighborData.

        The Peer ASN to use when configuring BGP on your device.  # noqa: E501

        :param peer_as: The peer_as of this BgpNeighborData.
        :type peer_as: float
        """

        self._peer_as = peer_as

    @property
    def peer_ips(self):
        """Gets the peer_ips of this BgpNeighborData.

        A list of one or more IP addresses to use for the Peer IP section of your BGP configuration. For non-multihop sessions, this will typically be a single gateway address for the device. For multihop sessions, it will be a list of IPs.  # noqa: E501

        :return: The peer_ips of this BgpNeighborData.
        :rtype: List[str]
        """
        return self._peer_ips

    @peer_ips.setter
    def peer_ips(self, peer_ips):
        """Sets the peer_ips of this BgpNeighborData.

        A list of one or more IP addresses to use for the Peer IP section of your BGP configuration. For non-multihop sessions, this will typically be a single gateway address for the device. For multihop sessions, it will be a list of IPs.  # noqa: E501

        :param peer_ips: The peer_ips of this BgpNeighborData.
        :type peer_ips: List[str]
        """

        self._peer_ips = peer_ips

    @property
    def routes_in(self):
        """Gets the routes_in of this BgpNeighborData.

        A list of project subnets  # noqa: E501

        :return: The routes_in of this BgpNeighborData.
        :rtype: List[BgpNeighborDataRoutesIn]
        """
        return self._routes_in

    @routes_in.setter
    def routes_in(self, routes_in):
        """Sets the routes_in of this BgpNeighborData.

        A list of project subnets  # noqa: E501

        :param routes_in: The routes_in of this BgpNeighborData.
        :type routes_in: List[BgpNeighborDataRoutesIn]
        """

        self._routes_in = routes_in

    @property
    def routes_out(self):
        """Gets the routes_out of this BgpNeighborData.

        A list of outgoing routes. Only populated if the BGP session has default route enabled.  # noqa: E501

        :return: The routes_out of this BgpNeighborData.
        :rtype: List[BgpNeighborDataRoutesOut]
        """
        return self._routes_out

    @routes_out.setter
    def routes_out(self, routes_out):
        """Sets the routes_out of this BgpNeighborData.

        A list of outgoing routes. Only populated if the BGP session has default route enabled.  # noqa: E501

        :param routes_out: The routes_out of this BgpNeighborData.
        :type routes_out: List[BgpNeighborDataRoutesOut]
        """

        self._routes_out = routes_out
