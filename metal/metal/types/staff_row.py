# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from metal.types.base_model_ import Model
from metal.types.staff_cage import StaffCage
from metal.types.staff_server_rack import StaffServerRack
from metal import util

from metal.types.staff_cage import StaffCage  # noqa: E501
from metal.types.staff_server_rack import StaffServerRack  # noqa: E501

class StaffRow(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, name=None, code=None, cage=None, server_racks=None):  # noqa: E501
        """StaffRow - a model defined in OpenAPI

        :param id: The id of this StaffRow.  # noqa: E501
        :type id: str
        :param name: The name of this StaffRow.  # noqa: E501
        :type name: str
        :param code: The code of this StaffRow.  # noqa: E501
        :type code: str
        :param cage: The cage of this StaffRow.  # noqa: E501
        :type cage: StaffCage
        :param server_racks: The server_racks of this StaffRow.  # noqa: E501
        :type server_racks: List[StaffServerRack]
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'code': str,
            'cage': StaffCage,
            'server_racks': List[StaffServerRack]
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'code': 'code',
            'cage': 'cage',
            'server_racks': 'server_racks'
        }

        self._id = id
        self._name = name
        self._code = code
        self._cage = cage
        self._server_racks = server_racks

    @classmethod
    def from_dict(cls, dikt) -> 'StaffRow':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Staff::Row of this StaffRow.  # noqa: E501
        :rtype: StaffRow
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this StaffRow.


        :return: The id of this StaffRow.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StaffRow.


        :param id: The id of this StaffRow.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this StaffRow.


        :return: The name of this StaffRow.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StaffRow.


        :param name: The name of this StaffRow.
        :type name: str
        """

        self._name = name

    @property
    def code(self):
        """Gets the code of this StaffRow.


        :return: The code of this StaffRow.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this StaffRow.


        :param code: The code of this StaffRow.
        :type code: str
        """

        self._code = code

    @property
    def cage(self):
        """Gets the cage of this StaffRow.


        :return: The cage of this StaffRow.
        :rtype: StaffCage
        """
        return self._cage

    @cage.setter
    def cage(self, cage):
        """Sets the cage of this StaffRow.


        :param cage: The cage of this StaffRow.
        :type cage: StaffCage
        """

        self._cage = cage

    @property
    def server_racks(self):
        """Gets the server_racks of this StaffRow.


        :return: The server_racks of this StaffRow.
        :rtype: List[StaffServerRack]
        """
        return self._server_racks

    @server_racks.setter
    def server_racks(self, server_racks):
        """Sets the server_racks of this StaffRow.


        :param server_racks: The server_racks of this StaffRow.
        :type server_racks: List[StaffServerRack]
        """

        self._server_racks = server_racks
