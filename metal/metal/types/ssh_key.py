# coding: utf-8

"""
    Metal API

    This is the API for Equinix Metal Product. Interact with your devices, user account, and projects.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@equinixmetal.com
    Generated by: https://openapi-generator.tech
"""


import inspect
import pprint
import re  # noqa: F401
import six

from metal.configuration import Configuration


class SSHKey(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'label': 'str',
        'key': 'str',
        'fingerprint': 'str',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'entity': 'Href',
        'href': 'str'
    }

    attribute_map = {
        'id': 'id',
        'label': 'label',
        'key': 'key',
        'fingerprint': 'fingerprint',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'entity': 'entity',
        'href': 'href'
    }

    def __init__(self, id=None, label=None, key=None, fingerprint=None, created_at=None, updated_at=None, entity=None, href=None, local_vars_configuration=None):  # noqa: E501
        """SSHKey - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._label = None
        self._key = None
        self._fingerprint = None
        self._created_at = None
        self._updated_at = None
        self._entity = None
        self._href = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if label is not None:
            self.label = label
        if key is not None:
            self.key = key
        if fingerprint is not None:
            self.fingerprint = fingerprint
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if entity is not None:
            self.entity = entity
        if href is not None:
            self.href = href

    @property
    def id(self):
        """Gets the id of this SSHKey.  # noqa: E501


        :return: The id of this SSHKey.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SSHKey.


        :param id: The id of this SSHKey.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def label(self):
        """Gets the label of this SSHKey.  # noqa: E501


        :return: The label of this SSHKey.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this SSHKey.


        :param label: The label of this SSHKey.  # noqa: E501
        :type label: str
        """

        self._label = label

    @property
    def key(self):
        """Gets the key of this SSHKey.  # noqa: E501


        :return: The key of this SSHKey.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this SSHKey.


        :param key: The key of this SSHKey.  # noqa: E501
        :type key: str
        """

        self._key = key

    @property
    def fingerprint(self):
        """Gets the fingerprint of this SSHKey.  # noqa: E501


        :return: The fingerprint of this SSHKey.  # noqa: E501
        :rtype: str
        """
        return self._fingerprint

    @fingerprint.setter
    def fingerprint(self, fingerprint):
        """Sets the fingerprint of this SSHKey.


        :param fingerprint: The fingerprint of this SSHKey.  # noqa: E501
        :type fingerprint: str
        """

        self._fingerprint = fingerprint

    @property
    def created_at(self):
        """Gets the created_at of this SSHKey.  # noqa: E501


        :return: The created_at of this SSHKey.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this SSHKey.


        :param created_at: The created_at of this SSHKey.  # noqa: E501
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this SSHKey.  # noqa: E501


        :return: The updated_at of this SSHKey.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this SSHKey.


        :param updated_at: The updated_at of this SSHKey.  # noqa: E501
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def entity(self):
        """Gets the entity of this SSHKey.  # noqa: E501


        :return: The entity of this SSHKey.  # noqa: E501
        :rtype: Href
        """
        return self._entity

    @entity.setter
    def entity(self, entity):
        """Sets the entity of this SSHKey.


        :param entity: The entity of this SSHKey.  # noqa: E501
        :type entity: Href
        """

        self._entity = entity

    @property
    def href(self):
        """Gets the href of this SSHKey.  # noqa: E501


        :return: The href of this SSHKey.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this SSHKey.


        :param href: The href of this SSHKey.  # noqa: E501
        :type href: str
        """

        self._href = href

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = inspect.getargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SSHKey):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SSHKey):
            return True

        return self.to_dict() != other.to_dict()
