# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from metal.types.base_model_ import Model
from metal import util


class CapacityPerBaremetal(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, level=None, available_servers=None, total_servers=None, market_buffer_percentage=None, market_floor_price=None):  # noqa: E501
        """CapacityPerBaremetal - a model defined in OpenAPI

        :param level: The level of this CapacityPerBaremetal.  # noqa: E501
        :type level: str
        :param available_servers: The available_servers of this CapacityPerBaremetal.  # noqa: E501
        :type available_servers: int
        :param total_servers: The total_servers of this CapacityPerBaremetal.  # noqa: E501
        :type total_servers: int
        :param market_buffer_percentage: The market_buffer_percentage of this CapacityPerBaremetal.  # noqa: E501
        :type market_buffer_percentage: int
        :param market_floor_price: The market_floor_price of this CapacityPerBaremetal.  # noqa: E501
        :type market_floor_price: float
        """
        self.openapi_types = {
            'level': str,
            'available_servers': int,
            'total_servers': int,
            'market_buffer_percentage': int,
            'market_floor_price': float
        }

        self.attribute_map = {
            'level': 'level',
            'available_servers': 'available_servers',
            'total_servers': 'total_servers',
            'market_buffer_percentage': 'market_buffer_percentage',
            'market_floor_price': 'market_floor_price'
        }

        self._level = level
        self._available_servers = available_servers
        self._total_servers = total_servers
        self._market_buffer_percentage = market_buffer_percentage
        self._market_floor_price = market_floor_price

    @classmethod
    def from_dict(cls, dikt) -> 'CapacityPerBaremetal':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CapacityPerBaremetal of this CapacityPerBaremetal.  # noqa: E501
        :rtype: CapacityPerBaremetal
        """
        return util.deserialize_model(dikt, cls)

    @property
    def level(self):
        """Gets the level of this CapacityPerBaremetal.


        :return: The level of this CapacityPerBaremetal.
        :rtype: str
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this CapacityPerBaremetal.


        :param level: The level of this CapacityPerBaremetal.
        :type level: str
        """

        self._level = level

    @property
    def available_servers(self):
        """Gets the available_servers of this CapacityPerBaremetal.


        :return: The available_servers of this CapacityPerBaremetal.
        :rtype: int
        """
        return self._available_servers

    @available_servers.setter
    def available_servers(self, available_servers):
        """Sets the available_servers of this CapacityPerBaremetal.


        :param available_servers: The available_servers of this CapacityPerBaremetal.
        :type available_servers: int
        """

        self._available_servers = available_servers

    @property
    def total_servers(self):
        """Gets the total_servers of this CapacityPerBaremetal.


        :return: The total_servers of this CapacityPerBaremetal.
        :rtype: int
        """
        return self._total_servers

    @total_servers.setter
    def total_servers(self, total_servers):
        """Sets the total_servers of this CapacityPerBaremetal.


        :param total_servers: The total_servers of this CapacityPerBaremetal.
        :type total_servers: int
        """

        self._total_servers = total_servers

    @property
    def market_buffer_percentage(self):
        """Gets the market_buffer_percentage of this CapacityPerBaremetal.


        :return: The market_buffer_percentage of this CapacityPerBaremetal.
        :rtype: int
        """
        return self._market_buffer_percentage

    @market_buffer_percentage.setter
    def market_buffer_percentage(self, market_buffer_percentage):
        """Sets the market_buffer_percentage of this CapacityPerBaremetal.


        :param market_buffer_percentage: The market_buffer_percentage of this CapacityPerBaremetal.
        :type market_buffer_percentage: int
        """

        self._market_buffer_percentage = market_buffer_percentage

    @property
    def market_floor_price(self):
        """Gets the market_floor_price of this CapacityPerBaremetal.


        :return: The market_floor_price of this CapacityPerBaremetal.
        :rtype: float
        """
        return self._market_floor_price

    @market_floor_price.setter
    def market_floor_price(self, market_floor_price):
        """Sets the market_floor_price of this CapacityPerBaremetal.


        :param market_floor_price: The market_floor_price of this CapacityPerBaremetal.
        :type market_floor_price: float
        """

        self._market_floor_price = market_floor_price
