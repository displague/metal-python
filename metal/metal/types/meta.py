# coding: utf-8

"""
    Metal API

    This is the API for Equinix Metal Product. Interact with your devices, user account, and projects.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@equinixmetal.com
    Generated by: https://openapi-generator.tech
"""


import inspect
import pprint
import re  # noqa: F401
import six

from metal.configuration import Configuration


class Meta(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'first': 'Href',
        'previous': 'Href',
        '_self': 'Href',
        'next': 'Href',
        'last': 'Href',
        'total': 'int'
    }

    attribute_map = {
        'first': 'first',
        'previous': 'previous',
        '_self': 'self',
        'next': 'next',
        'last': 'last',
        'total': 'total'
    }

    def __init__(self, first=None, previous=None, _self=None, next=None, last=None, total=None, local_vars_configuration=None):  # noqa: E501
        """Meta - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._first = None
        self._previous = None
        self.__self = None
        self._next = None
        self._last = None
        self._total = None
        self.discriminator = None

        if first is not None:
            self.first = first
        if previous is not None:
            self.previous = previous
        if _self is not None:
            self._self = _self
        if next is not None:
            self.next = next
        if last is not None:
            self.last = last
        if total is not None:
            self.total = total

    @property
    def first(self):
        """Gets the first of this Meta.  # noqa: E501


        :return: The first of this Meta.  # noqa: E501
        :rtype: Href
        """
        return self._first

    @first.setter
    def first(self, first):
        """Sets the first of this Meta.


        :param first: The first of this Meta.  # noqa: E501
        :type first: Href
        """

        self._first = first

    @property
    def previous(self):
        """Gets the previous of this Meta.  # noqa: E501


        :return: The previous of this Meta.  # noqa: E501
        :rtype: Href
        """
        return self._previous

    @previous.setter
    def previous(self, previous):
        """Sets the previous of this Meta.


        :param previous: The previous of this Meta.  # noqa: E501
        :type previous: Href
        """

        self._previous = previous

    @property
    def _self(self):
        """Gets the _self of this Meta.  # noqa: E501


        :return: The _self of this Meta.  # noqa: E501
        :rtype: Href
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this Meta.


        :param _self: The _self of this Meta.  # noqa: E501
        :type _self: Href
        """

        self.__self = _self

    @property
    def next(self):
        """Gets the next of this Meta.  # noqa: E501


        :return: The next of this Meta.  # noqa: E501
        :rtype: Href
        """
        return self._next

    @next.setter
    def next(self, next):
        """Sets the next of this Meta.


        :param next: The next of this Meta.  # noqa: E501
        :type next: Href
        """

        self._next = next

    @property
    def last(self):
        """Gets the last of this Meta.  # noqa: E501


        :return: The last of this Meta.  # noqa: E501
        :rtype: Href
        """
        return self._last

    @last.setter
    def last(self, last):
        """Sets the last of this Meta.


        :param last: The last of this Meta.  # noqa: E501
        :type last: Href
        """

        self._last = last

    @property
    def total(self):
        """Gets the total of this Meta.  # noqa: E501


        :return: The total of this Meta.  # noqa: E501
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this Meta.


        :param total: The total of this Meta.  # noqa: E501
        :type total: int
        """

        self._total = total

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = inspect.getargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Meta):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Meta):
            return True

        return self.to_dict() != other.to_dict()
