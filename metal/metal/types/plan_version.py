# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from metal.types.base_model_ import Model
from metal import util


class PlanVersion(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, slug=None, name=None, specs=None, line=None):  # noqa: E501
        """PlanVersion - a model defined in OpenAPI

        :param id: The id of this PlanVersion.  # noqa: E501
        :type id: str
        :param slug: The slug of this PlanVersion.  # noqa: E501
        :type slug: str
        :param name: The name of this PlanVersion.  # noqa: E501
        :type name: str
        :param specs: The specs of this PlanVersion.  # noqa: E501
        :type specs: object
        :param line: The line of this PlanVersion.  # noqa: E501
        :type line: str
        """
        self.openapi_types = {
            'id': str,
            'slug': str,
            'name': str,
            'specs': object,
            'line': str
        }

        self.attribute_map = {
            'id': 'id',
            'slug': 'slug',
            'name': 'name',
            'specs': 'specs',
            'line': 'line'
        }

        self._id = id
        self._slug = slug
        self._name = name
        self._specs = specs
        self._line = line

    @classmethod
    def from_dict(cls, dikt) -> 'PlanVersion':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PlanVersion of this PlanVersion.  # noqa: E501
        :rtype: PlanVersion
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this PlanVersion.


        :return: The id of this PlanVersion.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PlanVersion.


        :param id: The id of this PlanVersion.
        :type id: str
        """

        self._id = id

    @property
    def slug(self):
        """Gets the slug of this PlanVersion.


        :return: The slug of this PlanVersion.
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this PlanVersion.


        :param slug: The slug of this PlanVersion.
        :type slug: str
        """

        self._slug = slug

    @property
    def name(self):
        """Gets the name of this PlanVersion.


        :return: The name of this PlanVersion.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PlanVersion.


        :param name: The name of this PlanVersion.
        :type name: str
        """

        self._name = name

    @property
    def specs(self):
        """Gets the specs of this PlanVersion.


        :return: The specs of this PlanVersion.
        :rtype: object
        """
        return self._specs

    @specs.setter
    def specs(self, specs):
        """Sets the specs of this PlanVersion.


        :param specs: The specs of this PlanVersion.
        :type specs: object
        """

        self._specs = specs

    @property
    def line(self):
        """Gets the line of this PlanVersion.


        :return: The line of this PlanVersion.
        :rtype: str
        """
        return self._line

    @line.setter
    def line(self, line):
        """Sets the line of this PlanVersion.


        :param line: The line of this PlanVersion.
        :type line: str
        """

        self._line = line
