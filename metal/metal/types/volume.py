# coding: utf-8

"""
    Metal API

    This is the API for Equinix Metal Product. Interact with your devices, user account, and projects.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@equinixmetal.com
    Generated by: https://openapi-generator.tech
"""


import inspect
import pprint
import re  # noqa: F401
import six

from metal.configuration import Configuration


class Volume(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'name': 'str',
        'description': 'str',
        'size': 'int',
        'locked': 'bool',
        'billing_cycle': 'str',
        'state': 'str',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'project': 'Href',
        'facility': 'Href',
        'snapshot_policies': 'list[Href]',
        'attachments': 'list[Href]',
        'plan': 'Plan',
        'href': 'str',
        'customdata': 'object'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'size': 'size',
        'locked': 'locked',
        'billing_cycle': 'billing_cycle',
        'state': 'state',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'project': 'project',
        'facility': 'facility',
        'snapshot_policies': 'snapshot_policies',
        'attachments': 'attachments',
        'plan': 'plan',
        'href': 'href',
        'customdata': 'customdata'
    }

    def __init__(self, id=None, name=None, description=None, size=None, locked=None, billing_cycle=None, state=None, created_at=None, updated_at=None, project=None, facility=None, snapshot_policies=None, attachments=None, plan=None, href=None, customdata=None, local_vars_configuration=None):  # noqa: E501
        """Volume - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._description = None
        self._size = None
        self._locked = None
        self._billing_cycle = None
        self._state = None
        self._created_at = None
        self._updated_at = None
        self._project = None
        self._facility = None
        self._snapshot_policies = None
        self._attachments = None
        self._plan = None
        self._href = None
        self._customdata = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if size is not None:
            self.size = size
        if locked is not None:
            self.locked = locked
        if billing_cycle is not None:
            self.billing_cycle = billing_cycle
        if state is not None:
            self.state = state
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if project is not None:
            self.project = project
        if facility is not None:
            self.facility = facility
        if snapshot_policies is not None:
            self.snapshot_policies = snapshot_policies
        if attachments is not None:
            self.attachments = attachments
        if plan is not None:
            self.plan = plan
        if href is not None:
            self.href = href
        if customdata is not None:
            self.customdata = customdata

    @property
    def id(self):
        """Gets the id of this Volume.  # noqa: E501


        :return: The id of this Volume.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Volume.


        :param id: The id of this Volume.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Volume.  # noqa: E501


        :return: The name of this Volume.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Volume.


        :param name: The name of this Volume.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this Volume.  # noqa: E501


        :return: The description of this Volume.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Volume.


        :param description: The description of this Volume.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def size(self):
        """Gets the size of this Volume.  # noqa: E501


        :return: The size of this Volume.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this Volume.


        :param size: The size of this Volume.  # noqa: E501
        :type size: int
        """

        self._size = size

    @property
    def locked(self):
        """Gets the locked of this Volume.  # noqa: E501


        :return: The locked of this Volume.  # noqa: E501
        :rtype: bool
        """
        return self._locked

    @locked.setter
    def locked(self, locked):
        """Sets the locked of this Volume.


        :param locked: The locked of this Volume.  # noqa: E501
        :type locked: bool
        """

        self._locked = locked

    @property
    def billing_cycle(self):
        """Gets the billing_cycle of this Volume.  # noqa: E501


        :return: The billing_cycle of this Volume.  # noqa: E501
        :rtype: str
        """
        return self._billing_cycle

    @billing_cycle.setter
    def billing_cycle(self, billing_cycle):
        """Sets the billing_cycle of this Volume.


        :param billing_cycle: The billing_cycle of this Volume.  # noqa: E501
        :type billing_cycle: str
        """

        self._billing_cycle = billing_cycle

    @property
    def state(self):
        """Gets the state of this Volume.  # noqa: E501


        :return: The state of this Volume.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Volume.


        :param state: The state of this Volume.  # noqa: E501
        :type state: str
        """

        self._state = state

    @property
    def created_at(self):
        """Gets the created_at of this Volume.  # noqa: E501


        :return: The created_at of this Volume.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Volume.


        :param created_at: The created_at of this Volume.  # noqa: E501
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Volume.  # noqa: E501


        :return: The updated_at of this Volume.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Volume.


        :param updated_at: The updated_at of this Volume.  # noqa: E501
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def project(self):
        """Gets the project of this Volume.  # noqa: E501


        :return: The project of this Volume.  # noqa: E501
        :rtype: Href
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this Volume.


        :param project: The project of this Volume.  # noqa: E501
        :type project: Href
        """

        self._project = project

    @property
    def facility(self):
        """Gets the facility of this Volume.  # noqa: E501


        :return: The facility of this Volume.  # noqa: E501
        :rtype: Href
        """
        return self._facility

    @facility.setter
    def facility(self, facility):
        """Sets the facility of this Volume.


        :param facility: The facility of this Volume.  # noqa: E501
        :type facility: Href
        """

        self._facility = facility

    @property
    def snapshot_policies(self):
        """Gets the snapshot_policies of this Volume.  # noqa: E501


        :return: The snapshot_policies of this Volume.  # noqa: E501
        :rtype: list[Href]
        """
        return self._snapshot_policies

    @snapshot_policies.setter
    def snapshot_policies(self, snapshot_policies):
        """Sets the snapshot_policies of this Volume.


        :param snapshot_policies: The snapshot_policies of this Volume.  # noqa: E501
        :type snapshot_policies: list[Href]
        """

        self._snapshot_policies = snapshot_policies

    @property
    def attachments(self):
        """Gets the attachments of this Volume.  # noqa: E501


        :return: The attachments of this Volume.  # noqa: E501
        :rtype: list[Href]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this Volume.


        :param attachments: The attachments of this Volume.  # noqa: E501
        :type attachments: list[Href]
        """

        self._attachments = attachments

    @property
    def plan(self):
        """Gets the plan of this Volume.  # noqa: E501


        :return: The plan of this Volume.  # noqa: E501
        :rtype: Plan
        """
        return self._plan

    @plan.setter
    def plan(self, plan):
        """Sets the plan of this Volume.


        :param plan: The plan of this Volume.  # noqa: E501
        :type plan: Plan
        """

        self._plan = plan

    @property
    def href(self):
        """Gets the href of this Volume.  # noqa: E501


        :return: The href of this Volume.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this Volume.


        :param href: The href of this Volume.  # noqa: E501
        :type href: str
        """

        self._href = href

    @property
    def customdata(self):
        """Gets the customdata of this Volume.  # noqa: E501


        :return: The customdata of this Volume.  # noqa: E501
        :rtype: object
        """
        return self._customdata

    @customdata.setter
    def customdata(self, customdata):
        """Sets the customdata of this Volume.


        :param customdata: The customdata of this Volume.  # noqa: E501
        :type customdata: object
        """

        self._customdata = customdata

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = inspect.getargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Volume):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Volume):
            return True

        return self.to_dict() != other.to_dict()
