# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from metal.types.base_model_ import Model
from metal.types.href import Href
from metal.types.plan import Plan
from metal import util

from metal.types.href import Href  # noqa: E501
from metal.types.plan import Plan  # noqa: E501

class Volume(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, name=None, description=None, size=None, locked=None, billing_cycle=None, state=None, created_at=None, updated_at=None, project=None, facility=None, snapshot_policies=None, attachments=None, plan=None, href=None, customdata=None):  # noqa: E501
        """Volume - a model defined in OpenAPI

        :param id: The id of this Volume.  # noqa: E501
        :type id: str
        :param name: The name of this Volume.  # noqa: E501
        :type name: str
        :param description: The description of this Volume.  # noqa: E501
        :type description: str
        :param size: The size of this Volume.  # noqa: E501
        :type size: int
        :param locked: The locked of this Volume.  # noqa: E501
        :type locked: bool
        :param billing_cycle: The billing_cycle of this Volume.  # noqa: E501
        :type billing_cycle: str
        :param state: The state of this Volume.  # noqa: E501
        :type state: str
        :param created_at: The created_at of this Volume.  # noqa: E501
        :type created_at: datetime
        :param updated_at: The updated_at of this Volume.  # noqa: E501
        :type updated_at: datetime
        :param project: The project of this Volume.  # noqa: E501
        :type project: Href
        :param facility: The facility of this Volume.  # noqa: E501
        :type facility: Href
        :param snapshot_policies: The snapshot_policies of this Volume.  # noqa: E501
        :type snapshot_policies: List[Href]
        :param attachments: The attachments of this Volume.  # noqa: E501
        :type attachments: List[Href]
        :param plan: The plan of this Volume.  # noqa: E501
        :type plan: Plan
        :param href: The href of this Volume.  # noqa: E501
        :type href: str
        :param customdata: The customdata of this Volume.  # noqa: E501
        :type customdata: object
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'description': str,
            'size': int,
            'locked': bool,
            'billing_cycle': str,
            'state': str,
            'created_at': datetime,
            'updated_at': datetime,
            'project': Href,
            'facility': Href,
            'snapshot_policies': List[Href],
            'attachments': List[Href],
            'plan': Plan,
            'href': str,
            'customdata': object
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'description': 'description',
            'size': 'size',
            'locked': 'locked',
            'billing_cycle': 'billing_cycle',
            'state': 'state',
            'created_at': 'created_at',
            'updated_at': 'updated_at',
            'project': 'project',
            'facility': 'facility',
            'snapshot_policies': 'snapshot_policies',
            'attachments': 'attachments',
            'plan': 'plan',
            'href': 'href',
            'customdata': 'customdata'
        }

        self._id = id
        self._name = name
        self._description = description
        self._size = size
        self._locked = locked
        self._billing_cycle = billing_cycle
        self._state = state
        self._created_at = created_at
        self._updated_at = updated_at
        self._project = project
        self._facility = facility
        self._snapshot_policies = snapshot_policies
        self._attachments = attachments
        self._plan = plan
        self._href = href
        self._customdata = customdata

    @classmethod
    def from_dict(cls, dikt) -> 'Volume':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Volume of this Volume.  # noqa: E501
        :rtype: Volume
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Volume.


        :return: The id of this Volume.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Volume.


        :param id: The id of this Volume.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Volume.


        :return: The name of this Volume.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Volume.


        :param name: The name of this Volume.
        :type name: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this Volume.


        :return: The description of this Volume.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Volume.


        :param description: The description of this Volume.
        :type description: str
        """

        self._description = description

    @property
    def size(self):
        """Gets the size of this Volume.


        :return: The size of this Volume.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this Volume.


        :param size: The size of this Volume.
        :type size: int
        """

        self._size = size

    @property
    def locked(self):
        """Gets the locked of this Volume.


        :return: The locked of this Volume.
        :rtype: bool
        """
        return self._locked

    @locked.setter
    def locked(self, locked):
        """Sets the locked of this Volume.


        :param locked: The locked of this Volume.
        :type locked: bool
        """

        self._locked = locked

    @property
    def billing_cycle(self):
        """Gets the billing_cycle of this Volume.


        :return: The billing_cycle of this Volume.
        :rtype: str
        """
        return self._billing_cycle

    @billing_cycle.setter
    def billing_cycle(self, billing_cycle):
        """Sets the billing_cycle of this Volume.


        :param billing_cycle: The billing_cycle of this Volume.
        :type billing_cycle: str
        """

        self._billing_cycle = billing_cycle

    @property
    def state(self):
        """Gets the state of this Volume.


        :return: The state of this Volume.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Volume.


        :param state: The state of this Volume.
        :type state: str
        """

        self._state = state

    @property
    def created_at(self):
        """Gets the created_at of this Volume.


        :return: The created_at of this Volume.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Volume.


        :param created_at: The created_at of this Volume.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Volume.


        :return: The updated_at of this Volume.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Volume.


        :param updated_at: The updated_at of this Volume.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def project(self):
        """Gets the project of this Volume.


        :return: The project of this Volume.
        :rtype: Href
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this Volume.


        :param project: The project of this Volume.
        :type project: Href
        """

        self._project = project

    @property
    def facility(self):
        """Gets the facility of this Volume.


        :return: The facility of this Volume.
        :rtype: Href
        """
        return self._facility

    @facility.setter
    def facility(self, facility):
        """Sets the facility of this Volume.


        :param facility: The facility of this Volume.
        :type facility: Href
        """

        self._facility = facility

    @property
    def snapshot_policies(self):
        """Gets the snapshot_policies of this Volume.


        :return: The snapshot_policies of this Volume.
        :rtype: List[Href]
        """
        return self._snapshot_policies

    @snapshot_policies.setter
    def snapshot_policies(self, snapshot_policies):
        """Sets the snapshot_policies of this Volume.


        :param snapshot_policies: The snapshot_policies of this Volume.
        :type snapshot_policies: List[Href]
        """

        self._snapshot_policies = snapshot_policies

    @property
    def attachments(self):
        """Gets the attachments of this Volume.


        :return: The attachments of this Volume.
        :rtype: List[Href]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this Volume.


        :param attachments: The attachments of this Volume.
        :type attachments: List[Href]
        """

        self._attachments = attachments

    @property
    def plan(self):
        """Gets the plan of this Volume.


        :return: The plan of this Volume.
        :rtype: Plan
        """
        return self._plan

    @plan.setter
    def plan(self, plan):
        """Sets the plan of this Volume.


        :param plan: The plan of this Volume.
        :type plan: Plan
        """

        self._plan = plan

    @property
    def href(self):
        """Gets the href of this Volume.


        :return: The href of this Volume.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this Volume.


        :param href: The href of this Volume.
        :type href: str
        """

        self._href = href

    @property
    def customdata(self):
        """Gets the customdata of this Volume.


        :return: The customdata of this Volume.
        :rtype: object
        """
        return self._customdata

    @customdata.setter
    def customdata(self, customdata):
        """Sets the customdata of this Volume.


        :param customdata: The customdata of this Volume.
        :type customdata: object
        """

        self._customdata = customdata
