# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from metal.types.base_model_ import Model
from metal.types.href import Href
from metal import util

from metal.types.href import Href  # noqa: E501

class VirtualCircuit(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, name=None, description=None, status=None, vnid=None, nni_vlan=None, speed=None, tags=None, project=None, virtual_network=None):  # noqa: E501
        """VirtualCircuit - a model defined in OpenAPI

        :param id: The id of this VirtualCircuit.  # noqa: E501
        :type id: str
        :param name: The name of this VirtualCircuit.  # noqa: E501
        :type name: str
        :param description: The description of this VirtualCircuit.  # noqa: E501
        :type description: str
        :param status: The status of this VirtualCircuit.  # noqa: E501
        :type status: str
        :param vnid: The vnid of this VirtualCircuit.  # noqa: E501
        :type vnid: int
        :param nni_vlan: The nni_vlan of this VirtualCircuit.  # noqa: E501
        :type nni_vlan: int
        :param speed: The speed of this VirtualCircuit.  # noqa: E501
        :type speed: int
        :param tags: The tags of this VirtualCircuit.  # noqa: E501
        :type tags: List[str]
        :param project: The project of this VirtualCircuit.  # noqa: E501
        :type project: Href
        :param virtual_network: The virtual_network of this VirtualCircuit.  # noqa: E501
        :type virtual_network: Href
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'description': str,
            'status': str,
            'vnid': int,
            'nni_vlan': int,
            'speed': int,
            'tags': List[str],
            'project': Href,
            'virtual_network': Href
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'description': 'description',
            'status': 'status',
            'vnid': 'vnid',
            'nni_vlan': 'nni_vlan',
            'speed': 'speed',
            'tags': 'tags',
            'project': 'project',
            'virtual_network': 'virtual_network'
        }

        self._id = id
        self._name = name
        self._description = description
        self._status = status
        self._vnid = vnid
        self._nni_vlan = nni_vlan
        self._speed = speed
        self._tags = tags
        self._project = project
        self._virtual_network = virtual_network

    @classmethod
    def from_dict(cls, dikt) -> 'VirtualCircuit':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The VirtualCircuit of this VirtualCircuit.  # noqa: E501
        :rtype: VirtualCircuit
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this VirtualCircuit.


        :return: The id of this VirtualCircuit.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VirtualCircuit.


        :param id: The id of this VirtualCircuit.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this VirtualCircuit.


        :return: The name of this VirtualCircuit.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VirtualCircuit.


        :param name: The name of this VirtualCircuit.
        :type name: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this VirtualCircuit.


        :return: The description of this VirtualCircuit.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this VirtualCircuit.


        :param description: The description of this VirtualCircuit.
        :type description: str
        """

        self._description = description

    @property
    def status(self):
        """Gets the status of this VirtualCircuit.


        :return: The status of this VirtualCircuit.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this VirtualCircuit.


        :param status: The status of this VirtualCircuit.
        :type status: str
        """

        self._status = status

    @property
    def vnid(self):
        """Gets the vnid of this VirtualCircuit.


        :return: The vnid of this VirtualCircuit.
        :rtype: int
        """
        return self._vnid

    @vnid.setter
    def vnid(self, vnid):
        """Sets the vnid of this VirtualCircuit.


        :param vnid: The vnid of this VirtualCircuit.
        :type vnid: int
        """

        self._vnid = vnid

    @property
    def nni_vlan(self):
        """Gets the nni_vlan of this VirtualCircuit.


        :return: The nni_vlan of this VirtualCircuit.
        :rtype: int
        """
        return self._nni_vlan

    @nni_vlan.setter
    def nni_vlan(self, nni_vlan):
        """Sets the nni_vlan of this VirtualCircuit.


        :param nni_vlan: The nni_vlan of this VirtualCircuit.
        :type nni_vlan: int
        """

        self._nni_vlan = nni_vlan

    @property
    def speed(self):
        """Gets the speed of this VirtualCircuit.

        integer representing bps speed  # noqa: E501

        :return: The speed of this VirtualCircuit.
        :rtype: int
        """
        return self._speed

    @speed.setter
    def speed(self, speed):
        """Sets the speed of this VirtualCircuit.

        integer representing bps speed  # noqa: E501

        :param speed: The speed of this VirtualCircuit.
        :type speed: int
        """

        self._speed = speed

    @property
    def tags(self):
        """Gets the tags of this VirtualCircuit.


        :return: The tags of this VirtualCircuit.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this VirtualCircuit.


        :param tags: The tags of this VirtualCircuit.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def project(self):
        """Gets the project of this VirtualCircuit.


        :return: The project of this VirtualCircuit.
        :rtype: Href
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this VirtualCircuit.


        :param project: The project of this VirtualCircuit.
        :type project: Href
        """

        self._project = project

    @property
    def virtual_network(self):
        """Gets the virtual_network of this VirtualCircuit.


        :return: The virtual_network of this VirtualCircuit.
        :rtype: Href
        """
        return self._virtual_network

    @virtual_network.setter
    def virtual_network(self, virtual_network):
        """Sets the virtual_network of this VirtualCircuit.


        :param virtual_network: The virtual_network of this VirtualCircuit.
        :type virtual_network: Href
        """

        self._virtual_network = virtual_network
