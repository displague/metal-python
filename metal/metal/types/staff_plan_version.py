# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from metal.types.base_model_ import Model
from metal.types.staff_facility_little import StaffFacilityLittle
from metal.types.staff_plan import StaffPlan
from metal import util

from metal.types.staff_facility_little import StaffFacilityLittle  # noqa: E501
from metal.types.staff_plan import StaffPlan  # noqa: E501

class StaffPlanVersion(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, name=None, slug=None, specs=None, active=None, priority=None, storage=None, preinstallable=None, plan=None, facility=None):  # noqa: E501
        """StaffPlanVersion - a model defined in OpenAPI

        :param id: The id of this StaffPlanVersion.  # noqa: E501
        :type id: str
        :param name: The name of this StaffPlanVersion.  # noqa: E501
        :type name: str
        :param slug: The slug of this StaffPlanVersion.  # noqa: E501
        :type slug: str
        :param specs: The specs of this StaffPlanVersion.  # noqa: E501
        :type specs: str
        :param active: The active of this StaffPlanVersion.  # noqa: E501
        :type active: bool
        :param priority: The priority of this StaffPlanVersion.  # noqa: E501
        :type priority: int
        :param storage: The storage of this StaffPlanVersion.  # noqa: E501
        :type storage: str
        :param preinstallable: The preinstallable of this StaffPlanVersion.  # noqa: E501
        :type preinstallable: bool
        :param plan: The plan of this StaffPlanVersion.  # noqa: E501
        :type plan: StaffPlan
        :param facility: The facility of this StaffPlanVersion.  # noqa: E501
        :type facility: StaffFacilityLittle
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'slug': str,
            'specs': str,
            'active': bool,
            'priority': int,
            'storage': str,
            'preinstallable': bool,
            'plan': StaffPlan,
            'facility': StaffFacilityLittle
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'slug': 'slug',
            'specs': 'specs',
            'active': 'active',
            'priority': 'priority',
            'storage': 'storage',
            'preinstallable': 'preinstallable',
            'plan': 'plan',
            'facility': 'facility'
        }

        self._id = id
        self._name = name
        self._slug = slug
        self._specs = specs
        self._active = active
        self._priority = priority
        self._storage = storage
        self._preinstallable = preinstallable
        self._plan = plan
        self._facility = facility

    @classmethod
    def from_dict(cls, dikt) -> 'StaffPlanVersion':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Staff::PlanVersion of this StaffPlanVersion.  # noqa: E501
        :rtype: StaffPlanVersion
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this StaffPlanVersion.


        :return: The id of this StaffPlanVersion.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StaffPlanVersion.


        :param id: The id of this StaffPlanVersion.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this StaffPlanVersion.


        :return: The name of this StaffPlanVersion.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StaffPlanVersion.


        :param name: The name of this StaffPlanVersion.
        :type name: str
        """

        self._name = name

    @property
    def slug(self):
        """Gets the slug of this StaffPlanVersion.


        :return: The slug of this StaffPlanVersion.
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this StaffPlanVersion.


        :param slug: The slug of this StaffPlanVersion.
        :type slug: str
        """

        self._slug = slug

    @property
    def specs(self):
        """Gets the specs of this StaffPlanVersion.


        :return: The specs of this StaffPlanVersion.
        :rtype: str
        """
        return self._specs

    @specs.setter
    def specs(self, specs):
        """Sets the specs of this StaffPlanVersion.


        :param specs: The specs of this StaffPlanVersion.
        :type specs: str
        """

        self._specs = specs

    @property
    def active(self):
        """Gets the active of this StaffPlanVersion.


        :return: The active of this StaffPlanVersion.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this StaffPlanVersion.


        :param active: The active of this StaffPlanVersion.
        :type active: bool
        """

        self._active = active

    @property
    def priority(self):
        """Gets the priority of this StaffPlanVersion.


        :return: The priority of this StaffPlanVersion.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this StaffPlanVersion.


        :param priority: The priority of this StaffPlanVersion.
        :type priority: int
        """

        self._priority = priority

    @property
    def storage(self):
        """Gets the storage of this StaffPlanVersion.


        :return: The storage of this StaffPlanVersion.
        :rtype: str
        """
        return self._storage

    @storage.setter
    def storage(self, storage):
        """Sets the storage of this StaffPlanVersion.


        :param storage: The storage of this StaffPlanVersion.
        :type storage: str
        """

        self._storage = storage

    @property
    def preinstallable(self):
        """Gets the preinstallable of this StaffPlanVersion.


        :return: The preinstallable of this StaffPlanVersion.
        :rtype: bool
        """
        return self._preinstallable

    @preinstallable.setter
    def preinstallable(self, preinstallable):
        """Sets the preinstallable of this StaffPlanVersion.


        :param preinstallable: The preinstallable of this StaffPlanVersion.
        :type preinstallable: bool
        """

        self._preinstallable = preinstallable

    @property
    def plan(self):
        """Gets the plan of this StaffPlanVersion.


        :return: The plan of this StaffPlanVersion.
        :rtype: StaffPlan
        """
        return self._plan

    @plan.setter
    def plan(self, plan):
        """Sets the plan of this StaffPlanVersion.


        :param plan: The plan of this StaffPlanVersion.
        :type plan: StaffPlan
        """

        self._plan = plan

    @property
    def facility(self):
        """Gets the facility of this StaffPlanVersion.


        :return: The facility of this StaffPlanVersion.
        :rtype: StaffFacilityLittle
        """
        return self._facility

    @facility.setter
    def facility(self, facility):
        """Sets the facility of this StaffPlanVersion.


        :param facility: The facility of this StaffPlanVersion.
        :type facility: StaffFacilityLittle
        """

        self._facility = facility
