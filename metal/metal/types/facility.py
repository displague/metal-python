# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from metal.types.base_model_ import Model
from metal.types.address import Address
from metal import util

from metal.types.address import Address  # noqa: E501

class Facility(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, name=None, code=None, features=None, address=None):  # noqa: E501
        """Facility - a model defined in OpenAPI

        :param id: The id of this Facility.  # noqa: E501
        :type id: str
        :param name: The name of this Facility.  # noqa: E501
        :type name: str
        :param code: The code of this Facility.  # noqa: E501
        :type code: str
        :param features: The features of this Facility.  # noqa: E501
        :type features: List[str]
        :param address: The address of this Facility.  # noqa: E501
        :type address: Address
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'code': str,
            'features': List[str],
            'address': Address
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'code': 'code',
            'features': 'features',
            'address': 'address'
        }

        self._id = id
        self._name = name
        self._code = code
        self._features = features
        self._address = address

    @classmethod
    def from_dict(cls, dikt) -> 'Facility':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Facility of this Facility.  # noqa: E501
        :rtype: Facility
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Facility.


        :return: The id of this Facility.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Facility.


        :param id: The id of this Facility.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Facility.


        :return: The name of this Facility.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Facility.


        :param name: The name of this Facility.
        :type name: str
        """

        self._name = name

    @property
    def code(self):
        """Gets the code of this Facility.


        :return: The code of this Facility.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Facility.


        :param code: The code of this Facility.
        :type code: str
        """

        self._code = code

    @property
    def features(self):
        """Gets the features of this Facility.


        :return: The features of this Facility.
        :rtype: List[str]
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this Facility.


        :param features: The features of this Facility.
        :type features: List[str]
        """

        self._features = features

    @property
    def address(self):
        """Gets the address of this Facility.


        :return: The address of this Facility.
        :rtype: Address
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Facility.


        :param address: The address of this Facility.
        :type address: Address
        """

        self._address = address
