# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from metal.types.base_model_ import Model
from metal import util


class VirtualNetworkCreateInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, project_id=None, description=None, facility=None, vxlan=None, vlan=None):  # noqa: E501
        """VirtualNetworkCreateInput - a model defined in OpenAPI

        :param project_id: The project_id of this VirtualNetworkCreateInput.  # noqa: E501
        :type project_id: str
        :param description: The description of this VirtualNetworkCreateInput.  # noqa: E501
        :type description: str
        :param facility: The facility of this VirtualNetworkCreateInput.  # noqa: E501
        :type facility: str
        :param vxlan: The vxlan of this VirtualNetworkCreateInput.  # noqa: E501
        :type vxlan: int
        :param vlan: The vlan of this VirtualNetworkCreateInput.  # noqa: E501
        :type vlan: int
        """
        self.openapi_types = {
            'project_id': str,
            'description': str,
            'facility': str,
            'vxlan': int,
            'vlan': int
        }

        self.attribute_map = {
            'project_id': 'project_id',
            'description': 'description',
            'facility': 'facility',
            'vxlan': 'vxlan',
            'vlan': 'vlan'
        }

        self._project_id = project_id
        self._description = description
        self._facility = facility
        self._vxlan = vxlan
        self._vlan = vlan

    @classmethod
    def from_dict(cls, dikt) -> 'VirtualNetworkCreateInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The VirtualNetworkCreateInput of this VirtualNetworkCreateInput.  # noqa: E501
        :rtype: VirtualNetworkCreateInput
        """
        return util.deserialize_model(dikt, cls)

    @property
    def project_id(self):
        """Gets the project_id of this VirtualNetworkCreateInput.


        :return: The project_id of this VirtualNetworkCreateInput.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this VirtualNetworkCreateInput.


        :param project_id: The project_id of this VirtualNetworkCreateInput.
        :type project_id: str
        """

        self._project_id = project_id

    @property
    def description(self):
        """Gets the description of this VirtualNetworkCreateInput.


        :return: The description of this VirtualNetworkCreateInput.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this VirtualNetworkCreateInput.


        :param description: The description of this VirtualNetworkCreateInput.
        :type description: str
        """

        self._description = description

    @property
    def facility(self):
        """Gets the facility of this VirtualNetworkCreateInput.


        :return: The facility of this VirtualNetworkCreateInput.
        :rtype: str
        """
        return self._facility

    @facility.setter
    def facility(self, facility):
        """Sets the facility of this VirtualNetworkCreateInput.


        :param facility: The facility of this VirtualNetworkCreateInput.
        :type facility: str
        """

        self._facility = facility

    @property
    def vxlan(self):
        """Gets the vxlan of this VirtualNetworkCreateInput.


        :return: The vxlan of this VirtualNetworkCreateInput.
        :rtype: int
        """
        return self._vxlan

    @vxlan.setter
    def vxlan(self, vxlan):
        """Sets the vxlan of this VirtualNetworkCreateInput.


        :param vxlan: The vxlan of this VirtualNetworkCreateInput.
        :type vxlan: int
        """

        self._vxlan = vxlan

    @property
    def vlan(self):
        """Gets the vlan of this VirtualNetworkCreateInput.


        :return: The vlan of this VirtualNetworkCreateInput.
        :rtype: int
        """
        return self._vlan

    @vlan.setter
    def vlan(self, vlan):
        """Sets the vlan of this VirtualNetworkCreateInput.


        :param vlan: The vlan of this VirtualNetworkCreateInput.
        :type vlan: int
        """

        self._vlan = vlan
