# coding: utf-8

"""
    Metal API

    This is the API for Equinix Metal Product. Interact with your devices, user account, and projects.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@equinixmetal.com
    Generated by: https://openapi-generator.tech
"""


import inspect
import pprint
import re  # noqa: F401
import six

from metal.configuration import Configuration


class SpotMarketRequestCreateInput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'instance_attributes': 'SpotMarketRequestCreateInputInstanceAttributes',
        'devices_min': 'int',
        'devices_max': 'int',
        'max_bid_price': 'float',
        'end_at': 'datetime',
        'facilities': 'list[str]'
    }

    attribute_map = {
        'instance_attributes': 'instance_attributes',
        'devices_min': 'devices_min',
        'devices_max': 'devices_max',
        'max_bid_price': 'max_bid_price',
        'end_at': 'end_at',
        'facilities': 'facilities'
    }

    def __init__(self, instance_attributes=None, devices_min=None, devices_max=None, max_bid_price=None, end_at=None, facilities=None, local_vars_configuration=None):  # noqa: E501
        """SpotMarketRequestCreateInput - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._instance_attributes = None
        self._devices_min = None
        self._devices_max = None
        self._max_bid_price = None
        self._end_at = None
        self._facilities = None
        self.discriminator = None

        if instance_attributes is not None:
            self.instance_attributes = instance_attributes
        if devices_min is not None:
            self.devices_min = devices_min
        if devices_max is not None:
            self.devices_max = devices_max
        if max_bid_price is not None:
            self.max_bid_price = max_bid_price
        if end_at is not None:
            self.end_at = end_at
        if facilities is not None:
            self.facilities = facilities

    @property
    def instance_attributes(self):
        """Gets the instance_attributes of this SpotMarketRequestCreateInput.  # noqa: E501


        :return: The instance_attributes of this SpotMarketRequestCreateInput.  # noqa: E501
        :rtype: SpotMarketRequestCreateInputInstanceAttributes
        """
        return self._instance_attributes

    @instance_attributes.setter
    def instance_attributes(self, instance_attributes):
        """Sets the instance_attributes of this SpotMarketRequestCreateInput.


        :param instance_attributes: The instance_attributes of this SpotMarketRequestCreateInput.  # noqa: E501
        :type instance_attributes: SpotMarketRequestCreateInputInstanceAttributes
        """

        self._instance_attributes = instance_attributes

    @property
    def devices_min(self):
        """Gets the devices_min of this SpotMarketRequestCreateInput.  # noqa: E501


        :return: The devices_min of this SpotMarketRequestCreateInput.  # noqa: E501
        :rtype: int
        """
        return self._devices_min

    @devices_min.setter
    def devices_min(self, devices_min):
        """Sets the devices_min of this SpotMarketRequestCreateInput.


        :param devices_min: The devices_min of this SpotMarketRequestCreateInput.  # noqa: E501
        :type devices_min: int
        """

        self._devices_min = devices_min

    @property
    def devices_max(self):
        """Gets the devices_max of this SpotMarketRequestCreateInput.  # noqa: E501


        :return: The devices_max of this SpotMarketRequestCreateInput.  # noqa: E501
        :rtype: int
        """
        return self._devices_max

    @devices_max.setter
    def devices_max(self, devices_max):
        """Sets the devices_max of this SpotMarketRequestCreateInput.


        :param devices_max: The devices_max of this SpotMarketRequestCreateInput.  # noqa: E501
        :type devices_max: int
        """

        self._devices_max = devices_max

    @property
    def max_bid_price(self):
        """Gets the max_bid_price of this SpotMarketRequestCreateInput.  # noqa: E501


        :return: The max_bid_price of this SpotMarketRequestCreateInput.  # noqa: E501
        :rtype: float
        """
        return self._max_bid_price

    @max_bid_price.setter
    def max_bid_price(self, max_bid_price):
        """Sets the max_bid_price of this SpotMarketRequestCreateInput.


        :param max_bid_price: The max_bid_price of this SpotMarketRequestCreateInput.  # noqa: E501
        :type max_bid_price: float
        """

        self._max_bid_price = max_bid_price

    @property
    def end_at(self):
        """Gets the end_at of this SpotMarketRequestCreateInput.  # noqa: E501


        :return: The end_at of this SpotMarketRequestCreateInput.  # noqa: E501
        :rtype: datetime
        """
        return self._end_at

    @end_at.setter
    def end_at(self, end_at):
        """Sets the end_at of this SpotMarketRequestCreateInput.


        :param end_at: The end_at of this SpotMarketRequestCreateInput.  # noqa: E501
        :type end_at: datetime
        """

        self._end_at = end_at

    @property
    def facilities(self):
        """Gets the facilities of this SpotMarketRequestCreateInput.  # noqa: E501


        :return: The facilities of this SpotMarketRequestCreateInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._facilities

    @facilities.setter
    def facilities(self, facilities):
        """Sets the facilities of this SpotMarketRequestCreateInput.


        :param facilities: The facilities of this SpotMarketRequestCreateInput.  # noqa: E501
        :type facilities: list[str]
        """

        self._facilities = facilities

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = inspect.getargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SpotMarketRequestCreateInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SpotMarketRequestCreateInput):
            return True

        return self.to_dict() != other.to_dict()
