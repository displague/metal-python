# coding: utf-8

"""
    Metal API

    This is the API for Equinix Metal Product. Interact with your devices, user account, and projects.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@equinixmetal.com
    Generated by: https://openapi-generator.tech
"""


import inspect
import pprint
import re  # noqa: F401
import six

from metal.configuration import Configuration


class BgpConfig(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'status': 'str',
        'deployment_type': 'str',
        'asn': 'int',
        'route_object': 'str',
        'md5': 'str',
        'max_prefix': 'int',
        'project': 'Href',
        'created_at': 'datetime',
        'requested_at': 'datetime',
        'sessions': 'list[BgpSession]',
        'ranges': 'list[GlobalBgpRange]',
        'href': 'str'
    }

    attribute_map = {
        'id': 'id',
        'status': 'status',
        'deployment_type': 'deployment_type',
        'asn': 'asn',
        'route_object': 'route_object',
        'md5': 'md5',
        'max_prefix': 'max_prefix',
        'project': 'project',
        'created_at': 'created_at',
        'requested_at': 'requested_at',
        'sessions': 'sessions',
        'ranges': 'ranges',
        'href': 'href'
    }

    def __init__(self, id=None, status=None, deployment_type=None, asn=None, route_object=None, md5=None, max_prefix=None, project=None, created_at=None, requested_at=None, sessions=None, ranges=None, href=None, local_vars_configuration=None):  # noqa: E501
        """BgpConfig - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._status = None
        self._deployment_type = None
        self._asn = None
        self._route_object = None
        self._md5 = None
        self._max_prefix = None
        self._project = None
        self._created_at = None
        self._requested_at = None
        self._sessions = None
        self._ranges = None
        self._href = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if status is not None:
            self.status = status
        if deployment_type is not None:
            self.deployment_type = deployment_type
        if asn is not None:
            self.asn = asn
        if route_object is not None:
            self.route_object = route_object
        if md5 is not None:
            self.md5 = md5
        if max_prefix is not None:
            self.max_prefix = max_prefix
        if project is not None:
            self.project = project
        if created_at is not None:
            self.created_at = created_at
        if requested_at is not None:
            self.requested_at = requested_at
        if sessions is not None:
            self.sessions = sessions
        if ranges is not None:
            self.ranges = ranges
        if href is not None:
            self.href = href

    @property
    def id(self):
        """Gets the id of this BgpConfig.  # noqa: E501


        :return: The id of this BgpConfig.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BgpConfig.


        :param id: The id of this BgpConfig.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def status(self):
        """Gets the status of this BgpConfig.  # noqa: E501

        status requested is valid only for global deployment  # noqa: E501

        :return: The status of this BgpConfig.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this BgpConfig.

        status requested is valid only for global deployment  # noqa: E501

        :param status: The status of this BgpConfig.  # noqa: E501
        :type status: str
        """
        allowed_values = ["requested", "enabled", "disabled"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def deployment_type(self):
        """Gets the deployment_type of this BgpConfig.  # noqa: E501

        In a Local BGP deployment, a customer uses an internal ASN to control routes within a single Equinix Metal datacenter. This means that the routes are never advertised to the global Internet. Global BGP, on the other hand, requires a customer to have a registered ASN and IP space.   # noqa: E501

        :return: The deployment_type of this BgpConfig.  # noqa: E501
        :rtype: str
        """
        return self._deployment_type

    @deployment_type.setter
    def deployment_type(self, deployment_type):
        """Sets the deployment_type of this BgpConfig.

        In a Local BGP deployment, a customer uses an internal ASN to control routes within a single Equinix Metal datacenter. This means that the routes are never advertised to the global Internet. Global BGP, on the other hand, requires a customer to have a registered ASN and IP space.   # noqa: E501

        :param deployment_type: The deployment_type of this BgpConfig.  # noqa: E501
        :type deployment_type: str
        """
        allowed_values = ["global", "local"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and deployment_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `deployment_type` ({0}), must be one of {1}"  # noqa: E501
                .format(deployment_type, allowed_values)
            )

        self._deployment_type = deployment_type

    @property
    def asn(self):
        """Gets the asn of this BgpConfig.  # noqa: E501

        Autonomous System Number  # noqa: E501

        :return: The asn of this BgpConfig.  # noqa: E501
        :rtype: int
        """
        return self._asn

    @asn.setter
    def asn(self, asn):
        """Sets the asn of this BgpConfig.

        Autonomous System Number  # noqa: E501

        :param asn: The asn of this BgpConfig.  # noqa: E501
        :type asn: int
        """

        self._asn = asn

    @property
    def route_object(self):
        """Gets the route_object of this BgpConfig.  # noqa: E501

        Specifies AS-MACRO (aka AS-SET) to use when building client route filters  # noqa: E501

        :return: The route_object of this BgpConfig.  # noqa: E501
        :rtype: str
        """
        return self._route_object

    @route_object.setter
    def route_object(self, route_object):
        """Sets the route_object of this BgpConfig.

        Specifies AS-MACRO (aka AS-SET) to use when building client route filters  # noqa: E501

        :param route_object: The route_object of this BgpConfig.  # noqa: E501
        :type route_object: str
        """

        self._route_object = route_object

    @property
    def md5(self):
        """Gets the md5 of this BgpConfig.  # noqa: E501

        (Optional) Password for BGP session in plaintext (not a checksum)  # noqa: E501

        :return: The md5 of this BgpConfig.  # noqa: E501
        :rtype: str
        """
        return self._md5

    @md5.setter
    def md5(self, md5):
        """Sets the md5 of this BgpConfig.

        (Optional) Password for BGP session in plaintext (not a checksum)  # noqa: E501

        :param md5: The md5 of this BgpConfig.  # noqa: E501
        :type md5: str
        """

        self._md5 = md5

    @property
    def max_prefix(self):
        """Gets the max_prefix of this BgpConfig.  # noqa: E501

        The maximum number of route filters allowed per server  # noqa: E501

        :return: The max_prefix of this BgpConfig.  # noqa: E501
        :rtype: int
        """
        return self._max_prefix

    @max_prefix.setter
    def max_prefix(self, max_prefix):
        """Sets the max_prefix of this BgpConfig.

        The maximum number of route filters allowed per server  # noqa: E501

        :param max_prefix: The max_prefix of this BgpConfig.  # noqa: E501
        :type max_prefix: int
        """

        self._max_prefix = max_prefix

    @property
    def project(self):
        """Gets the project of this BgpConfig.  # noqa: E501


        :return: The project of this BgpConfig.  # noqa: E501
        :rtype: Href
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this BgpConfig.


        :param project: The project of this BgpConfig.  # noqa: E501
        :type project: Href
        """

        self._project = project

    @property
    def created_at(self):
        """Gets the created_at of this BgpConfig.  # noqa: E501


        :return: The created_at of this BgpConfig.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this BgpConfig.


        :param created_at: The created_at of this BgpConfig.  # noqa: E501
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def requested_at(self):
        """Gets the requested_at of this BgpConfig.  # noqa: E501


        :return: The requested_at of this BgpConfig.  # noqa: E501
        :rtype: datetime
        """
        return self._requested_at

    @requested_at.setter
    def requested_at(self, requested_at):
        """Sets the requested_at of this BgpConfig.


        :param requested_at: The requested_at of this BgpConfig.  # noqa: E501
        :type requested_at: datetime
        """

        self._requested_at = requested_at

    @property
    def sessions(self):
        """Gets the sessions of this BgpConfig.  # noqa: E501

        The direct connections between neighboring routers that want to exchange routing information.  # noqa: E501

        :return: The sessions of this BgpConfig.  # noqa: E501
        :rtype: list[BgpSession]
        """
        return self._sessions

    @sessions.setter
    def sessions(self, sessions):
        """Sets the sessions of this BgpConfig.

        The direct connections between neighboring routers that want to exchange routing information.  # noqa: E501

        :param sessions: The sessions of this BgpConfig.  # noqa: E501
        :type sessions: list[BgpSession]
        """

        self._sessions = sessions

    @property
    def ranges(self):
        """Gets the ranges of this BgpConfig.  # noqa: E501

        The IP block ranges associated to the ASN (Populated in Global BGP only)  # noqa: E501

        :return: The ranges of this BgpConfig.  # noqa: E501
        :rtype: list[GlobalBgpRange]
        """
        return self._ranges

    @ranges.setter
    def ranges(self, ranges):
        """Sets the ranges of this BgpConfig.

        The IP block ranges associated to the ASN (Populated in Global BGP only)  # noqa: E501

        :param ranges: The ranges of this BgpConfig.  # noqa: E501
        :type ranges: list[GlobalBgpRange]
        """

        self._ranges = ranges

    @property
    def href(self):
        """Gets the href of this BgpConfig.  # noqa: E501


        :return: The href of this BgpConfig.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this BgpConfig.


        :param href: The href of this BgpConfig.  # noqa: E501
        :type href: str
        """

        self._href = href

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = inspect.getargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BgpConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BgpConfig):
            return True

        return self.to_dict() != other.to_dict()
