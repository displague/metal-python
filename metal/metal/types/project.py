# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from metal.types.base_model_ import Model
from metal.types.href import Href
from metal import util

from metal.types.href import Href  # noqa: E501

class Project(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, name=None, created_at=None, updated_at=None, max_devices=None, members=None, memberships=None, network_status=None, invitations=None, payment_method=None, devices=None, ssh_keys=None, volumes=None, bgp_config=None, customdata=None):  # noqa: E501
        """Project - a model defined in OpenAPI

        :param id: The id of this Project.  # noqa: E501
        :type id: str
        :param name: The name of this Project.  # noqa: E501
        :type name: str
        :param created_at: The created_at of this Project.  # noqa: E501
        :type created_at: datetime
        :param updated_at: The updated_at of this Project.  # noqa: E501
        :type updated_at: datetime
        :param max_devices: The max_devices of this Project.  # noqa: E501
        :type max_devices: object
        :param members: The members of this Project.  # noqa: E501
        :type members: List[Href]
        :param memberships: The memberships of this Project.  # noqa: E501
        :type memberships: List[Href]
        :param network_status: The network_status of this Project.  # noqa: E501
        :type network_status: object
        :param invitations: The invitations of this Project.  # noqa: E501
        :type invitations: List[Href]
        :param payment_method: The payment_method of this Project.  # noqa: E501
        :type payment_method: Href
        :param devices: The devices of this Project.  # noqa: E501
        :type devices: List[Href]
        :param ssh_keys: The ssh_keys of this Project.  # noqa: E501
        :type ssh_keys: List[Href]
        :param volumes: The volumes of this Project.  # noqa: E501
        :type volumes: List[Href]
        :param bgp_config: The bgp_config of this Project.  # noqa: E501
        :type bgp_config: Href
        :param customdata: The customdata of this Project.  # noqa: E501
        :type customdata: object
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'created_at': datetime,
            'updated_at': datetime,
            'max_devices': object,
            'members': List[Href],
            'memberships': List[Href],
            'network_status': object,
            'invitations': List[Href],
            'payment_method': Href,
            'devices': List[Href],
            'ssh_keys': List[Href],
            'volumes': List[Href],
            'bgp_config': Href,
            'customdata': object
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'created_at': 'created_at',
            'updated_at': 'updated_at',
            'max_devices': 'max_devices',
            'members': 'members',
            'memberships': 'memberships',
            'network_status': 'network_status',
            'invitations': 'invitations',
            'payment_method': 'payment_method',
            'devices': 'devices',
            'ssh_keys': 'ssh_keys',
            'volumes': 'volumes',
            'bgp_config': 'bgp_config',
            'customdata': 'customdata'
        }

        self._id = id
        self._name = name
        self._created_at = created_at
        self._updated_at = updated_at
        self._max_devices = max_devices
        self._members = members
        self._memberships = memberships
        self._network_status = network_status
        self._invitations = invitations
        self._payment_method = payment_method
        self._devices = devices
        self._ssh_keys = ssh_keys
        self._volumes = volumes
        self._bgp_config = bgp_config
        self._customdata = customdata

    @classmethod
    def from_dict(cls, dikt) -> 'Project':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Project of this Project.  # noqa: E501
        :rtype: Project
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Project.


        :return: The id of this Project.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Project.


        :param id: The id of this Project.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Project.


        :return: The name of this Project.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Project.


        :param name: The name of this Project.
        :type name: str
        """

        self._name = name

    @property
    def created_at(self):
        """Gets the created_at of this Project.


        :return: The created_at of this Project.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Project.


        :param created_at: The created_at of this Project.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Project.


        :return: The updated_at of this Project.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Project.


        :param updated_at: The updated_at of this Project.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def max_devices(self):
        """Gets the max_devices of this Project.


        :return: The max_devices of this Project.
        :rtype: object
        """
        return self._max_devices

    @max_devices.setter
    def max_devices(self, max_devices):
        """Sets the max_devices of this Project.


        :param max_devices: The max_devices of this Project.
        :type max_devices: object
        """

        self._max_devices = max_devices

    @property
    def members(self):
        """Gets the members of this Project.


        :return: The members of this Project.
        :rtype: List[Href]
        """
        return self._members

    @members.setter
    def members(self, members):
        """Sets the members of this Project.


        :param members: The members of this Project.
        :type members: List[Href]
        """

        self._members = members

    @property
    def memberships(self):
        """Gets the memberships of this Project.


        :return: The memberships of this Project.
        :rtype: List[Href]
        """
        return self._memberships

    @memberships.setter
    def memberships(self, memberships):
        """Sets the memberships of this Project.


        :param memberships: The memberships of this Project.
        :type memberships: List[Href]
        """

        self._memberships = memberships

    @property
    def network_status(self):
        """Gets the network_status of this Project.


        :return: The network_status of this Project.
        :rtype: object
        """
        return self._network_status

    @network_status.setter
    def network_status(self, network_status):
        """Sets the network_status of this Project.


        :param network_status: The network_status of this Project.
        :type network_status: object
        """

        self._network_status = network_status

    @property
    def invitations(self):
        """Gets the invitations of this Project.


        :return: The invitations of this Project.
        :rtype: List[Href]
        """
        return self._invitations

    @invitations.setter
    def invitations(self, invitations):
        """Sets the invitations of this Project.


        :param invitations: The invitations of this Project.
        :type invitations: List[Href]
        """

        self._invitations = invitations

    @property
    def payment_method(self):
        """Gets the payment_method of this Project.


        :return: The payment_method of this Project.
        :rtype: Href
        """
        return self._payment_method

    @payment_method.setter
    def payment_method(self, payment_method):
        """Sets the payment_method of this Project.


        :param payment_method: The payment_method of this Project.
        :type payment_method: Href
        """

        self._payment_method = payment_method

    @property
    def devices(self):
        """Gets the devices of this Project.


        :return: The devices of this Project.
        :rtype: List[Href]
        """
        return self._devices

    @devices.setter
    def devices(self, devices):
        """Sets the devices of this Project.


        :param devices: The devices of this Project.
        :type devices: List[Href]
        """

        self._devices = devices

    @property
    def ssh_keys(self):
        """Gets the ssh_keys of this Project.


        :return: The ssh_keys of this Project.
        :rtype: List[Href]
        """
        return self._ssh_keys

    @ssh_keys.setter
    def ssh_keys(self, ssh_keys):
        """Sets the ssh_keys of this Project.


        :param ssh_keys: The ssh_keys of this Project.
        :type ssh_keys: List[Href]
        """

        self._ssh_keys = ssh_keys

    @property
    def volumes(self):
        """Gets the volumes of this Project.


        :return: The volumes of this Project.
        :rtype: List[Href]
        """
        return self._volumes

    @volumes.setter
    def volumes(self, volumes):
        """Sets the volumes of this Project.


        :param volumes: The volumes of this Project.
        :type volumes: List[Href]
        """

        self._volumes = volumes

    @property
    def bgp_config(self):
        """Gets the bgp_config of this Project.


        :return: The bgp_config of this Project.
        :rtype: Href
        """
        return self._bgp_config

    @bgp_config.setter
    def bgp_config(self, bgp_config):
        """Sets the bgp_config of this Project.


        :param bgp_config: The bgp_config of this Project.
        :type bgp_config: Href
        """

        self._bgp_config = bgp_config

    @property
    def customdata(self):
        """Gets the customdata of this Project.


        :return: The customdata of this Project.
        :rtype: object
        """
        return self._customdata

    @customdata.setter
    def customdata(self, customdata):
        """Sets the customdata of this Project.


        :param customdata: The customdata of this Project.
        :type customdata: object
        """

        self._customdata = customdata
