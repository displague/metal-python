# coding: utf-8

"""
    Metal API

    This is the API for Equinix Metal Product. Interact with your devices, user account, and projects.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@equinixmetal.com
    Generated by: https://openapi-generator.tech
"""


import inspect
import pprint
import re  # noqa: F401
import six

from metal.configuration import Configuration


class UserUpdateInput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'first_name': 'str',
        'last_name': 'str',
        'phone_number': 'str',
        'timezone': 'str',
        'password': 'str',
        'avatar': 'file',
        'customdata': 'object'
    }

    attribute_map = {
        'first_name': 'first_name',
        'last_name': 'last_name',
        'phone_number': 'phone_number',
        'timezone': 'timezone',
        'password': 'password',
        'avatar': 'avatar',
        'customdata': 'customdata'
    }

    def __init__(self, first_name=None, last_name=None, phone_number=None, timezone=None, password=None, avatar=None, customdata=None, local_vars_configuration=None):  # noqa: E501
        """UserUpdateInput - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._first_name = None
        self._last_name = None
        self._phone_number = None
        self._timezone = None
        self._password = None
        self._avatar = None
        self._customdata = None
        self.discriminator = None

        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if phone_number is not None:
            self.phone_number = phone_number
        if timezone is not None:
            self.timezone = timezone
        if password is not None:
            self.password = password
        if avatar is not None:
            self.avatar = avatar
        if customdata is not None:
            self.customdata = customdata

    @property
    def first_name(self):
        """Gets the first_name of this UserUpdateInput.  # noqa: E501


        :return: The first_name of this UserUpdateInput.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this UserUpdateInput.


        :param first_name: The first_name of this UserUpdateInput.  # noqa: E501
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this UserUpdateInput.  # noqa: E501


        :return: The last_name of this UserUpdateInput.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this UserUpdateInput.


        :param last_name: The last_name of this UserUpdateInput.  # noqa: E501
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def phone_number(self):
        """Gets the phone_number of this UserUpdateInput.  # noqa: E501


        :return: The phone_number of this UserUpdateInput.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this UserUpdateInput.


        :param phone_number: The phone_number of this UserUpdateInput.  # noqa: E501
        :type phone_number: str
        """

        self._phone_number = phone_number

    @property
    def timezone(self):
        """Gets the timezone of this UserUpdateInput.  # noqa: E501


        :return: The timezone of this UserUpdateInput.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this UserUpdateInput.


        :param timezone: The timezone of this UserUpdateInput.  # noqa: E501
        :type timezone: str
        """

        self._timezone = timezone

    @property
    def password(self):
        """Gets the password of this UserUpdateInput.  # noqa: E501


        :return: The password of this UserUpdateInput.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this UserUpdateInput.


        :param password: The password of this UserUpdateInput.  # noqa: E501
        :type password: str
        """

        self._password = password

    @property
    def avatar(self):
        """Gets the avatar of this UserUpdateInput.  # noqa: E501


        :return: The avatar of this UserUpdateInput.  # noqa: E501
        :rtype: file
        """
        return self._avatar

    @avatar.setter
    def avatar(self, avatar):
        """Sets the avatar of this UserUpdateInput.


        :param avatar: The avatar of this UserUpdateInput.  # noqa: E501
        :type avatar: file
        """

        self._avatar = avatar

    @property
    def customdata(self):
        """Gets the customdata of this UserUpdateInput.  # noqa: E501


        :return: The customdata of this UserUpdateInput.  # noqa: E501
        :rtype: object
        """
        return self._customdata

    @customdata.setter
    def customdata(self, customdata):
        """Sets the customdata of this UserUpdateInput.


        :param customdata: The customdata of this UserUpdateInput.  # noqa: E501
        :type customdata: object
        """

        self._customdata = customdata

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = inspect.getargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserUpdateInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserUpdateInput):
            return True

        return self.to_dict() != other.to_dict()
