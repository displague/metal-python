# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from metal.types.base_model_ import Model
from metal.types.staff_cage import StaffCage
from metal.types.staff_facility_little import StaffFacilityLittle
from metal import util

from metal.types.staff_cage import StaffCage  # noqa: E501
from metal.types.staff_facility_little import StaffFacilityLittle  # noqa: E501

class StaffFacilityRoom(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, name=None, code=None, max_racks=None, facility=None, cages=None):  # noqa: E501
        """StaffFacilityRoom - a model defined in OpenAPI

        :param id: The id of this StaffFacilityRoom.  # noqa: E501
        :type id: str
        :param name: The name of this StaffFacilityRoom.  # noqa: E501
        :type name: str
        :param code: The code of this StaffFacilityRoom.  # noqa: E501
        :type code: str
        :param max_racks: The max_racks of this StaffFacilityRoom.  # noqa: E501
        :type max_racks: int
        :param facility: The facility of this StaffFacilityRoom.  # noqa: E501
        :type facility: StaffFacilityLittle
        :param cages: The cages of this StaffFacilityRoom.  # noqa: E501
        :type cages: List[StaffCage]
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'code': str,
            'max_racks': int,
            'facility': StaffFacilityLittle,
            'cages': List[StaffCage]
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'code': 'code',
            'max_racks': 'max_racks',
            'facility': 'facility',
            'cages': 'cages'
        }

        self._id = id
        self._name = name
        self._code = code
        self._max_racks = max_racks
        self._facility = facility
        self._cages = cages

    @classmethod
    def from_dict(cls, dikt) -> 'StaffFacilityRoom':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Staff::FacilityRoom of this StaffFacilityRoom.  # noqa: E501
        :rtype: StaffFacilityRoom
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this StaffFacilityRoom.


        :return: The id of this StaffFacilityRoom.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StaffFacilityRoom.


        :param id: The id of this StaffFacilityRoom.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this StaffFacilityRoom.


        :return: The name of this StaffFacilityRoom.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StaffFacilityRoom.


        :param name: The name of this StaffFacilityRoom.
        :type name: str
        """

        self._name = name

    @property
    def code(self):
        """Gets the code of this StaffFacilityRoom.


        :return: The code of this StaffFacilityRoom.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this StaffFacilityRoom.


        :param code: The code of this StaffFacilityRoom.
        :type code: str
        """

        self._code = code

    @property
    def max_racks(self):
        """Gets the max_racks of this StaffFacilityRoom.


        :return: The max_racks of this StaffFacilityRoom.
        :rtype: int
        """
        return self._max_racks

    @max_racks.setter
    def max_racks(self, max_racks):
        """Sets the max_racks of this StaffFacilityRoom.


        :param max_racks: The max_racks of this StaffFacilityRoom.
        :type max_racks: int
        """

        self._max_racks = max_racks

    @property
    def facility(self):
        """Gets the facility of this StaffFacilityRoom.


        :return: The facility of this StaffFacilityRoom.
        :rtype: StaffFacilityLittle
        """
        return self._facility

    @facility.setter
    def facility(self, facility):
        """Sets the facility of this StaffFacilityRoom.


        :param facility: The facility of this StaffFacilityRoom.
        :type facility: StaffFacilityLittle
        """

        self._facility = facility

    @property
    def cages(self):
        """Gets the cages of this StaffFacilityRoom.


        :return: The cages of this StaffFacilityRoom.
        :rtype: List[StaffCage]
        """
        return self._cages

    @cages.setter
    def cages(self, cages):
        """Sets the cages of this StaffFacilityRoom.


        :param cages: The cages of this StaffFacilityRoom.
        :type cages: List[StaffCage]
        """

        self._cages = cages
