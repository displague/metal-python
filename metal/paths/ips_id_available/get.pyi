# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from urllib3._collections import HTTPHeaderDict

from metal import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from metal import schemas  # noqa: F401

from metal.types.error import Error
from metal.types.ip_availabilities_list import IPAvailabilitiesList

# Query params


class CidrSchema(
    schemas.EnumBase,
    schemas.StrSchema
):
    
    @schemas.classproperty
    def POSITIVE_20(cls):
        return cls("20")
    
    @schemas.classproperty
    def POSITIVE_21(cls):
        return cls("21")
    
    @schemas.classproperty
    def POSITIVE_22(cls):
        return cls("22")
    
    @schemas.classproperty
    def POSITIVE_23(cls):
        return cls("23")
    
    @schemas.classproperty
    def POSITIVE_24(cls):
        return cls("24")
    
    @schemas.classproperty
    def POSITIVE_25(cls):
        return cls("25")
    
    @schemas.classproperty
    def POSITIVE_26(cls):
        return cls("26")
    
    @schemas.classproperty
    def POSITIVE_27(cls):
        return cls("27")
    
    @schemas.classproperty
    def POSITIVE_28(cls):
        return cls("28")
    
    @schemas.classproperty
    def POSITIVE_29(cls):
        return cls("29")
    
    @schemas.classproperty
    def POSITIVE_30(cls):
        return cls("30")
    
    @schemas.classproperty
    def POSITIVE_31(cls):
        return cls("31")
    
    @schemas.classproperty
    def POSITIVE_32(cls):
        return cls("32")
    
    @schemas.classproperty
    def POSITIVE_33(cls):
        return cls("33")
    
    @schemas.classproperty
    def POSITIVE_34(cls):
        return cls("34")
    
    @schemas.classproperty
    def POSITIVE_35(cls):
        return cls("35")
    
    @schemas.classproperty
    def POSITIVE_36(cls):
        return cls("36")
    
    @schemas.classproperty
    def POSITIVE_37(cls):
        return cls("37")
    
    @schemas.classproperty
    def POSITIVE_38(cls):
        return cls("38")
    
    @schemas.classproperty
    def POSITIVE_39(cls):
        return cls("39")
    
    @schemas.classproperty
    def POSITIVE_40(cls):
        return cls("40")
    
    @schemas.classproperty
    def POSITIVE_41(cls):
        return cls("41")
    
    @schemas.classproperty
    def POSITIVE_42(cls):
        return cls("42")
    
    @schemas.classproperty
    def POSITIVE_43(cls):
        return cls("43")
    
    @schemas.classproperty
    def POSITIVE_44(cls):
        return cls("44")
    
    @schemas.classproperty
    def POSITIVE_45(cls):
        return cls("45")
    
    @schemas.classproperty
    def POSITIVE_46(cls):
        return cls("46")
    
    @schemas.classproperty
    def POSITIVE_47(cls):
        return cls("47")
    
    @schemas.classproperty
    def POSITIVE_48(cls):
        return cls("48")
    
    @schemas.classproperty
    def POSITIVE_49(cls):
        return cls("49")
    
    @schemas.classproperty
    def POSITIVE_50(cls):
        return cls("50")
    
    @schemas.classproperty
    def POSITIVE_51(cls):
        return cls("51")
    
    @schemas.classproperty
    def POSITIVE_52(cls):
        return cls("52")
    
    @schemas.classproperty
    def POSITIVE_53(cls):
        return cls("53")
    
    @schemas.classproperty
    def POSITIVE_54(cls):
        return cls("54")
    
    @schemas.classproperty
    def POSITIVE_55(cls):
        return cls("55")
    
    @schemas.classproperty
    def POSITIVE_56(cls):
        return cls("56")
    
    @schemas.classproperty
    def POSITIVE_57(cls):
        return cls("57")
    
    @schemas.classproperty
    def POSITIVE_58(cls):
        return cls("58")
    
    @schemas.classproperty
    def POSITIVE_59(cls):
        return cls("59")
    
    @schemas.classproperty
    def POSITIVE_60(cls):
        return cls("60")
    
    @schemas.classproperty
    def POSITIVE_61(cls):
        return cls("61")
    
    @schemas.classproperty
    def POSITIVE_62(cls):
        return cls("62")
    
    @schemas.classproperty
    def POSITIVE_63(cls):
        return cls("63")
    
    @schemas.classproperty
    def POSITIVE_64(cls):
        return cls("64")
    
    @schemas.classproperty
    def POSITIVE_65(cls):
        return cls("65")
    
    @schemas.classproperty
    def POSITIVE_66(cls):
        return cls("66")
    
    @schemas.classproperty
    def POSITIVE_67(cls):
        return cls("67")
    
    @schemas.classproperty
    def POSITIVE_68(cls):
        return cls("68")
    
    @schemas.classproperty
    def POSITIVE_69(cls):
        return cls("69")
    
    @schemas.classproperty
    def POSITIVE_70(cls):
        return cls("70")
    
    @schemas.classproperty
    def POSITIVE_71(cls):
        return cls("71")
    
    @schemas.classproperty
    def POSITIVE_72(cls):
        return cls("72")
    
    @schemas.classproperty
    def POSITIVE_73(cls):
        return cls("73")
    
    @schemas.classproperty
    def POSITIVE_74(cls):
        return cls("74")
    
    @schemas.classproperty
    def POSITIVE_75(cls):
        return cls("75")
    
    @schemas.classproperty
    def POSITIVE_76(cls):
        return cls("76")
    
    @schemas.classproperty
    def POSITIVE_77(cls):
        return cls("77")
    
    @schemas.classproperty
    def POSITIVE_78(cls):
        return cls("78")
    
    @schemas.classproperty
    def POSITIVE_79(cls):
        return cls("79")
    
    @schemas.classproperty
    def POSITIVE_80(cls):
        return cls("80")
    
    @schemas.classproperty
    def POSITIVE_81(cls):
        return cls("81")
    
    @schemas.classproperty
    def POSITIVE_82(cls):
        return cls("82")
    
    @schemas.classproperty
    def POSITIVE_83(cls):
        return cls("83")
    
    @schemas.classproperty
    def POSITIVE_84(cls):
        return cls("84")
    
    @schemas.classproperty
    def POSITIVE_85(cls):
        return cls("85")
    
    @schemas.classproperty
    def POSITIVE_86(cls):
        return cls("86")
    
    @schemas.classproperty
    def POSITIVE_87(cls):
        return cls("87")
    
    @schemas.classproperty
    def POSITIVE_88(cls):
        return cls("88")
    
    @schemas.classproperty
    def POSITIVE_89(cls):
        return cls("89")
    
    @schemas.classproperty
    def POSITIVE_90(cls):
        return cls("90")
    
    @schemas.classproperty
    def POSITIVE_91(cls):
        return cls("91")
    
    @schemas.classproperty
    def POSITIVE_92(cls):
        return cls("92")
    
    @schemas.classproperty
    def POSITIVE_93(cls):
        return cls("93")
    
    @schemas.classproperty
    def POSITIVE_94(cls):
        return cls("94")
    
    @schemas.classproperty
    def POSITIVE_95(cls):
        return cls("95")
    
    @schemas.classproperty
    def POSITIVE_96(cls):
        return cls("96")
    
    @schemas.classproperty
    def POSITIVE_97(cls):
        return cls("97")
    
    @schemas.classproperty
    def POSITIVE_98(cls):
        return cls("98")
    
    @schemas.classproperty
    def POSITIVE_99(cls):
        return cls("99")
    
    @schemas.classproperty
    def POSITIVE_100(cls):
        return cls("100")
    
    @schemas.classproperty
    def POSITIVE_101(cls):
        return cls("101")
    
    @schemas.classproperty
    def POSITIVE_102(cls):
        return cls("102")
    
    @schemas.classproperty
    def POSITIVE_103(cls):
        return cls("103")
    
    @schemas.classproperty
    def POSITIVE_104(cls):
        return cls("104")
    
    @schemas.classproperty
    def POSITIVE_105(cls):
        return cls("105")
    
    @schemas.classproperty
    def POSITIVE_106(cls):
        return cls("106")
    
    @schemas.classproperty
    def POSITIVE_107(cls):
        return cls("107")
    
    @schemas.classproperty
    def POSITIVE_108(cls):
        return cls("108")
    
    @schemas.classproperty
    def POSITIVE_109(cls):
        return cls("109")
    
    @schemas.classproperty
    def POSITIVE_110(cls):
        return cls("110")
    
    @schemas.classproperty
    def POSITIVE_111(cls):
        return cls("111")
    
    @schemas.classproperty
    def POSITIVE_112(cls):
        return cls("112")
    
    @schemas.classproperty
    def POSITIVE_113(cls):
        return cls("113")
    
    @schemas.classproperty
    def POSITIVE_114(cls):
        return cls("114")
    
    @schemas.classproperty
    def POSITIVE_115(cls):
        return cls("115")
    
    @schemas.classproperty
    def POSITIVE_116(cls):
        return cls("116")
    
    @schemas.classproperty
    def POSITIVE_117(cls):
        return cls("117")
    
    @schemas.classproperty
    def POSITIVE_118(cls):
        return cls("118")
    
    @schemas.classproperty
    def POSITIVE_119(cls):
        return cls("119")
    
    @schemas.classproperty
    def POSITIVE_120(cls):
        return cls("120")
    
    @schemas.classproperty
    def POSITIVE_121(cls):
        return cls("121")
    
    @schemas.classproperty
    def POSITIVE_122(cls):
        return cls("122")
    
    @schemas.classproperty
    def POSITIVE_123(cls):
        return cls("123")
    
    @schemas.classproperty
    def POSITIVE_124(cls):
        return cls("124")
    
    @schemas.classproperty
    def POSITIVE_125(cls):
        return cls("125")
    
    @schemas.classproperty
    def POSITIVE_126(cls):
        return cls("126")
    
    @schemas.classproperty
    def POSITIVE_127(cls):
        return cls("127")
    
    @schemas.classproperty
    def POSITIVE_128(cls):
        return cls("128")
RequestRequiredQueryParams = typing_extensions.TypedDict(
    'RequestRequiredQueryParams',
    {
        'cidr': typing.Union[CidrSchema, str, ],
    }
)
RequestOptionalQueryParams = typing_extensions.TypedDict(
    'RequestOptionalQueryParams',
    {
    },
    total=False
)


class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass


request_query_cidr = api_client.QueryParameter(
    name="cidr",
    style=api_client.ParameterStyle.FORM,
    schema=CidrSchema,
    required=True,
    explode=True,
)
# Path params
IdSchema = schemas.UUIDSchema
RequestRequiredPathParams = typing_extensions.TypedDict(
    'RequestRequiredPathParams',
    {
        'id': typing.Union[IdSchema, str, uuid.UUID, ],
    }
)
RequestOptionalPathParams = typing_extensions.TypedDict(
    'RequestOptionalPathParams',
    {
    },
    total=False
)


class RequestPathParams(RequestRequiredPathParams, RequestOptionalPathParams):
    pass


request_path_id = api_client.PathParameter(
    name="id",
    style=api_client.ParameterStyle.SIMPLE,
    schema=IdSchema,
    required=True,
)
SchemaFor200ResponseBodyApplicationJson = IPAvailabilitiesList


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor200ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
)
SchemaFor401ResponseBodyApplicationJson = Error


@dataclass
class ApiResponseFor401(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor401ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_401 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor401,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor401ResponseBodyApplicationJson),
    },
)
SchemaFor403ResponseBodyApplicationJson = Error


@dataclass
class ApiResponseFor403(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor403ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_403 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor403,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor403ResponseBodyApplicationJson),
    },
)
SchemaFor404ResponseBodyApplicationJson = Error


@dataclass
class ApiResponseFor404(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor404ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_404 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor404,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor404ResponseBodyApplicationJson),
    },
)
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):
    @typing.overload
    def _find_ip_availabilities_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def _find_ip_availabilities_oapg(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def _find_ip_availabilities_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def _find_ip_availabilities_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        """
        Retrieve all available subnets of a particular reservation
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value

        _path_params = {}
        for parameter in (
            request_path_id,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)

        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)

        prefix_separator_iterator = None
        for parameter in (
            request_query_cidr,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value

        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)

        response = self.api_client.call_api(
            resource_path=used_path,
            method='get'.upper(),
            headers=_headers,
            auth_settings=_auth,
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(response=response)
        else:
            response_for_status = _status_code_to_response.get(str(response.status))
            if response_for_status:
                api_response = response_for_status.deserialize(response, self.api_client.configuration)
            else:
                api_response = api_client.ApiResponseWithoutDeserialization(response=response)

        if not 200 <= response.status <= 299:
            raise exceptions.ApiException(
                status=response.status,
                reason=response.reason,
                api_response=api_response
            )

        return api_response


class FindIpAvailabilities(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    @typing.overload
    def find_ip_availabilities(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def find_ip_availabilities(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def find_ip_availabilities(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def find_ip_availabilities(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._find_ip_availabilities_oapg(
            query_params=query_params,
            path_params=path_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


class ApiForget(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    @typing.overload
    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def get(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._find_ip_availabilities_oapg(
            query_params=query_params,
            path_params=path_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


